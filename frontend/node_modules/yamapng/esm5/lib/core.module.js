/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { YaMarker } from './directives/marker';
import { YaClaster } from './directives/claster';
import { YaObjectManager } from './directives/objectManager';
import { YaMapsAPILoader, LAZY_MAPS_API_CONFIG } from './services/ya-maps-loader';
import { BROWSER_GLOBALS_PROVIDERS } from './utils/browser-globals';
import { YaMap } from './directives/ymap';
export { yandex } from './ya-maps-types';
/**
 * \@internal
 * @return {?}
 */
export function coreDirectives() {
    return [
        YaMap,
        YaMarker,
        YaClaster,
        YaObjectManager
    ];
}
/**
 * The angular-ya-maps core module. Contains all Directives/Services/Pipes
 * of the core module. Please use `YaCoreModule.forRoot()` in your app module.
 */
var YaCoreModule = /** @class */ (function () {
    function YaCoreModule() {
    }
    /**
     * Please use this method when you register the module at the root level.
     */
    /**
     * Please use this method when you register the module at the root level.
     * @param {?} yaMapsAPILoaderConfig
     * @return {?}
     */
    YaCoreModule.forRoot = /**
     * Please use this method when you register the module at the root level.
     * @param {?} yaMapsAPILoaderConfig
     * @return {?}
     */
    function (yaMapsAPILoaderConfig) {
        return {
            ngModule: YaCoreModule,
            providers: tslib_1.__spread(BROWSER_GLOBALS_PROVIDERS, [
                { provide: YaMapsAPILoader, useClass: YaMapsAPILoader },
                { provide: LAZY_MAPS_API_CONFIG, useValue: yaMapsAPILoaderConfig }
            ]),
        };
    };
    YaCoreModule.decorators = [
        { type: NgModule, args: [{ declarations: coreDirectives(), exports: coreDirectives() },] }
    ];
    return YaCoreModule;
}());
export { YaCoreModule };
/**
 * @param {?} yaMapsAPILoaderConfig
 * @return {?}
 */
export function YaCoreModuleForRoot(yaMapsAPILoaderConfig) {
    return [
        YaCoreModule.forRoot(yaMapsAPILoaderConfig)
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly95YW1hcG5nLyIsInNvdXJjZXMiOlsibGliL2NvcmUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGVBQWUsRUFBZ0Msb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNoSCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFMUMsdUJBQWMsaUJBQWlCLENBQUM7Ozs7O0FBS2hDLE1BQU0sVUFBVSxjQUFjO0lBQzVCLE9BQU87UUFDTCxLQUFLO1FBQ0wsUUFBUTtRQUNSLFNBQVM7UUFDVCxlQUFlO0tBQ2hCLENBQUM7QUFDSixDQUFDOzs7OztBQU1EO0lBQUE7SUFlQSxDQUFDO0lBYkM7O09BRUc7Ozs7OztJQUNXLG9CQUFPOzs7OztJQUFyQixVQUFzQixxQkFBbUQ7UUFDdkUsT0FBTztZQUNMLFFBQVEsRUFBRSxZQUFZO1lBQ3RCLFNBQVMsbUJBQ0oseUJBQXlCO2dCQUM1QixFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRTtnQkFDdkQsRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixFQUFFO2NBQ25FO1NBQ0YsQ0FBQztJQUNKLENBQUM7O2dCQWRGLFFBQVEsU0FBQyxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLEVBQUU7O0lBZXZFLG1CQUFDO0NBQUEsQUFmRCxJQWVDO1NBZFksWUFBWTs7Ozs7QUFnQnpCLE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxxQkFBbUQ7SUFDckYsT0FBTztRQUNMLFlBQVksQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUM7S0FDNUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgWWFNYXJrZXIgfSBmcm9tICcuL2RpcmVjdGl2ZXMvbWFya2VyJztcbmltcG9ydCB7IFlhQ2xhc3RlciB9IGZyb20gJy4vZGlyZWN0aXZlcy9jbGFzdGVyJztcbmltcG9ydCB7IFlhT2JqZWN0TWFuYWdlciB9IGZyb20gJy4vZGlyZWN0aXZlcy9vYmplY3RNYW5hZ2VyJztcbmltcG9ydCB7IFlhTWFwc0FQSUxvYWRlciwgWWFNYXBzQVBJTG9hZGVyQ29uZmlnTGl0ZXJhbCwgTEFaWV9NQVBTX0FQSV9DT05GSUcgfSBmcm9tICcuL3NlcnZpY2VzL3lhLW1hcHMtbG9hZGVyJztcbmltcG9ydCB7IEJST1dTRVJfR0xPQkFMU19QUk9WSURFUlMgfSBmcm9tICcuL3V0aWxzL2Jyb3dzZXItZ2xvYmFscyc7XG5pbXBvcnQgeyBZYU1hcCB9IGZyb20gJy4vZGlyZWN0aXZlcy95bWFwJztcblxuZXhwb3J0ICogZnJvbSAnLi95YS1tYXBzLXR5cGVzJztcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcmVEaXJlY3RpdmVzKCkge1xuICByZXR1cm4gW1xuICAgIFlhTWFwLFxuICAgIFlhTWFya2VyLFxuICAgIFlhQ2xhc3RlcixcbiAgICBZYU9iamVjdE1hbmFnZXJcbiAgXTtcbn1cblxuLyoqXG4gKiBUaGUgYW5ndWxhci15YS1tYXBzIGNvcmUgbW9kdWxlLiBDb250YWlucyBhbGwgRGlyZWN0aXZlcy9TZXJ2aWNlcy9QaXBlc1xuICogb2YgdGhlIGNvcmUgbW9kdWxlLiBQbGVhc2UgdXNlIGBZYUNvcmVNb2R1bGUuZm9yUm9vdCgpYCBpbiB5b3VyIGFwcCBtb2R1bGUuXG4gKi9cbkBOZ01vZHVsZSh7IGRlY2xhcmF0aW9uczogY29yZURpcmVjdGl2ZXMoKSwgZXhwb3J0czogY29yZURpcmVjdGl2ZXMoKSB9KVxuZXhwb3J0IGNsYXNzIFlhQ29yZU1vZHVsZSB7XG4gIC8qKlxuICAgKiBQbGVhc2UgdXNlIHRoaXMgbWV0aG9kIHdoZW4geW91IHJlZ2lzdGVyIHRoZSBtb2R1bGUgYXQgdGhlIHJvb3QgbGV2ZWwuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZvclJvb3QoeWFNYXBzQVBJTG9hZGVyQ29uZmlnOiBZYU1hcHNBUElMb2FkZXJDb25maWdMaXRlcmFsKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBZYUNvcmVNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgLi4uQlJPV1NFUl9HTE9CQUxTX1BST1ZJREVSUyxcbiAgICAgICAgeyBwcm92aWRlOiBZYU1hcHNBUElMb2FkZXIsIHVzZUNsYXNzOiBZYU1hcHNBUElMb2FkZXIgfSxcbiAgICAgICAgeyBwcm92aWRlOiBMQVpZX01BUFNfQVBJX0NPTkZJRywgdXNlVmFsdWU6IHlhTWFwc0FQSUxvYWRlckNvbmZpZyB9XG4gICAgICBdLFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFlhQ29yZU1vZHVsZUZvclJvb3QoeWFNYXBzQVBJTG9hZGVyQ29uZmlnOiBZYU1hcHNBUElMb2FkZXJDb25maWdMaXRlcmFsKSB7XG4gIHJldHVybiBbXG4gICAgWWFDb3JlTW9kdWxlLmZvclJvb3QoeWFNYXBzQVBJTG9hZGVyQ29uZmlnKVxuICBdO1xufVxuIl19