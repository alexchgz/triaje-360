/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { YaMapsAPIWrapper } from '../ya-maps-api-wrapper';
import { MarkerManager } from '../services/managers/marker-manager';
/** @type {?} */
var markerId = 0;
var YaMarker = /** @class */ (function () {
    function YaMarker(_markerManager) {
        this._markerManager = _markerManager;
        this.draggable = false;
        this.preset = 'islands#blueIcon';
        this.markerClick = new EventEmitter();
        // tslint:disable-next-line:max-line-length
        this.dragEnd = new EventEmitter();
        this._markerAddedToManger = false;
        this._observableSubscriptions = [];
        this._id = (markerId++).toString();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    YaMarker.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!this._markerAddedToManger) {
            this._markerManager.addMarker(this);
            this._markerAddedToManger = true;
            this._addEventListeners();
            return;
        }
        if (changes['showInfo']) {
            this._markerManager.showBalloon(this);
        }
    };
    /**
     * @return {?}
     */
    YaMarker.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._markerManager.deleteMarker(this);
        this._observableSubscriptions.forEach(function (s) { return s.unsubscribe(); });
    };
    /**
     * @private
     * @return {?}
     */
    YaMarker.prototype._addEventListeners = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // click event
        /** @type {?} */
        var cs = this._markerManager.createEventObservable('click', this).subscribe(function () {
            _this._markerManager.showBalloon(_this);
            _this.markerClick.emit(null);
        });
        this._observableSubscriptions.push(cs);
        // dragend event
        // tslint:disable-next-line:max-line-length
        /** @type {?} */
        var ds = this._markerManager.createEventObservable('dragend', this).subscribe(function (e) {
            /** @type {?} */
            var thisPlacemark = e.get('target');
            /** @type {?} */
            var coords = thisPlacemark.geometry.getCoordinates();
            _this._markerManager.getNativeMarker(_this).then(function (m) {
                // tslint:disable-next-line:max-line-length
                _this.dragEnd.emit((/** @type {?} */ ({ lat: coords[0], lng: coords[1], nativeMarker: m })));
            });
        });
        this._observableSubscriptions.push(ds);
    };
    YaMarker.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: 'ya-marker',
                    providers: [
                        YaMapsAPIWrapper
                    ]
                },] }
    ];
    /** @nocollapse */
    YaMarker.ctorParameters = function () { return [
        { type: MarkerManager }
    ]; };
    YaMarker.propDecorators = {
        latitude: [{ type: Input }],
        longitude: [{ type: Input }],
        balloonLayout: [{ type: Input }],
        balloonContentHeader: [{ type: Input }],
        balloonContentBody: [{ type: Input }],
        balloonContentFooter: [{ type: Input }],
        draggable: [{ type: Input }],
        preset: [{ type: Input }],
        iconContent: [{ type: Input }],
        showInfo: [{ type: Input }],
        iconLayout: [{ type: Input }],
        iconImageHref: [{ type: Input }],
        iconImageSize: [{ type: Input }],
        iconImageOffset: [{ type: Input }],
        markerClick: [{ type: Output }],
        dragEnd: [{ type: Output }]
    };
    return YaMarker;
}());
export { YaMarker };
if (false) {
    /** @type {?} */
    YaMarker.prototype.latitude;
    /** @type {?} */
    YaMarker.prototype.longitude;
    /** @type {?} */
    YaMarker.prototype.balloonLayout;
    /** @type {?} */
    YaMarker.prototype.balloonContentHeader;
    /** @type {?} */
    YaMarker.prototype.balloonContentBody;
    /** @type {?} */
    YaMarker.prototype.balloonContentFooter;
    /** @type {?} */
    YaMarker.prototype.draggable;
    /** @type {?} */
    YaMarker.prototype.preset;
    /** @type {?} */
    YaMarker.prototype.iconContent;
    /** @type {?} */
    YaMarker.prototype.showInfo;
    /** @type {?} */
    YaMarker.prototype.iconLayout;
    /** @type {?} */
    YaMarker.prototype.iconImageHref;
    /** @type {?} */
    YaMarker.prototype.iconImageSize;
    /** @type {?} */
    YaMarker.prototype.iconImageOffset;
    /** @type {?} */
    YaMarker.prototype.markerClick;
    /** @type {?} */
    YaMarker.prototype.dragEnd;
    /**
     * @type {?}
     * @private
     */
    YaMarker.prototype._markerAddedToManger;
    /**
     * @type {?}
     * @private
     */
    YaMarker.prototype._id;
    /**
     * @type {?}
     * @private
     */
    YaMarker.prototype._observableSubscriptions;
    /**
     * @type {?}
     * @private
     */
    YaMarker.prototype._markerManager;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8veWFtYXBuZy8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL21hcmtlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQXNDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0csT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFMUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHFDQUFxQyxDQUFDOztJQUloRSxRQUFRLEdBQUcsQ0FBQztBQUVoQjtJQW9DRSxrQkFBb0IsY0FBNkI7UUFBN0IsbUJBQWMsR0FBZCxjQUFjLENBQWU7UUFwQmpDLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDbEIsV0FBTSxHQUFHLGtCQUFrQixDQUFDO1FBVzNCLGdCQUFXLEdBQXVCLElBQUksWUFBWSxFQUFRLENBQUM7O1FBRTNELFlBQU8sR0FBeUMsSUFBSSxZQUFZLEVBQTBCLENBQUM7UUFFcEcseUJBQW9CLEdBQUcsS0FBSyxDQUFDO1FBRTdCLDZCQUF3QixHQUFtQixFQUFFLENBQUM7UUFHcEQsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDckMsQ0FBQzs7Ozs7SUFFTSw4QkFBVzs7OztJQUFsQixVQUFtQixPQUF3QztRQUN6RCxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFO1lBRTlCLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUM7WUFDakMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDMUIsT0FBTztTQUNSO1FBQ0QsSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDdkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdkM7SUFDSCxDQUFDOzs7O0lBRU0sOEJBQVc7OztJQUFsQjtRQUNFLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQWYsQ0FBZSxDQUFDLENBQUM7SUFDaEUsQ0FBQzs7Ozs7SUFFTyxxQ0FBa0I7Ozs7SUFBMUI7UUFBQSxpQkFtQkM7OztZQWpCTyxFQUFFLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDO1lBQzVFLEtBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLEtBQUksQ0FBQyxDQUFDO1lBQ3RDLEtBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQztRQUNGLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7Ozs7WUFHakMsRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMscUJBQXFCLENBQXNCLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBQyxDQUFzQjs7Z0JBRXBILGFBQWEsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQzs7Z0JBQy9CLE1BQU0sR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRTtZQUN0RCxLQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxLQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxDQUFTO2dCQUN2RCwyQ0FBMkM7Z0JBQzNDLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLG1CQUFBLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksRUFBRSxDQUFDLEVBQUUsRUFBMEIsQ0FBQyxDQUFDO1lBQ25HLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDO1FBQ0YsSUFBSSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6QyxDQUFDOztnQkE3RUYsU0FBUyxTQUFDOztvQkFFVCxRQUFRLEVBQUUsV0FBVztvQkFDckIsU0FBUyxFQUFFO3dCQUNULGdCQUFnQjtxQkFDakI7aUJBQ0Y7Ozs7Z0JBWlEsYUFBYTs7OzJCQWdCbkIsS0FBSzs0QkFDTCxLQUFLO2dDQUNMLEtBQUs7dUNBQ0wsS0FBSztxQ0FDTCxLQUFLO3VDQUNMLEtBQUs7NEJBQ0wsS0FBSzt5QkFDTCxLQUFLOzhCQUNMLEtBQUs7MkJBQ0wsS0FBSzs2QkFFTCxLQUFLO2dDQUNMLEtBQUs7Z0NBRUwsS0FBSztrQ0FFTCxLQUFLOzhCQUVMLE1BQU07MEJBRU4sTUFBTTs7SUFnRFQsZUFBQztDQUFBLEFBOUVELElBOEVDO1NBckVZLFFBQVE7OztJQUNuQiw0QkFBaUM7O0lBQ2pDLDZCQUFrQzs7SUFDbEMsaUNBQW1DOztJQUNuQyx3Q0FBNkM7O0lBQzdDLHNDQUEyQzs7SUFDM0Msd0NBQTZDOztJQUM3Qyw2QkFBa0M7O0lBQ2xDLDBCQUE0Qzs7SUFDNUMsK0JBQW9DOztJQUNwQyw0QkFBa0M7O0lBRWxDLDhCQUFnQzs7SUFDaEMsaUNBQW1DOztJQUVuQyxpQ0FBbUM7O0lBRW5DLG1DQUFxQzs7SUFFckMsK0JBQTRFOztJQUU1RSwyQkFBNEc7Ozs7O0lBRTVHLHdDQUFxQzs7Ozs7SUFDckMsdUJBQW9COzs7OztJQUNwQiw0Q0FBc0Q7Ozs7O0lBRTFDLGtDQUFxQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgU2ltcGxlQ2hhbmdlLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFlhTWFwc0FQSVdyYXBwZXIgfSBmcm9tICcuLi95YS1tYXBzLWFwaS13cmFwcGVyJztcbmltcG9ydCAqIGFzIG1hcFR5cGVzIGZyb20gJy4uL3lhLW1hcHMtdHlwZXMnO1xuaW1wb3J0IHsgTWFya2VyTWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL21hbmFnZXJzL21hcmtlci1tYW5hZ2VyJztcbmltcG9ydCB7IE1hcmtlciB9IGZyb20gJy4uL3lhLW1hcHMtdHlwZXMnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmxldCBtYXJrZXJJZCA9IDA7XG5cbkBEaXJlY3RpdmUoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAneWEtbWFya2VyJyxcbiAgcHJvdmlkZXJzOiBbXG4gICAgWWFNYXBzQVBJV3JhcHBlclxuICBdXG59KVxuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxuZXhwb3J0IGNsYXNzIFlhTWFya2VyIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICBASW5wdXQoKSBwdWJsaWMgbGF0aXR1ZGU6IG51bWJlcjtcbiAgQElucHV0KCkgcHVibGljIGxvbmdpdHVkZTogbnVtYmVyO1xuICBASW5wdXQoKSBwdWJsaWMgYmFsbG9vbkxheW91dDogYW55O1xuICBASW5wdXQoKSBwdWJsaWMgYmFsbG9vbkNvbnRlbnRIZWFkZXI6IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIGJhbGxvb25Db250ZW50Qm9keTogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgYmFsbG9vbkNvbnRlbnRGb290ZXI6IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIGRyYWdnYWJsZSA9IGZhbHNlO1xuICBASW5wdXQoKSBwdWJsaWMgcHJlc2V0ID0gJ2lzbGFuZHMjYmx1ZUljb24nO1xuICBASW5wdXQoKSBwdWJsaWMgaWNvbkNvbnRlbnQ6IHN0cmluZztcbiAgQElucHV0KCkgcHVibGljIHNob3dJbmZvOiBib29sZWFuO1xuICAvLyBkZWZhdWx0I2ltYWdlXG4gIEBJbnB1dCgpIHB1YmxpYyBpY29uTGF5b3V0OiBhbnk7XG4gIEBJbnB1dCgpIHB1YmxpYyBpY29uSW1hZ2VIcmVmOiBhbnk7XG4gIC8vIFszMCwgNDJdXG4gIEBJbnB1dCgpIHB1YmxpYyBpY29uSW1hZ2VTaXplOiBhbnk7XG4gIC8vIFstNSwgLTM4XVxuICBASW5wdXQoKSBwdWJsaWMgaWNvbkltYWdlT2Zmc2V0OiBhbnk7XG5cbiAgQE91dHB1dCgpIHB1YmxpYyBtYXJrZXJDbGljazogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXG4gIEBPdXRwdXQoKSBwdWJsaWMgZHJhZ0VuZDogRXZlbnRFbWl0dGVyPG1hcFR5cGVzLk1hcE1vdXNlRXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxtYXBUeXBlcy5NYXBNb3VzZUV2ZW50PigpO1xuXG4gIHByaXZhdGUgX21hcmtlckFkZGVkVG9NYW5nZXIgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfaWQ6IHN0cmluZztcbiAgcHJpdmF0ZSBfb2JzZXJ2YWJsZVN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbltdID0gW107XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfbWFya2VyTWFuYWdlcjogTWFya2VyTWFuYWdlcikge1xuICAgIHRoaXMuX2lkID0gKG1hcmtlcklkKyspLnRvU3RyaW5nKCk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogeyBba2V5OiBzdHJpbmddOiBTaW1wbGVDaGFuZ2UgfSkge1xuICAgIGlmICghdGhpcy5fbWFya2VyQWRkZWRUb01hbmdlcikge1xuXG4gICAgICB0aGlzLl9tYXJrZXJNYW5hZ2VyLmFkZE1hcmtlcih0aGlzKTtcbiAgICAgIHRoaXMuX21hcmtlckFkZGVkVG9NYW5nZXIgPSB0cnVlO1xuICAgICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNoYW5nZXNbJ3Nob3dJbmZvJ10pIHtcbiAgICAgIHRoaXMuX21hcmtlck1hbmFnZXIuc2hvd0JhbGxvb24odGhpcyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX21hcmtlck1hbmFnZXIuZGVsZXRlTWFya2VyKHRoaXMpO1xuICAgIHRoaXMuX29ic2VydmFibGVTdWJzY3JpcHRpb25zLmZvckVhY2goKHMpID0+IHMudW5zdWJzY3JpYmUoKSk7XG4gIH1cblxuICBwcml2YXRlIF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAvLyBjbGljayBldmVudFxuICAgIGNvbnN0IGNzID0gdGhpcy5fbWFya2VyTWFuYWdlci5jcmVhdGVFdmVudE9ic2VydmFibGUoJ2NsaWNrJywgdGhpcykuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuX21hcmtlck1hbmFnZXIuc2hvd0JhbGxvb24odGhpcyk7XG4gICAgICB0aGlzLm1hcmtlckNsaWNrLmVtaXQobnVsbCk7XG4gICAgfSk7XG4gICAgdGhpcy5fb2JzZXJ2YWJsZVN1YnNjcmlwdGlvbnMucHVzaChjcyk7XG4gICAgLy8gZHJhZ2VuZCBldmVudFxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcbiAgICBjb25zdCBkcyA9IHRoaXMuX21hcmtlck1hbmFnZXIuY3JlYXRlRXZlbnRPYnNlcnZhYmxlPG1hcFR5cGVzLk1vdXNlRXZlbnQ+KCdkcmFnZW5kJywgdGhpcykuc3Vic2NyaWJlKChlOiBtYXBUeXBlcy5Nb3VzZUV2ZW50KSA9PiB7XG5cbiAgICAgIGNvbnN0IHRoaXNQbGFjZW1hcmsgPSBlLmdldCgndGFyZ2V0Jyk7XG4gICAgICBjb25zdCBjb29yZHMgPSB0aGlzUGxhY2VtYXJrLmdlb21ldHJ5LmdldENvb3JkaW5hdGVzKCk7XG4gICAgICB0aGlzLl9tYXJrZXJNYW5hZ2VyLmdldE5hdGl2ZU1hcmtlcih0aGlzKS50aGVuKChtOiBNYXJrZXIpID0+IHtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxuICAgICAgICB0aGlzLmRyYWdFbmQuZW1pdCh7IGxhdDogY29vcmRzWzBdLCBsbmc6IGNvb3Jkc1sxXSwgbmF0aXZlTWFya2VyOiBtIH0gYXMgbWFwVHlwZXMuTWFwTW91c2VFdmVudCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB0aGlzLl9vYnNlcnZhYmxlU3Vic2NyaXB0aW9ucy5wdXNoKGRzKTtcbiAgfVxufVxuIl19