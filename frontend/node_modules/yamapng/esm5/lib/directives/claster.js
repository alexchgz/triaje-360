/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input } from '@angular/core';
import { YaMapsAPIWrapper } from '../ya-maps-api-wrapper';
import { ClasterManager } from '../services/managers/claster-manager';
/** @type {?} */
var clasterId = 0;
var YaClaster = /** @class */ (function () {
    function YaClaster(_clasterManager) {
        this._clasterManager = _clasterManager;
        this._markerAddedToManger = false;
        this._id = (clasterId++).toString();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    YaClaster.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!this._markerAddedToManger) {
            this._clasterManager.addClaster(this);
        }
    };
    /**
     * @return {?}
     */
    YaClaster.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () { };
    /**
     * @private
     * @return {?}
     */
    YaClaster.prototype._addEventListeners = /**
     * @private
     * @return {?}
     */
    function () { };
    YaClaster.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: 'ya-claster',
                    providers: [
                        YaMapsAPIWrapper
                    ]
                },] }
    ];
    /** @nocollapse */
    YaClaster.ctorParameters = function () { return [
        { type: ClasterManager }
    ]; };
    YaClaster.propDecorators = {
        markers: [{ type: Input }]
    };
    return YaClaster;
}());
export { YaClaster };
if (false) {
    /** @type {?} */
    YaClaster.prototype.markers;
    /**
     * @type {?}
     * @private
     */
    YaClaster.prototype._id;
    /**
     * @type {?}
     * @private
     */
    YaClaster.prototype._markerAddedToManger;
    /**
     * @type {?}
     * @private
     */
    YaClaster.prototype._clasterManager;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3Rlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3lhbWFwbmcvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9jbGFzdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQVFULEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvQixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUUxRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7O0lBR2xFLFNBQVMsR0FBRyxDQUFDO0FBRWpCO0lBZUksbUJBQW9CLGVBQStCO1FBQS9CLG9CQUFlLEdBQWYsZUFBZSxDQUFnQjtRQUYzQyx5QkFBb0IsR0FBRyxLQUFLLENBQUM7UUFHakMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDeEMsQ0FBQzs7Ozs7SUFFTSwrQkFBVzs7OztJQUFsQixVQUFtQixPQUF3QztRQUN2RCxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFO1lBQzVCLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3pDO0lBQ0wsQ0FBQzs7OztJQUVNLCtCQUFXOzs7SUFBbEIsY0FBdUIsQ0FBQzs7Ozs7SUFFaEIsc0NBQWtCOzs7O0lBQTFCLGNBQStCLENBQUM7O2dCQTNCbkMsU0FBUyxTQUFDOztvQkFFUCxRQUFRLEVBQUUsWUFBWTtvQkFDdEIsU0FBUyxFQUFFO3dCQUNQLGdCQUFnQjtxQkFDbkI7aUJBQ0o7Ozs7Z0JBWFEsY0FBYzs7OzBCQWVsQixLQUFLOztJQWtCVixnQkFBQztDQUFBLEFBNUJELElBNEJDO1NBbkJZLFNBQVM7OztJQUNsQiw0QkFBK0I7Ozs7O0lBRS9CLHdCQUFvQjs7Ozs7SUFDcEIseUNBQXFDOzs7OztJQUV6QixvQ0FBdUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEV2ZW50RW1pdHRlcixcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIFNpbXBsZUNoYW5nZSxcbiAgQWZ0ZXJDb250ZW50SW5pdCxcbiAgQ29udGVudENoaWxkcmVuLFxuICBRdWVyeUxpc3QsXG4gIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFlhTWFwc0FQSVdyYXBwZXIgfSBmcm9tICcuLi95YS1tYXBzLWFwaS13cmFwcGVyJztcbmltcG9ydCAqIGFzIG1hcFR5cGVzIGZyb20gJy4uL3lhLW1hcHMtdHlwZXMnO1xuaW1wb3J0IHsgQ2xhc3Rlck1hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9tYW5hZ2Vycy9jbGFzdGVyLW1hbmFnZXInO1xuaW1wb3J0IHsgQ2xhc3RlciwgTWFya2VyQ2xhc3RlciB9IGZyb20gJy4uL3lhLW1hcHMtdHlwZXMnO1xuXG5sZXQgY2xhc3RlcklkID0gMDtcblxuQERpcmVjdGl2ZSh7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAneWEtY2xhc3RlcicsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIFlhTWFwc0FQSVdyYXBwZXJcbiAgICBdXG59KVxuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxuZXhwb3J0IGNsYXNzIFlhQ2xhc3RlciBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBASW5wdXQoKSBwdWJsaWMgbWFya2VyczogYW55W107XG5cbiAgICBwcml2YXRlIF9pZDogc3RyaW5nO1xuICAgIHByaXZhdGUgX21hcmtlckFkZGVkVG9NYW5nZXIgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NsYXN0ZXJNYW5hZ2VyOiBDbGFzdGVyTWFuYWdlcikge1xuICAgICAgICB0aGlzLl9pZCA9IChjbGFzdGVySWQrKykudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogeyBba2V5OiBzdHJpbmddOiBTaW1wbGVDaGFuZ2UgfSkge1xuICAgICAgICBpZiAoIXRoaXMuX21hcmtlckFkZGVkVG9NYW5nZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2NsYXN0ZXJNYW5hZ2VyLmFkZENsYXN0ZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkRlc3Ryb3koKSB7IH1cblxuICAgIHByaXZhdGUgX2FkZEV2ZW50TGlzdGVuZXJzKCkgeyB9XG59XG4iXX0=