/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { YaMapsAPIWrapper } from '../ya-maps-api-wrapper';
import { MarkerManager } from '../services/managers/marker-manager';
import { ClasterManager } from '../services/managers/claster-manager';
import { ObjectManagerManager } from '../services/managers/objectManager-manager';
import * as mapTypes from '../ya-maps-types';
var YaMap = /** @class */ (function () {
    function YaMap(_elem, _mapsWrapper) {
        this._elem = _elem;
        this._mapsWrapper = _mapsWrapper;
        this.longitude = 0;
        this.latitude = 0;
        this.zoom = 8;
        this.mapType = 'yandex#map';
        this.controls = null;
        // tslint:disable-next-line:max-line-length
        this.mapClick = new EventEmitter();
        this.actionTick = new EventEmitter();
        this.mapInit = false;
        this._observableSubscriptions = [];
    }
    /**
     * @return {?}
     */
    YaMap.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        console.log('map iit');
        /** @type {?} */
        var container = this._elem.nativeElement.querySelector('.map-container-inner');
        this._initMapInstance(container);
        this.mapInit = true;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    YaMap.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.mapInit) {
            this.updatePosition(changes);
            this.panTo(changes);
        }
    };
    /**
     * @private
     * @param {?} el
     * @return {?}
     */
    YaMap.prototype._initMapInstance = /**
     * @private
     * @param {?} el
     * @return {?}
     */
    function (el) {
        if (this.controls != null) {
            this._mapsWrapper.createMap(el, {
                center: [this.latitude, this.longitude], zoom: this.zoom, type: this.mapType,
                controls: this.controls
            });
        }
        else {
            this._mapsWrapper.createMap(el, {
                center: [this.latitude, this.longitude], zoom: this.zoom, type: this.mapType
            });
        }
        this._handleMapMouseEvents();
    };
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    YaMap.prototype.updatePosition = /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['latitude'] == null && changes['longitude'] == null) {
            return;
        }
        this._mapsWrapper.setCenter(this.latitude, this.longitude);
    };
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    YaMap.prototype.panTo = /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['panToObjects'] == null) {
            return;
        }
        this._mapsWrapper.panTo(this.panToObjects.points, this.panToObjects.params);
    };
    /**
     * @private
     * @return {?}
     */
    YaMap.prototype._handleMapMouseEvents = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /**
         * @record
         */
        function Emitter() { }
        if (false) {
            /**
             * @param {?} value
             * @return {?}
             */
            Emitter.prototype.emit = function (value) { };
        }
        /**
         * @record
         */
        function Event() { }
        if (false) {
            /** @type {?} */
            Event.prototype.name;
            /** @type {?} */
            Event.prototype.emitter;
        }
        /** @type {?} */
        var clickEvents = [
            { name: 'click', emitter: this.mapClick }
        ];
        /** @type {?} */
        var events = [
            { name: 'actiontick', emitter: this.actionTick }
        ];
        clickEvents.forEach(function (e) {
            /** @type {?} */
            var s = _this._mapsWrapper.subscribeToMapEvent(e.name).subscribe(function (event) {
                /** @type {?} */
                var coords = event.get('coords');
                /** @type {?} */
                var value = (/** @type {?} */ ({ lat: coords[0], lng: coords[1] }));
                e.emitter.emit(value);
            });
            _this._observableSubscriptions.push(s);
        });
        events.forEach(function (e) {
            /** @type {?} */
            var s = _this._mapsWrapper.subscribeToMapEvent(e.name).subscribe(function (event) {
                _this._mapsWrapper.getCenter().then(function (coords) {
                    _this.latitude = coords[0];
                    _this.longitude = coords[1];
                    /** @type {?} */
                    var value = (/** @type {?} */ ({ lat: coords[0], lng: coords[1] }));
                    e.emitter.emit(value);
                });
            });
            _this._observableSubscriptions.push(s);
        });
    };
    YaMap.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'ya-map',
                    providers: [
                        YaMapsAPIWrapper,
                        MarkerManager,
                        ClasterManager,
                        ObjectManagerManager
                    ],
                    template: "\n    <div class=\"map-container-inner\" id=\"map\" >\n      <ng-content></ng-content>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    YaMap.ctorParameters = function () { return [
        { type: ElementRef },
        { type: YaMapsAPIWrapper }
    ]; };
    YaMap.propDecorators = {
        longitude: [{ type: Input }],
        latitude: [{ type: Input }],
        zoom: [{ type: Input }],
        minZoom: [{ type: Input }],
        maxZoom: [{ type: Input }],
        mapType: [{ type: Input }],
        controls: [{ type: Input }],
        panToObjects: [{ type: Input }],
        mapClick: [{ type: Output }],
        actionTick: [{ type: Output }]
    };
    return YaMap;
}());
export { YaMap };
if (false) {
    /** @type {?} */
    YaMap.prototype.longitude;
    /** @type {?} */
    YaMap.prototype.latitude;
    /** @type {?} */
    YaMap.prototype.zoom;
    /** @type {?} */
    YaMap.prototype.minZoom;
    /** @type {?} */
    YaMap.prototype.maxZoom;
    /** @type {?} */
    YaMap.prototype.mapType;
    /** @type {?} */
    YaMap.prototype.controls;
    /** @type {?} */
    YaMap.prototype.panToObjects;
    /** @type {?} */
    YaMap.prototype.mapClick;
    /** @type {?} */
    YaMap.prototype.actionTick;
    /** @type {?} */
    YaMap.prototype.mapInit;
    /**
     * @type {?}
     * @private
     */
    YaMap.prototype._observableSubscriptions;
    /**
     * @type {?}
     * @private
     */
    YaMap.prototype._elem;
    /**
     * @type {?}
     * @private
     */
    YaMap.prototype._mapsWrapper;
}
//# sourceMappingURL=data:application/json;base64,