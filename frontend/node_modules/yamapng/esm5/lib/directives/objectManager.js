/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input } from '@angular/core';
import { YaMapsAPIWrapper } from '../ya-maps-api-wrapper';
import { ObjectManagerManager } from '../services/managers/objectManager-manager';
/** @type {?} */
var markerId = 0;
var YaObjectManager = /** @class */ (function () {
    function YaObjectManager(_manager) {
        this._manager = _manager;
        this.clusterize = false;
        this.clasterPreset = 'islands#blueIcon';
        this.objectPreset = 'islands#blueClusterIcons';
        this.gridSize = 0;
        this._observableSubscriptions = [];
        this._addedToManger = false;
        this._id = (markerId++).toString();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    YaObjectManager.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!this._addedToManger) {
            this._manager.add(this);
            this._addedToManger = true;
            return;
        }
        if (changes['selectedObjectId']) {
            this._manager.navigateToGeoObject(this, this.selectedObjectId);
        }
        if (changes['filter']) {
            this._manager.setFilter(this, this.filter);
        }
    };
    YaObjectManager.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: 'ya-object-manager',
                    providers: [
                        YaMapsAPIWrapper
                    ]
                },] }
    ];
    /** @nocollapse */
    YaObjectManager.ctorParameters = function () { return [
        { type: ObjectManagerManager }
    ]; };
    YaObjectManager.propDecorators = {
        clusterize: [{ type: Input }],
        datasource: [{ type: Input }],
        clasterPreset: [{ type: Input }],
        objectPreset: [{ type: Input }],
        gridSize: [{ type: Input }],
        selectedObjectId: [{ type: Input }],
        filter: [{ type: Input }]
    };
    return YaObjectManager;
}());
export { YaObjectManager };
if (false) {
    /** @type {?} */
    YaObjectManager.prototype.clusterize;
    /** @type {?} */
    YaObjectManager.prototype.datasource;
    /** @type {?} */
    YaObjectManager.prototype.clasterPreset;
    /** @type {?} */
    YaObjectManager.prototype.objectPreset;
    /** @type {?} */
    YaObjectManager.prototype.gridSize;
    /** @type {?} */
    YaObjectManager.prototype.selectedObjectId;
    /** @type {?} */
    YaObjectManager.prototype.filter;
    /**
     * @type {?}
     * @private
     */
    YaObjectManager.prototype._id;
    /**
     * @type {?}
     * @private
     */
    YaObjectManager.prototype._observableSubscriptions;
    /**
     * @type {?}
     * @private
     */
    YaObjectManager.prototype._addedToManger;
    /**
     * @type {?}
     * @private
     */
    YaObjectManager.prototype._manager;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0TWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3lhbWFwbmcvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9vYmplY3RNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNxQyxLQUFLLEVBQ3BELE1BQU0sZUFBZSxDQUFDO0FBR3ZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTFELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDOztJQUU5RSxRQUFRLEdBQUcsQ0FBQztBQUVoQjtJQXNCRSx5QkFBb0IsUUFBOEI7UUFBOUIsYUFBUSxHQUFSLFFBQVEsQ0FBc0I7UUFabEMsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUVuQixrQkFBYSxHQUFHLGtCQUFrQixDQUFDO1FBQ25DLGlCQUFZLEdBQUcsMEJBQTBCLENBQUM7UUFDMUMsYUFBUSxHQUFHLENBQUMsQ0FBQztRQUtyQiw2QkFBd0IsR0FBbUIsRUFBRSxDQUFDO1FBQzlDLG1CQUFjLEdBQUcsS0FBSyxDQUFDO1FBRzdCLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3JDLENBQUM7Ozs7O0lBRU0scUNBQVc7Ozs7SUFBbEIsVUFBbUIsT0FBd0M7UUFDekQsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFFeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDeEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7WUFDM0IsT0FBTztTQUNSO1FBRUQsSUFBSSxPQUFPLENBQUMsa0JBQWtCLENBQUMsRUFBRTtZQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUNoRTtRQUNELElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDNUM7SUFFSCxDQUFDOztnQkF6Q0YsU0FBUyxTQUFDOztvQkFFVCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixTQUFTLEVBQUU7d0JBQ1QsZ0JBQWdCO3FCQUNqQjtpQkFDRjs7OztnQkFWUSxvQkFBb0I7Ozs2QkFjMUIsS0FBSzs2QkFDTCxLQUFLO2dDQUNMLEtBQUs7K0JBQ0wsS0FBSzsyQkFDTCxLQUFLO21DQUNMLEtBQUs7eUJBQ0wsS0FBSzs7SUEwQlIsc0JBQUM7Q0FBQSxBQTFDRCxJQTBDQztTQWpDWSxlQUFlOzs7SUFDMUIscUNBQW1DOztJQUNuQyxxQ0FBZ0M7O0lBQ2hDLHdDQUFtRDs7SUFDbkQsdUNBQTBEOztJQUMxRCxtQ0FBNkI7O0lBQzdCLDJDQUF5Qzs7SUFDekMsaUNBQTRCOzs7OztJQUU1Qiw4QkFBb0I7Ozs7O0lBQ3BCLG1EQUFzRDs7Ozs7SUFDdEQseUNBQStCOzs7OztJQUVuQixtQ0FBc0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZSxcbiAgQWZ0ZXJDb250ZW50SW5pdCwgQ29udGVudENoaWxkcmVuLCBRdWVyeUxpc3QsIElucHV0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFlhTWFwc0FQSVdyYXBwZXIgfSBmcm9tICcuLi95YS1tYXBzLWFwaS13cmFwcGVyJztcbmltcG9ydCAqIGFzIG1hcFR5cGVzIGZyb20gJy4uL3lhLW1hcHMtdHlwZXMnO1xuaW1wb3J0IHsgT2JqZWN0TWFuYWdlck1hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9tYW5hZ2Vycy9vYmplY3RNYW5hZ2VyLW1hbmFnZXInO1xuXG5sZXQgbWFya2VySWQgPSAwO1xuXG5ARGlyZWN0aXZlKHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICBzZWxlY3RvcjogJ3lhLW9iamVjdC1tYW5hZ2VyJyxcbiAgcHJvdmlkZXJzOiBbXG4gICAgWWFNYXBzQVBJV3JhcHBlclxuICBdXG59KVxuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeFxuZXhwb3J0IGNsYXNzIFlhT2JqZWN0TWFuYWdlciBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIHB1YmxpYyBjbHVzdGVyaXplID0gZmFsc2U7XG4gIEBJbnB1dCgpIHB1YmxpYyBkYXRhc291cmNlOiBhbnk7XG4gIEBJbnB1dCgpIHB1YmxpYyBjbGFzdGVyUHJlc2V0ID0gJ2lzbGFuZHMjYmx1ZUljb24nO1xuICBASW5wdXQoKSBwdWJsaWMgb2JqZWN0UHJlc2V0ID0gJ2lzbGFuZHMjYmx1ZUNsdXN0ZXJJY29ucyc7XG4gIEBJbnB1dCgpIHB1YmxpYyBncmlkU2l6ZSA9IDA7XG4gIEBJbnB1dCgpIHB1YmxpYyBzZWxlY3RlZE9iamVjdElkOiBudW1iZXI7XG4gIEBJbnB1dCgpIHB1YmxpYyBmaWx0ZXI6IGFueTtcblxuICBwcml2YXRlIF9pZDogc3RyaW5nO1xuICBwcml2YXRlIF9vYnNlcnZhYmxlU3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBbXTtcbiAgcHJpdmF0ZSBfYWRkZWRUb01hbmdlciA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX21hbmFnZXI6IE9iamVjdE1hbmFnZXJNYW5hZ2VyKSB7XG4gICAgdGhpcy5faWQgPSAobWFya2VySWQrKykudG9TdHJpbmcoKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7IFtrZXk6IHN0cmluZ106IFNpbXBsZUNoYW5nZSB9KSB7XG4gICAgaWYgKCF0aGlzLl9hZGRlZFRvTWFuZ2VyKSB7XG5cbiAgICAgIHRoaXMuX21hbmFnZXIuYWRkKHRoaXMpO1xuICAgICAgdGhpcy5fYWRkZWRUb01hbmdlciA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZXNbJ3NlbGVjdGVkT2JqZWN0SWQnXSkge1xuICAgICAgdGhpcy5fbWFuYWdlci5uYXZpZ2F0ZVRvR2VvT2JqZWN0KHRoaXMsIHRoaXMuc2VsZWN0ZWRPYmplY3RJZCk7XG4gICAgfVxuICAgIGlmIChjaGFuZ2VzWydmaWx0ZXInXSkge1xuICAgICAgdGhpcy5fbWFuYWdlci5zZXRGaWx0ZXIodGhpcywgdGhpcy5maWx0ZXIpO1xuICAgIH1cblxuICB9XG59XG4iXX0=