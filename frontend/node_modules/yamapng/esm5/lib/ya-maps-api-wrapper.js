/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { YaMapsAPILoader } from './services/ya-maps-loader';
import { DocumentRef } from './utils/browser-globals';
var YaMapsAPIWrapper = /** @class */ (function () {
    function YaMapsAPIWrapper(_loader, _zone, d) {
        var _this = this;
        this._loader = _loader;
        this._zone = _zone;
        this._documentRef = d;
        this._map = new Promise(function (resolve) {
            _this._mapResolver = resolve;
        });
    }
    /**
     * @param {?} el
     * @param {?} mapOptions
     * @return {?}
     */
    YaMapsAPIWrapper.prototype.createMap = /**
     * @param {?} el
     * @param {?} mapOptions
     * @return {?}
     */
    function (el, mapOptions) {
        var _this = this;
        /** @type {?} */
        var res = this._loader.load().then(function () {
            /** @type {?} */
            var create = function () { return setTimeout(function () {
                if (ymaps.Map) {
                    /** @type {?} */
                    var map = new ymaps.Map(el, mapOptions);
                    _this._mapResolver((/** @type {?} */ (map)));
                }
                else {
                    create();
                }
            }, 100); };
            create();
        }).catch(function (e) { return console.log(e); });
        return res;
    };
    /**
     * @param {?} latitude
     * @param {?} longitude
     * @return {?}
     */
    YaMapsAPIWrapper.prototype.setCenter = /**
     * @param {?} latitude
     * @param {?} longitude
     * @return {?}
     */
    function (latitude, longitude) {
        this._map.then(function (map) {
            map.setCenter([latitude, longitude]);
        });
    };
    /**
     * @return {?}
     */
    YaMapsAPIWrapper.prototype.getCenter = /**
     * @return {?}
     */
    function () {
        return this._map.then(function (map) {
            return map.getCenter();
        });
    };
    /**
     * @param {?} points
     * @param {?} options
     * @return {?}
     */
    YaMapsAPIWrapper.prototype.panTo = /**
     * @param {?} points
     * @param {?} options
     * @return {?}
     */
    function (points, options) {
        this._map.then(function (map) {
            map.panTo(points, options);
        });
    };
    /**
     * @template E
     * @param {?} eventName
     * @return {?}
     */
    YaMapsAPIWrapper.prototype.subscribeToMapEvent = /**
     * @template E
     * @param {?} eventName
     * @return {?}
     */
    function (eventName) {
        var _this = this;
        return Observable.create(function (observer) {
            _this._map.then(function (m) {
                m.events.add(eventName, function (arg) { _this._zone.run(function () { return observer.next(arg); }); });
            });
        });
    };
    /**
     * @param {?} marker
     * @return {?}
     */
    YaMapsAPIWrapper.prototype.createMarker = /**
     * @param {?} marker
     * @return {?}
     */
    function (marker) {
        return this._map.then(function (map) {
            /** @type {?} */
            var m = new ymaps.Placemark([marker.latitude, marker.longitude], {
                balloonContentHeader: marker.balloonContentHeader,
                balloonContentBody: marker.balloonContentBody,
                balloonContentFooter: marker.balloonContentFooter,
                iconContent: marker.iconContent
            }, {
                draggable: marker.draggable,
                preset: marker.preset,
                iconLayout: marker.iconLayout,
                iconImageHref: marker.iconImageHref,
                iconImageSize: marker.iconImageSize,
                iconImageOffset: marker.iconImageOffset
            });
            map.geoObjects.add(m);
            return m;
        });
    };
    /**
     * @param {?} overlay
     * @return {?}
     */
    YaMapsAPIWrapper.prototype.removeGeo = /**
     * @param {?} overlay
     * @return {?}
     */
    function (overlay) {
        this._map.then(function (map) {
            map.geoObjects.remove(overlay);
        });
    };
    /**
     * @param {?} claster
     * @return {?}
     */
    YaMapsAPIWrapper.prototype.createClaster = /**
     * @param {?} claster
     * @return {?}
     */
    function (claster) {
        return this._map.then(function (map) {
            if (claster.markers.length === 0) {
                return;
            }
            /** @type {?} */
            var myGeoObjects;
            myGeoObjects = new Array();
            claster.markers.forEach(function (x) {
                /** @type {?} */
                var point = new ymaps.GeoObject({
                    geometry: { type: x.type, coordinates: [x.lat, x.lng] }
                });
                myGeoObjects.push(point);
            });
            /** @type {?} */
            var clusterer = new ymaps.Clusterer({});
            clusterer.add(myGeoObjects);
            map.geoObjects.add(clusterer);
            return clusterer;
        });
    };
    /**
     * @param {?} objectManager
     * @return {?}
     */
    YaMapsAPIWrapper.prototype.createObjectManager = /**
     * @param {?} objectManager
     * @return {?}
     */
    function (objectManager) {
        return this._map.then(function (map) {
            if (objectManager.datasource.length === 0) {
                return;
            }
            /** @type {?} */
            var nativeObjectManager = new ymaps.ObjectManager({
                clusterize: objectManager.clusterize,
                gridSize: objectManager.gridSize
            });
            nativeObjectManager.add(objectManager.datasource);
            nativeObjectManager.objects.options.set('preset', objectManager.objectPreset);
            nativeObjectManager.clusters.options.set('preset', objectManager.clasterPreset);
            map.geoObjects.add(nativeObjectManager);
            return nativeObjectManager;
        });
    };
    /**
     * @param {?} objectManager
     * @param {?} id
     * @return {?}
     */
    YaMapsAPIWrapper.prototype.navigateToGeoObject = /**
     * @param {?} objectManager
     * @param {?} id
     * @return {?}
     */
    function (objectManager, id) {
        /** @type {?} */
        var obj = objectManager.objects.getById(id);
        if (obj) {
            this.setCenter(obj.geometry.coordinates[0], obj.geometry.coordinates[1]);
            objectManager.objects.balloon.open(id);
        }
    };
    /**
     * @return {?}
     */
    YaMapsAPIWrapper.prototype.checkYaSciptLoaded = /**
     * @return {?}
     */
    function () {
        return this._documentRef.getNativeDocument().getElementById('YaScript');
    };
    /**
     * @param {?} objectManager
     * @param {?} filter
     * @return {?}
     */
    YaMapsAPIWrapper.prototype.objectManagerSetFilter = /**
     * @param {?} objectManager
     * @param {?} filter
     * @return {?}
     */
    function (objectManager, filter) {
        objectManager.setFilter(filter);
    };
    YaMapsAPIWrapper.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    YaMapsAPIWrapper.ctorParameters = function () { return [
        { type: YaMapsAPILoader },
        { type: NgZone },
        { type: DocumentRef }
    ]; };
    return YaMapsAPIWrapper;
}());
export { YaMapsAPIWrapper };
if (false) {
    /**
     * @type {?}
     * @private
     */
    YaMapsAPIWrapper.prototype._map;
    /**
     * @type {?}
     * @private
     */
    YaMapsAPIWrapper.prototype._mapResolver;
    /**
     * @type {?}
     * @private
     */
    YaMapsAPIWrapper.prototype._documentRef;
    /**
     * @type {?}
     * @private
     */
    YaMapsAPIWrapper.prototype._loader;
    /**
     * @type {?}
     * @private
     */
    YaMapsAPIWrapper.prototype._zone;
}
//# sourceMappingURL=data:application/json;base64,