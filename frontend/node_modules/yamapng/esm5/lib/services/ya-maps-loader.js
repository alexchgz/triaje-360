/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { DocumentRef, WindowRef } from './../utils/browser-globals';
/**
 * Token for the config of the YaMapsAPILoaderConfigLiteral. Please provide an object of type {\@link
 * YaMapsAPILoaderConfigLiteral}.
 * @type {?}
 */
export var LAZY_MAPS_API_CONFIG = new InjectionToken('angular-ya-maps MAPS_API_CONFIG');
/**
 * Configuration for the {\@link LazyMapsAPILoader}.
 * @record
 */
export function YaMapsAPILoaderConfigLiteral() { }
if (false) {
    /**
     * API Key.
     * @type {?|undefined}
     */
    YaMapsAPILoaderConfigLiteral.prototype.apiKey;
}
var YaMapsAPILoader = /** @class */ (function () {
    function YaMapsAPILoader(config, w, d) {
        if (config === void 0) { config = null; }
        this.config = config;
        this._windowRef = w;
        this._documentRef = d;
    }
    /**
     * @return {?}
     */
    YaMapsAPILoader.prototype.load = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var script = this._documentRef.getNativeDocument().createElement('script');
        script.type = 'text/javascript';
        script.async = false;
        script.defer = true;
        script.id = 'YaScript';
        /** @type {?} */
        var callbackName = "angular2YAMapsAPILoader";
        script.src = "https://api-maps.yandex.ru/2.1/?apikey=" + this.config.apiKey + "&lang=ru_RU";
        // tslint:disable-next-line:ban-types
        this._scriptLoadingPromise = new Promise(function (resolve, reject) {
            script.onload = function () { resolve(); };
            script.onerror = function (error) { reject(); };
        });
        this._documentRef.getNativeDocument().body.appendChild(script);
        return this._scriptLoadingPromise;
    };
    YaMapsAPILoader.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    YaMapsAPILoader.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LAZY_MAPS_API_CONFIG,] }] },
        { type: WindowRef },
        { type: DocumentRef }
    ]; };
    return YaMapsAPILoader;
}());
export { YaMapsAPILoader };
if (false) {
    /**
     * @type {?}
     * @private
     */
    YaMapsAPILoader.prototype._scriptLoadingPromise;
    /**
     * @type {?}
     * @private
     */
    YaMapsAPILoader.prototype.config;
    /**
     * @type {?}
     * @private
     */
    YaMapsAPILoader.prototype._windowRef;
    /**
     * @type {?}
     * @private
     */
    YaMapsAPILoader.prototype._documentRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWEtbWFwcy1sb2FkZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly95YW1hcG5nLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3lhLW1hcHMtbG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7Ozs7OztBQU1uRSxNQUFNLEtBQU8sb0JBQW9CLEdBQUcsSUFBSSxjQUFjLENBQStCLGlDQUFpQyxDQUFDOzs7OztBQUt4SCxrREFLQzs7Ozs7O0lBREMsOENBQWdCOztBQUdsQjtJQU9JLHlCQUFzRCxNQUFrQixFQUFFLENBQVksRUFBRSxDQUFjO1FBQTFGLHVCQUFBLEVBQUEsYUFBNEQ7UUFDcEUsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7SUFDMUIsQ0FBQzs7OztJQUVNLDhCQUFJOzs7SUFBWDs7WUFDVSxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFDNUUsTUFBTSxDQUFDLElBQUksR0FBRyxpQkFBaUIsQ0FBQztRQUNoQyxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNyQixNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNwQixNQUFNLENBQUMsRUFBRSxHQUFHLFVBQVUsQ0FBQzs7WUFDakIsWUFBWSxHQUFHLHlCQUF5QjtRQUM5QyxNQUFNLENBQUMsR0FBRyxHQUFHLDRDQUEwQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sZ0JBQWEsQ0FBQztRQUN2RixxQ0FBcUM7UUFDckMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksT0FBTyxDQUFPLFVBQUMsT0FBaUIsRUFBRSxNQUFnQjtZQUMvRSxNQUFNLENBQUMsTUFBTSxHQUFHLGNBQVEsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckMsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFDLEtBQVksSUFBTyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxZQUFZLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9ELE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDO0lBQ3RDLENBQUM7O2dCQTVCSixVQUFVOzs7O2dEQU9NLFFBQVEsWUFBSSxNQUFNLFNBQUMsb0JBQW9CO2dCQXpCbEMsU0FBUztnQkFBdEIsV0FBVzs7SUFnRHBCLHNCQUFDO0NBQUEsQUE5QkQsSUE4QkM7U0E3QlksZUFBZTs7Ozs7O0lBQ3hCLGdEQUE2Qzs7Ozs7SUFDN0MsaUNBQTZDOzs7OztJQUM3QyxxQ0FBOEI7Ozs7O0lBQzlCLHVDQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb2N1bWVudFJlZiwgV2luZG93UmVmIH0gZnJvbSAnLi8uLi91dGlscy9icm93c2VyLWdsb2JhbHMnO1xuXG4vKipcbiAqIFRva2VuIGZvciB0aGUgY29uZmlnIG9mIHRoZSBZYU1hcHNBUElMb2FkZXJDb25maWdMaXRlcmFsLiBQbGVhc2UgcHJvdmlkZSBhbiBvYmplY3Qgb2YgdHlwZSB7QGxpbmtcbiAgKiBZYU1hcHNBUElMb2FkZXJDb25maWdMaXRlcmFsfS5cbiAgKi9cbiBleHBvcnQgY29uc3QgTEFaWV9NQVBTX0FQSV9DT05GSUcgPSBuZXcgSW5qZWN0aW9uVG9rZW48WWFNYXBzQVBJTG9hZGVyQ29uZmlnTGl0ZXJhbD4oJ2FuZ3VsYXIteWEtbWFwcyBNQVBTX0FQSV9DT05GSUcnKTtcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGZvciB0aGUge0BsaW5rIExhenlNYXBzQVBJTG9hZGVyfS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBZYU1hcHNBUElMb2FkZXJDb25maWdMaXRlcmFsIHtcbiAgLyoqXG4gICAqIEFQSSBLZXkuXG4gICAqL1xuICBhcGlLZXk/OiBzdHJpbmc7XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBZYU1hcHNBUElMb2FkZXIge1xuICAgIHByaXZhdGUgX3NjcmlwdExvYWRpbmdQcm9taXNlOiBQcm9taXNlPHZvaWQ+O1xuICAgIHByaXZhdGUgY29uZmlnOiBZYU1hcHNBUElMb2FkZXJDb25maWdMaXRlcmFsO1xuICAgIHByaXZhdGUgX3dpbmRvd1JlZjogV2luZG93UmVmO1xuICAgIHByaXZhdGUgX2RvY3VtZW50UmVmOiBEb2N1bWVudFJlZjtcblxuICAgIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoTEFaWV9NQVBTX0FQSV9DT05GSUcpIGNvbmZpZzogYW55ID0gbnVsbCwgdzogV2luZG93UmVmLCBkOiBEb2N1bWVudFJlZikge1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgdGhpcy5fd2luZG93UmVmID0gdztcbiAgICAgICAgdGhpcy5fZG9jdW1lbnRSZWYgPSBkO1xuICAgIH1cblxuICAgIHB1YmxpYyBsb2FkKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBzY3JpcHQgPSB0aGlzLl9kb2N1bWVudFJlZi5nZXROYXRpdmVEb2N1bWVudCgpLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgICAgICBzY3JpcHQuYXN5bmMgPSBmYWxzZTtcbiAgICAgICAgc2NyaXB0LmRlZmVyID0gdHJ1ZTtcbiAgICAgICAgc2NyaXB0LmlkID0gJ1lhU2NyaXB0JztcbiAgICAgICAgY29uc3QgY2FsbGJhY2tOYW1lID0gYGFuZ3VsYXIyWUFNYXBzQVBJTG9hZGVyYDtcbiAgICAgICAgc2NyaXB0LnNyYyA9IGBodHRwczovL2FwaS1tYXBzLnlhbmRleC5ydS8yLjEvP2FwaWtleT0ke3RoaXMuY29uZmlnLmFwaUtleX0mbGFuZz1ydV9SVWA7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpiYW4tdHlwZXNcbiAgICAgICAgdGhpcy5fc2NyaXB0TG9hZGluZ1Byb21pc2UgPSBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZTogRnVuY3Rpb24sIHJlamVjdDogRnVuY3Rpb24pID0+IHtcbiAgICAgICAgICAgIHNjcmlwdC5vbmxvYWQgPSAoKSA9PiB7IHJlc29sdmUoKTsgfTtcbiAgICAgICAgICAgIHNjcmlwdC5vbmVycm9yID0gKGVycm9yOiBFdmVudCkgPT4geyByZWplY3QoKTsgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2RvY3VtZW50UmVmLmdldE5hdGl2ZURvY3VtZW50KCkuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICByZXR1cm4gdGhpcy5fc2NyaXB0TG9hZGluZ1Byb21pc2U7XG4gICAgfVxuXG59XG4iXX0=