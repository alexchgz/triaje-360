/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { YaMarker } from './directives/marker';
import { YaClaster } from './directives/claster';
import { YaObjectManager } from './directives/objectManager';
import { YaMapsAPILoader, LAZY_MAPS_API_CONFIG } from './services/ya-maps-loader';
import { BROWSER_GLOBALS_PROVIDERS } from './utils/browser-globals';
import { YaMap } from './directives/ymap';
export { yandex } from './ya-maps-types';
/**
 * \@internal
 * @return {?}
 */
export function coreDirectives() {
    return [
        YaMap,
        YaMarker,
        YaClaster,
        YaObjectManager
    ];
}
/**
 * The angular-ya-maps core module. Contains all Directives/Services/Pipes
 * of the core module. Please use `YaCoreModule.forRoot()` in your app module.
 */
export class YaCoreModule {
    /**
     * Please use this method when you register the module at the root level.
     * @param {?} yaMapsAPILoaderConfig
     * @return {?}
     */
    static forRoot(yaMapsAPILoaderConfig) {
        return {
            ngModule: YaCoreModule,
            providers: [
                ...BROWSER_GLOBALS_PROVIDERS,
                { provide: YaMapsAPILoader, useClass: YaMapsAPILoader },
                { provide: LAZY_MAPS_API_CONFIG, useValue: yaMapsAPILoaderConfig }
            ],
        };
    }
}
YaCoreModule.decorators = [
    { type: NgModule, args: [{ declarations: coreDirectives(), exports: coreDirectives() },] }
];
/**
 * @param {?} yaMapsAPILoaderConfig
 * @return {?}
 */
export function YaCoreModuleForRoot(yaMapsAPILoaderConfig) {
    return [
        YaCoreModule.forRoot(yaMapsAPILoaderConfig)
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly95YW1hcG5nLyIsInNvdXJjZXMiOlsibGliL2NvcmUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZUFBZSxFQUFnQyxvQkFBb0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2hILE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUUxQyx1QkFBYyxpQkFBaUIsQ0FBQzs7Ozs7QUFLaEMsTUFBTSxVQUFVLGNBQWM7SUFDNUIsT0FBTztRQUNMLEtBQUs7UUFDTCxRQUFRO1FBQ1IsU0FBUztRQUNULGVBQWU7S0FDaEIsQ0FBQztBQUNKLENBQUM7Ozs7O0FBT0QsTUFBTSxPQUFPLFlBQVk7Ozs7OztJQUloQixNQUFNLENBQUMsT0FBTyxDQUFDLHFCQUFtRDtRQUN2RSxPQUFPO1lBQ0wsUUFBUSxFQUFFLFlBQVk7WUFDdEIsU0FBUyxFQUFFO2dCQUNULEdBQUcseUJBQXlCO2dCQUM1QixFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRTtnQkFDdkQsRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixFQUFFO2FBQ25FO1NBQ0YsQ0FBQztJQUNKLENBQUM7OztZQWRGLFFBQVEsU0FBQyxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLEVBQUU7Ozs7OztBQWlCdkUsTUFBTSxVQUFVLG1CQUFtQixDQUFDLHFCQUFtRDtJQUNyRixPQUFPO1FBQ0wsWUFBWSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztLQUM1QyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBZYU1hcmtlciB9IGZyb20gJy4vZGlyZWN0aXZlcy9tYXJrZXInO1xuaW1wb3J0IHsgWWFDbGFzdGVyIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2NsYXN0ZXInO1xuaW1wb3J0IHsgWWFPYmplY3RNYW5hZ2VyIH0gZnJvbSAnLi9kaXJlY3RpdmVzL29iamVjdE1hbmFnZXInO1xuaW1wb3J0IHsgWWFNYXBzQVBJTG9hZGVyLCBZYU1hcHNBUElMb2FkZXJDb25maWdMaXRlcmFsLCBMQVpZX01BUFNfQVBJX0NPTkZJRyB9IGZyb20gJy4vc2VydmljZXMveWEtbWFwcy1sb2FkZXInO1xuaW1wb3J0IHsgQlJPV1NFUl9HTE9CQUxTX1BST1ZJREVSUyB9IGZyb20gJy4vdXRpbHMvYnJvd3Nlci1nbG9iYWxzJztcbmltcG9ydCB7IFlhTWFwIH0gZnJvbSAnLi9kaXJlY3RpdmVzL3ltYXAnO1xuXG5leHBvcnQgKiBmcm9tICcuL3lhLW1hcHMtdHlwZXMnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29yZURpcmVjdGl2ZXMoKSB7XG4gIHJldHVybiBbXG4gICAgWWFNYXAsXG4gICAgWWFNYXJrZXIsXG4gICAgWWFDbGFzdGVyLFxuICAgIFlhT2JqZWN0TWFuYWdlclxuICBdO1xufVxuXG4vKipcbiAqIFRoZSBhbmd1bGFyLXlhLW1hcHMgY29yZSBtb2R1bGUuIENvbnRhaW5zIGFsbCBEaXJlY3RpdmVzL1NlcnZpY2VzL1BpcGVzXG4gKiBvZiB0aGUgY29yZSBtb2R1bGUuIFBsZWFzZSB1c2UgYFlhQ29yZU1vZHVsZS5mb3JSb290KClgIGluIHlvdXIgYXBwIG1vZHVsZS5cbiAqL1xuQE5nTW9kdWxlKHsgZGVjbGFyYXRpb25zOiBjb3JlRGlyZWN0aXZlcygpLCBleHBvcnRzOiBjb3JlRGlyZWN0aXZlcygpIH0pXG5leHBvcnQgY2xhc3MgWWFDb3JlTW9kdWxlIHtcbiAgLyoqXG4gICAqIFBsZWFzZSB1c2UgdGhpcyBtZXRob2Qgd2hlbiB5b3UgcmVnaXN0ZXIgdGhlIG1vZHVsZSBhdCB0aGUgcm9vdCBsZXZlbC5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZm9yUm9vdCh5YU1hcHNBUElMb2FkZXJDb25maWc6IFlhTWFwc0FQSUxvYWRlckNvbmZpZ0xpdGVyYWwpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IFlhQ29yZU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAuLi5CUk9XU0VSX0dMT0JBTFNfUFJPVklERVJTLFxuICAgICAgICB7IHByb3ZpZGU6IFlhTWFwc0FQSUxvYWRlciwgdXNlQ2xhc3M6IFlhTWFwc0FQSUxvYWRlciB9LFxuICAgICAgICB7IHByb3ZpZGU6IExBWllfTUFQU19BUElfQ09ORklHLCB1c2VWYWx1ZTogeWFNYXBzQVBJTG9hZGVyQ29uZmlnIH1cbiAgICAgIF0sXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gWWFDb3JlTW9kdWxlRm9yUm9vdCh5YU1hcHNBUElMb2FkZXJDb25maWc6IFlhTWFwc0FQSUxvYWRlckNvbmZpZ0xpdGVyYWwpIHtcbiAgcmV0dXJuIFtcbiAgICBZYUNvcmVNb2R1bGUuZm9yUm9vdCh5YU1hcHNBUElMb2FkZXJDb25maWcpXG4gIF07XG59XG4iXX0=