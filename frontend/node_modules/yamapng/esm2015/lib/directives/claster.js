/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input } from '@angular/core';
import { YaMapsAPIWrapper } from '../ya-maps-api-wrapper';
import { ClasterManager } from '../services/managers/claster-manager';
/** @type {?} */
let clasterId = 0;
// tslint:disable-next-line:directive-class-suffix
export class YaClaster {
    /**
     * @param {?} _clasterManager
     */
    constructor(_clasterManager) {
        this._clasterManager = _clasterManager;
        this._markerAddedToManger = false;
        this._id = (clasterId++).toString();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this._markerAddedToManger) {
            this._clasterManager.addClaster(this);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() { }
    /**
     * @private
     * @return {?}
     */
    _addEventListeners() { }
}
YaClaster.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'ya-claster',
                providers: [
                    YaMapsAPIWrapper
                ]
            },] }
];
/** @nocollapse */
YaClaster.ctorParameters = () => [
    { type: ClasterManager }
];
YaClaster.propDecorators = {
    markers: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    YaClaster.prototype.markers;
    /**
     * @type {?}
     * @private
     */
    YaClaster.prototype._id;
    /**
     * @type {?}
     * @private
     */
    YaClaster.prototype._markerAddedToManger;
    /**
     * @type {?}
     * @private
     */
    YaClaster.prototype._clasterManager;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3Rlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3lhbWFwbmcvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9jbGFzdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQVFULEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvQixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUUxRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7O0lBR2xFLFNBQVMsR0FBRyxDQUFDO0FBVWpCLGtEQUFrRDtBQUNsRCxNQUFNLE9BQU8sU0FBUzs7OztJQU1sQixZQUFvQixlQUErQjtRQUEvQixvQkFBZSxHQUFmLGVBQWUsQ0FBZ0I7UUFGM0MseUJBQW9CLEdBQUcsS0FBSyxDQUFDO1FBR2pDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3hDLENBQUM7Ozs7O0lBRU0sV0FBVyxDQUFDLE9BQXdDO1FBQ3ZELElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUU7WUFDNUIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDekM7SUFDTCxDQUFDOzs7O0lBRU0sV0FBVyxLQUFLLENBQUM7Ozs7O0lBRWhCLGtCQUFrQixLQUFLLENBQUM7OztZQTNCbkMsU0FBUyxTQUFDOztnQkFFUCxRQUFRLEVBQUUsWUFBWTtnQkFDdEIsU0FBUyxFQUFFO29CQUNQLGdCQUFnQjtpQkFDbkI7YUFDSjs7OztZQVhRLGNBQWM7OztzQkFlbEIsS0FBSzs7OztJQUFOLDRCQUErQjs7Ozs7SUFFL0Isd0JBQW9COzs7OztJQUNwQix5Q0FBcUM7Ozs7O0lBRXpCLG9DQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRXZlbnRFbWl0dGVyLFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgU2ltcGxlQ2hhbmdlLFxuICBBZnRlckNvbnRlbnRJbml0LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIFF1ZXJ5TGlzdCxcbiAgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgWWFNYXBzQVBJV3JhcHBlciB9IGZyb20gJy4uL3lhLW1hcHMtYXBpLXdyYXBwZXInO1xuaW1wb3J0ICogYXMgbWFwVHlwZXMgZnJvbSAnLi4veWEtbWFwcy10eXBlcyc7XG5pbXBvcnQgeyBDbGFzdGVyTWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL21hbmFnZXJzL2NsYXN0ZXItbWFuYWdlcic7XG5pbXBvcnQgeyBDbGFzdGVyLCBNYXJrZXJDbGFzdGVyIH0gZnJvbSAnLi4veWEtbWFwcy10eXBlcyc7XG5cbmxldCBjbGFzdGVySWQgPSAwO1xuXG5ARGlyZWN0aXZlKHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICd5YS1jbGFzdGVyJyxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgWWFNYXBzQVBJV3JhcHBlclxuICAgIF1cbn0pXG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtY2xhc3Mtc3VmZml4XG5leHBvcnQgY2xhc3MgWWFDbGFzdGVyIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIEBJbnB1dCgpIHB1YmxpYyBtYXJrZXJzOiBhbnlbXTtcblxuICAgIHByaXZhdGUgX2lkOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfbWFya2VyQWRkZWRUb01hbmdlciA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfY2xhc3Rlck1hbmFnZXI6IENsYXN0ZXJNYW5hZ2VyKSB7XG4gICAgICAgIHRoaXMuX2lkID0gKGNsYXN0ZXJJZCsrKS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7IFtrZXk6IHN0cmluZ106IFNpbXBsZUNoYW5nZSB9KSB7XG4gICAgICAgIGlmICghdGhpcy5fbWFya2VyQWRkZWRUb01hbmdlcikge1xuICAgICAgICAgICAgdGhpcy5fY2xhc3Rlck1hbmFnZXIuYWRkQ2xhc3Rlcih0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uRGVzdHJveSgpIHsgfVxuXG4gICAgcHJpdmF0ZSBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7IH1cbn1cbiJdfQ==