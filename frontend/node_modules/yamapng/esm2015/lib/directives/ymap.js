/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { YaMapsAPIWrapper } from '../ya-maps-api-wrapper';
import { MarkerManager } from '../services/managers/marker-manager';
import { ClasterManager } from '../services/managers/claster-manager';
import { ObjectManagerManager } from '../services/managers/objectManager-manager';
import * as mapTypes from '../ya-maps-types';
// tslint:disable-next-line:component-class-suffix
export class YaMap {
    /**
     * @param {?} _elem
     * @param {?} _mapsWrapper
     */
    constructor(_elem, _mapsWrapper) {
        this._elem = _elem;
        this._mapsWrapper = _mapsWrapper;
        this.longitude = 0;
        this.latitude = 0;
        this.zoom = 8;
        this.mapType = 'yandex#map';
        this.controls = null;
        // tslint:disable-next-line:max-line-length
        this.mapClick = new EventEmitter();
        this.actionTick = new EventEmitter();
        this.mapInit = false;
        this._observableSubscriptions = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        console.log('map iit');
        /** @type {?} */
        const container = this._elem.nativeElement.querySelector('.map-container-inner');
        this._initMapInstance(container);
        this.mapInit = true;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.mapInit) {
            this.updatePosition(changes);
            this.panTo(changes);
        }
    }
    /**
     * @private
     * @param {?} el
     * @return {?}
     */
    _initMapInstance(el) {
        if (this.controls != null) {
            this._mapsWrapper.createMap(el, {
                center: [this.latitude, this.longitude], zoom: this.zoom, type: this.mapType,
                controls: this.controls
            });
        }
        else {
            this._mapsWrapper.createMap(el, {
                center: [this.latitude, this.longitude], zoom: this.zoom, type: this.mapType
            });
        }
        this._handleMapMouseEvents();
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    updatePosition(changes) {
        if (changes['latitude'] == null && changes['longitude'] == null) {
            return;
        }
        this._mapsWrapper.setCenter(this.latitude, this.longitude);
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    panTo(changes) {
        if (changes['panToObjects'] == null) {
            return;
        }
        this._mapsWrapper.panTo(this.panToObjects.points, this.panToObjects.params);
    }
    /**
     * @private
     * @return {?}
     */
    _handleMapMouseEvents() {
        /**
         * @record
         */
        function Emitter() { }
        if (false) {
            /**
             * @param {?} value
             * @return {?}
             */
            Emitter.prototype.emit = function (value) { };
        }
        /**
         * @record
         */
        function Event() { }
        if (false) {
            /** @type {?} */
            Event.prototype.name;
            /** @type {?} */
            Event.prototype.emitter;
        }
        /** @type {?} */
        const clickEvents = [
            { name: 'click', emitter: this.mapClick }
        ];
        /** @type {?} */
        const events = [
            { name: 'actiontick', emitter: this.actionTick }
        ];
        clickEvents.forEach((e) => {
            /** @type {?} */
            const s = this._mapsWrapper.subscribeToMapEvent(e.name).subscribe((event) => {
                /** @type {?} */
                const coords = event.get('coords');
                /** @type {?} */
                const value = (/** @type {?} */ ({ lat: coords[0], lng: coords[1] }));
                e.emitter.emit(value);
            });
            this._observableSubscriptions.push(s);
        });
        events.forEach((e) => {
            /** @type {?} */
            const s = this._mapsWrapper.subscribeToMapEvent(e.name).subscribe((event) => {
                this._mapsWrapper.getCenter().then((coords) => {
                    this.latitude = coords[0];
                    this.longitude = coords[1];
                    /** @type {?} */
                    const value = (/** @type {?} */ ({ lat: coords[0], lng: coords[1] }));
                    e.emitter.emit(value);
                });
            });
            this._observableSubscriptions.push(s);
        });
    }
}
YaMap.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'ya-map',
                providers: [
                    YaMapsAPIWrapper,
                    MarkerManager,
                    ClasterManager,
                    ObjectManagerManager
                ],
                template: `
    <div class="map-container-inner" id="map" >
      <ng-content></ng-content>
    </div>
  `
            }] }
];
/** @nocollapse */
YaMap.ctorParameters = () => [
    { type: ElementRef },
    { type: YaMapsAPIWrapper }
];
YaMap.propDecorators = {
    longitude: [{ type: Input }],
    latitude: [{ type: Input }],
    zoom: [{ type: Input }],
    minZoom: [{ type: Input }],
    maxZoom: [{ type: Input }],
    mapType: [{ type: Input }],
    controls: [{ type: Input }],
    panToObjects: [{ type: Input }],
    mapClick: [{ type: Output }],
    actionTick: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    YaMap.prototype.longitude;
    /** @type {?} */
    YaMap.prototype.latitude;
    /** @type {?} */
    YaMap.prototype.zoom;
    /** @type {?} */
    YaMap.prototype.minZoom;
    /** @type {?} */
    YaMap.prototype.maxZoom;
    /** @type {?} */
    YaMap.prototype.mapType;
    /** @type {?} */
    YaMap.prototype.controls;
    /** @type {?} */
    YaMap.prototype.panToObjects;
    /** @type {?} */
    YaMap.prototype.mapClick;
    /** @type {?} */
    YaMap.prototype.actionTick;
    /** @type {?} */
    YaMap.prototype.mapInit;
    /**
     * @type {?}
     * @private
     */
    YaMap.prototype._observableSubscriptions;
    /**
     * @type {?}
     * @private
     */
    YaMap.prototype._elem;
    /**
     * @type {?}
     * @private
     */
    YaMap.prototype._mapsWrapper;
}
//# sourceMappingURL=data:application/json;base64,