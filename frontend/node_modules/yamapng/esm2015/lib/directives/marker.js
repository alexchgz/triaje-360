/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { YaMapsAPIWrapper } from '../ya-maps-api-wrapper';
import { MarkerManager } from '../services/managers/marker-manager';
/** @type {?} */
let markerId = 0;
// tslint:disable-next-line:directive-class-suffix
export class YaMarker {
    /**
     * @param {?} _markerManager
     */
    constructor(_markerManager) {
        this._markerManager = _markerManager;
        this.draggable = false;
        this.preset = 'islands#blueIcon';
        this.markerClick = new EventEmitter();
        // tslint:disable-next-line:max-line-length
        this.dragEnd = new EventEmitter();
        this._markerAddedToManger = false;
        this._observableSubscriptions = [];
        this._id = (markerId++).toString();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this._markerAddedToManger) {
            this._markerManager.addMarker(this);
            this._markerAddedToManger = true;
            this._addEventListeners();
            return;
        }
        if (changes['showInfo']) {
            this._markerManager.showBalloon(this);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._markerManager.deleteMarker(this);
        this._observableSubscriptions.forEach((s) => s.unsubscribe());
    }
    /**
     * @private
     * @return {?}
     */
    _addEventListeners() {
        // click event
        /** @type {?} */
        const cs = this._markerManager.createEventObservable('click', this).subscribe(() => {
            this._markerManager.showBalloon(this);
            this.markerClick.emit(null);
        });
        this._observableSubscriptions.push(cs);
        // dragend event
        // tslint:disable-next-line:max-line-length
        /** @type {?} */
        const ds = this._markerManager.createEventObservable('dragend', this).subscribe((e) => {
            /** @type {?} */
            const thisPlacemark = e.get('target');
            /** @type {?} */
            const coords = thisPlacemark.geometry.getCoordinates();
            this._markerManager.getNativeMarker(this).then((m) => {
                // tslint:disable-next-line:max-line-length
                this.dragEnd.emit((/** @type {?} */ ({ lat: coords[0], lng: coords[1], nativeMarker: m })));
            });
        });
        this._observableSubscriptions.push(ds);
    }
}
YaMarker.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'ya-marker',
                providers: [
                    YaMapsAPIWrapper
                ]
            },] }
];
/** @nocollapse */
YaMarker.ctorParameters = () => [
    { type: MarkerManager }
];
YaMarker.propDecorators = {
    latitude: [{ type: Input }],
    longitude: [{ type: Input }],
    balloonLayout: [{ type: Input }],
    balloonContentHeader: [{ type: Input }],
    balloonContentBody: [{ type: Input }],
    balloonContentFooter: [{ type: Input }],
    draggable: [{ type: Input }],
    preset: [{ type: Input }],
    iconContent: [{ type: Input }],
    showInfo: [{ type: Input }],
    iconLayout: [{ type: Input }],
    iconImageHref: [{ type: Input }],
    iconImageSize: [{ type: Input }],
    iconImageOffset: [{ type: Input }],
    markerClick: [{ type: Output }],
    dragEnd: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    YaMarker.prototype.latitude;
    /** @type {?} */
    YaMarker.prototype.longitude;
    /** @type {?} */
    YaMarker.prototype.balloonLayout;
    /** @type {?} */
    YaMarker.prototype.balloonContentHeader;
    /** @type {?} */
    YaMarker.prototype.balloonContentBody;
    /** @type {?} */
    YaMarker.prototype.balloonContentFooter;
    /** @type {?} */
    YaMarker.prototype.draggable;
    /** @type {?} */
    YaMarker.prototype.preset;
    /** @type {?} */
    YaMarker.prototype.iconContent;
    /** @type {?} */
    YaMarker.prototype.showInfo;
    /** @type {?} */
    YaMarker.prototype.iconLayout;
    /** @type {?} */
    YaMarker.prototype.iconImageHref;
    /** @type {?} */
    YaMarker.prototype.iconImageSize;
    /** @type {?} */
    YaMarker.prototype.iconImageOffset;
    /** @type {?} */
    YaMarker.prototype.markerClick;
    /** @type {?} */
    YaMarker.prototype.dragEnd;
    /**
     * @type {?}
     * @private
     */
    YaMarker.prototype._markerAddedToManger;
    /**
     * @type {?}
     * @private
     */
    YaMarker.prototype._id;
    /**
     * @type {?}
     * @private
     */
    YaMarker.prototype._observableSubscriptions;
    /**
     * @type {?}
     * @private
     */
    YaMarker.prototype._markerManager;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8veWFtYXBuZy8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL21hcmtlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQXNDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0csT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFMUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHFDQUFxQyxDQUFDOztJQUloRSxRQUFRLEdBQUcsQ0FBQztBQVVoQixrREFBa0Q7QUFDbEQsTUFBTSxPQUFPLFFBQVE7Ozs7SUEyQm5CLFlBQW9CLGNBQTZCO1FBQTdCLG1CQUFjLEdBQWQsY0FBYyxDQUFlO1FBcEJqQyxjQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLFdBQU0sR0FBRyxrQkFBa0IsQ0FBQztRQVczQixnQkFBVyxHQUF1QixJQUFJLFlBQVksRUFBUSxDQUFDOztRQUUzRCxZQUFPLEdBQXlDLElBQUksWUFBWSxFQUEwQixDQUFDO1FBRXBHLHlCQUFvQixHQUFHLEtBQUssQ0FBQztRQUU3Qiw2QkFBd0IsR0FBbUIsRUFBRSxDQUFDO1FBR3BELElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3JDLENBQUM7Ozs7O0lBRU0sV0FBVyxDQUFDLE9BQXdDO1FBQ3pELElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUU7WUFFOUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDcEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQztZQUNqQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztZQUMxQixPQUFPO1NBQ1I7UUFDRCxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN2QixJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN2QztJQUNILENBQUM7Ozs7SUFFTSxXQUFXO1FBQ2hCLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7Ozs7O0lBRU8sa0JBQWtCOzs7Y0FFbEIsRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMscUJBQXFCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDakYsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDO1FBQ0YsSUFBSSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQzs7OztjQUdqQyxFQUFFLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBc0IsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQXNCLEVBQUUsRUFBRTs7a0JBRXhILGFBQWEsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQzs7a0JBQy9CLE1BQU0sR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRTtZQUN0RCxJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFTLEVBQUUsRUFBRTtnQkFDM0QsMkNBQTJDO2dCQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBQSxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxZQUFZLEVBQUUsQ0FBQyxFQUFFLEVBQTBCLENBQUMsQ0FBQztZQUNuRyxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQztRQUNGLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDekMsQ0FBQzs7O1lBN0VGLFNBQVMsU0FBQzs7Z0JBRVQsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLFNBQVMsRUFBRTtvQkFDVCxnQkFBZ0I7aUJBQ2pCO2FBQ0Y7Ozs7WUFaUSxhQUFhOzs7dUJBZ0JuQixLQUFLO3dCQUNMLEtBQUs7NEJBQ0wsS0FBSzttQ0FDTCxLQUFLO2lDQUNMLEtBQUs7bUNBQ0wsS0FBSzt3QkFDTCxLQUFLO3FCQUNMLEtBQUs7MEJBQ0wsS0FBSzt1QkFDTCxLQUFLO3lCQUVMLEtBQUs7NEJBQ0wsS0FBSzs0QkFFTCxLQUFLOzhCQUVMLEtBQUs7MEJBRUwsTUFBTTtzQkFFTixNQUFNOzs7O0lBcEJQLDRCQUFpQzs7SUFDakMsNkJBQWtDOztJQUNsQyxpQ0FBbUM7O0lBQ25DLHdDQUE2Qzs7SUFDN0Msc0NBQTJDOztJQUMzQyx3Q0FBNkM7O0lBQzdDLDZCQUFrQzs7SUFDbEMsMEJBQTRDOztJQUM1QywrQkFBb0M7O0lBQ3BDLDRCQUFrQzs7SUFFbEMsOEJBQWdDOztJQUNoQyxpQ0FBbUM7O0lBRW5DLGlDQUFtQzs7SUFFbkMsbUNBQXFDOztJQUVyQywrQkFBNEU7O0lBRTVFLDJCQUE0Rzs7Ozs7SUFFNUcsd0NBQXFDOzs7OztJQUNyQyx1QkFBb0I7Ozs7O0lBQ3BCLDRDQUFzRDs7Ozs7SUFFMUMsa0NBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBTaW1wbGVDaGFuZ2UsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgWWFNYXBzQVBJV3JhcHBlciB9IGZyb20gJy4uL3lhLW1hcHMtYXBpLXdyYXBwZXInO1xuaW1wb3J0ICogYXMgbWFwVHlwZXMgZnJvbSAnLi4veWEtbWFwcy10eXBlcyc7XG5pbXBvcnQgeyBNYXJrZXJNYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvbWFuYWdlcnMvbWFya2VyLW1hbmFnZXInO1xuaW1wb3J0IHsgTWFya2VyIH0gZnJvbSAnLi4veWEtbWFwcy10eXBlcyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxubGV0IG1hcmtlcklkID0gMDtcblxuQERpcmVjdGl2ZSh7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICd5YS1tYXJrZXInLFxuICBwcm92aWRlcnM6IFtcbiAgICBZYU1hcHNBUElXcmFwcGVyXG4gIF1cbn0pXG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkaXJlY3RpdmUtY2xhc3Mtc3VmZml4XG5leHBvcnQgY2xhc3MgWWFNYXJrZXIgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIHB1YmxpYyBsYXRpdHVkZTogbnVtYmVyO1xuICBASW5wdXQoKSBwdWJsaWMgbG9uZ2l0dWRlOiBudW1iZXI7XG4gIEBJbnB1dCgpIHB1YmxpYyBiYWxsb29uTGF5b3V0OiBhbnk7XG4gIEBJbnB1dCgpIHB1YmxpYyBiYWxsb29uQ29udGVudEhlYWRlcjogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgYmFsbG9vbkNvbnRlbnRCb2R5OiBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyBiYWxsb29uQ29udGVudEZvb3Rlcjogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgZHJhZ2dhYmxlID0gZmFsc2U7XG4gIEBJbnB1dCgpIHB1YmxpYyBwcmVzZXQgPSAnaXNsYW5kcyNibHVlSWNvbic7XG4gIEBJbnB1dCgpIHB1YmxpYyBpY29uQ29udGVudDogc3RyaW5nO1xuICBASW5wdXQoKSBwdWJsaWMgc2hvd0luZm86IGJvb2xlYW47XG4gIC8vIGRlZmF1bHQjaW1hZ2VcbiAgQElucHV0KCkgcHVibGljIGljb25MYXlvdXQ6IGFueTtcbiAgQElucHV0KCkgcHVibGljIGljb25JbWFnZUhyZWY6IGFueTtcbiAgLy8gWzMwLCA0Ml1cbiAgQElucHV0KCkgcHVibGljIGljb25JbWFnZVNpemU6IGFueTtcbiAgLy8gWy01LCAtMzhdXG4gIEBJbnB1dCgpIHB1YmxpYyBpY29uSW1hZ2VPZmZzZXQ6IGFueTtcblxuICBAT3V0cHV0KCkgcHVibGljIG1hcmtlckNsaWNrOiBFdmVudEVtaXR0ZXI8dm9pZD4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcbiAgQE91dHB1dCgpIHB1YmxpYyBkcmFnRW5kOiBFdmVudEVtaXR0ZXI8bWFwVHlwZXMuTWFwTW91c2VFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPG1hcFR5cGVzLk1hcE1vdXNlRXZlbnQ+KCk7XG5cbiAgcHJpdmF0ZSBfbWFya2VyQWRkZWRUb01hbmdlciA9IGZhbHNlO1xuICBwcml2YXRlIF9pZDogc3RyaW5nO1xuICBwcml2YXRlIF9vYnNlcnZhYmxlU3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBbXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9tYXJrZXJNYW5hZ2VyOiBNYXJrZXJNYW5hZ2VyKSB7XG4gICAgdGhpcy5faWQgPSAobWFya2VySWQrKykudG9TdHJpbmcoKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7IFtrZXk6IHN0cmluZ106IFNpbXBsZUNoYW5nZSB9KSB7XG4gICAgaWYgKCF0aGlzLl9tYXJrZXJBZGRlZFRvTWFuZ2VyKSB7XG5cbiAgICAgIHRoaXMuX21hcmtlck1hbmFnZXIuYWRkTWFya2VyKHRoaXMpO1xuICAgICAgdGhpcy5fbWFya2VyQWRkZWRUb01hbmdlciA9IHRydWU7XG4gICAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2hhbmdlc1snc2hvd0luZm8nXSkge1xuICAgICAgdGhpcy5fbWFya2VyTWFuYWdlci5zaG93QmFsbG9vbih0aGlzKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fbWFya2VyTWFuYWdlci5kZWxldGVNYXJrZXIodGhpcyk7XG4gICAgdGhpcy5fb2JzZXJ2YWJsZVN1YnNjcmlwdGlvbnMuZm9yRWFjaCgocykgPT4gcy51bnN1YnNjcmliZSgpKTtcbiAgfVxuXG4gIHByaXZhdGUgX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIC8vIGNsaWNrIGV2ZW50XG4gICAgY29uc3QgY3MgPSB0aGlzLl9tYXJrZXJNYW5hZ2VyLmNyZWF0ZUV2ZW50T2JzZXJ2YWJsZSgnY2xpY2snLCB0aGlzKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5fbWFya2VyTWFuYWdlci5zaG93QmFsbG9vbih0aGlzKTtcbiAgICAgIHRoaXMubWFya2VyQ2xpY2suZW1pdChudWxsKTtcbiAgICB9KTtcbiAgICB0aGlzLl9vYnNlcnZhYmxlU3Vic2NyaXB0aW9ucy5wdXNoKGNzKTtcbiAgICAvLyBkcmFnZW5kIGV2ZW50XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxuICAgIGNvbnN0IGRzID0gdGhpcy5fbWFya2VyTWFuYWdlci5jcmVhdGVFdmVudE9ic2VydmFibGU8bWFwVHlwZXMuTW91c2VFdmVudD4oJ2RyYWdlbmQnLCB0aGlzKS5zdWJzY3JpYmUoKGU6IG1hcFR5cGVzLk1vdXNlRXZlbnQpID0+IHtcblxuICAgICAgY29uc3QgdGhpc1BsYWNlbWFyayA9IGUuZ2V0KCd0YXJnZXQnKTtcbiAgICAgIGNvbnN0IGNvb3JkcyA9IHRoaXNQbGFjZW1hcmsuZ2VvbWV0cnkuZ2V0Q29vcmRpbmF0ZXMoKTtcbiAgICAgIHRoaXMuX21hcmtlck1hbmFnZXIuZ2V0TmF0aXZlTWFya2VyKHRoaXMpLnRoZW4oKG06IE1hcmtlcikgPT4ge1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXG4gICAgICAgIHRoaXMuZHJhZ0VuZC5lbWl0KHsgbGF0OiBjb29yZHNbMF0sIGxuZzogY29vcmRzWzFdLCBuYXRpdmVNYXJrZXI6IG0gfSBhcyBtYXBUeXBlcy5NYXBNb3VzZUV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHRoaXMuX29ic2VydmFibGVTdWJzY3JpcHRpb25zLnB1c2goZHMpO1xuICB9XG59XG4iXX0=