/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { YaMapsAPILoader } from './services/ya-maps-loader';
import { DocumentRef } from './utils/browser-globals';
export class YaMapsAPIWrapper {
    /**
     * @param {?} _loader
     * @param {?} _zone
     * @param {?} d
     */
    constructor(_loader, _zone, d) {
        this._loader = _loader;
        this._zone = _zone;
        this._documentRef = d;
        this._map = new Promise((resolve) => {
            this._mapResolver = resolve;
        });
    }
    /**
     * @param {?} el
     * @param {?} mapOptions
     * @return {?}
     */
    createMap(el, mapOptions) {
        /** @type {?} */
        const res = this._loader.load().then(() => {
            /** @type {?} */
            const create = () => setTimeout(() => {
                if (ymaps.Map) {
                    /** @type {?} */
                    const map = new ymaps.Map(el, mapOptions);
                    this._mapResolver((/** @type {?} */ (map)));
                }
                else {
                    create();
                }
            }, 100);
            create();
        }).catch((e) => console.log(e));
        return res;
    }
    /**
     * @param {?} latitude
     * @param {?} longitude
     * @return {?}
     */
    setCenter(latitude, longitude) {
        this._map.then((map) => {
            map.setCenter([latitude, longitude]);
        });
    }
    /**
     * @return {?}
     */
    getCenter() {
        return this._map.then((map) => {
            return map.getCenter();
        });
    }
    /**
     * @param {?} points
     * @param {?} options
     * @return {?}
     */
    panTo(points, options) {
        this._map.then((map) => {
            map.panTo(points, options);
        });
    }
    /**
     * @template E
     * @param {?} eventName
     * @return {?}
     */
    subscribeToMapEvent(eventName) {
        return Observable.create((observer) => {
            this._map.then((m) => {
                m.events.add(eventName, (arg) => { this._zone.run(() => observer.next(arg)); });
            });
        });
    }
    /**
     * @param {?} marker
     * @return {?}
     */
    createMarker(marker) {
        return this._map.then((map) => {
            /** @type {?} */
            const m = new ymaps.Placemark([marker.latitude, marker.longitude], {
                balloonContentHeader: marker.balloonContentHeader,
                balloonContentBody: marker.balloonContentBody,
                balloonContentFooter: marker.balloonContentFooter,
                iconContent: marker.iconContent
            }, {
                draggable: marker.draggable,
                preset: marker.preset,
                iconLayout: marker.iconLayout,
                iconImageHref: marker.iconImageHref,
                iconImageSize: marker.iconImageSize,
                iconImageOffset: marker.iconImageOffset
            });
            map.geoObjects.add(m);
            return m;
        });
    }
    /**
     * @param {?} overlay
     * @return {?}
     */
    removeGeo(overlay) {
        this._map.then((map) => {
            map.geoObjects.remove(overlay);
        });
    }
    /**
     * @param {?} claster
     * @return {?}
     */
    createClaster(claster) {
        return this._map.then((map) => {
            if (claster.markers.length === 0) {
                return;
            }
            /** @type {?} */
            let myGeoObjects;
            myGeoObjects = new Array();
            claster.markers.forEach((x) => {
                /** @type {?} */
                const point = new ymaps.GeoObject({
                    geometry: { type: x.type, coordinates: [x.lat, x.lng] }
                });
                myGeoObjects.push(point);
            });
            /** @type {?} */
            const clusterer = new ymaps.Clusterer({});
            clusterer.add(myGeoObjects);
            map.geoObjects.add(clusterer);
            return clusterer;
        });
    }
    /**
     * @param {?} objectManager
     * @return {?}
     */
    createObjectManager(objectManager) {
        return this._map.then((map) => {
            if (objectManager.datasource.length === 0) {
                return;
            }
            /** @type {?} */
            const nativeObjectManager = new ymaps.ObjectManager({
                clusterize: objectManager.clusterize,
                gridSize: objectManager.gridSize
            });
            nativeObjectManager.add(objectManager.datasource);
            nativeObjectManager.objects.options.set('preset', objectManager.objectPreset);
            nativeObjectManager.clusters.options.set('preset', objectManager.clasterPreset);
            map.geoObjects.add(nativeObjectManager);
            return nativeObjectManager;
        });
    }
    /**
     * @param {?} objectManager
     * @param {?} id
     * @return {?}
     */
    navigateToGeoObject(objectManager, id) {
        /** @type {?} */
        const obj = objectManager.objects.getById(id);
        if (obj) {
            this.setCenter(obj.geometry.coordinates[0], obj.geometry.coordinates[1]);
            objectManager.objects.balloon.open(id);
        }
    }
    /**
     * @return {?}
     */
    checkYaSciptLoaded() {
        return this._documentRef.getNativeDocument().getElementById('YaScript');
    }
    /**
     * @param {?} objectManager
     * @param {?} filter
     * @return {?}
     */
    objectManagerSetFilter(objectManager, filter) {
        objectManager.setFilter(filter);
    }
}
YaMapsAPIWrapper.decorators = [
    { type: Injectable }
];
/** @nocollapse */
YaMapsAPIWrapper.ctorParameters = () => [
    { type: YaMapsAPILoader },
    { type: NgZone },
    { type: DocumentRef }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    YaMapsAPIWrapper.prototype._map;
    /**
     * @type {?}
     * @private
     */
    YaMapsAPIWrapper.prototype._mapResolver;
    /**
     * @type {?}
     * @private
     */
    YaMapsAPIWrapper.prototype._documentRef;
    /**
     * @type {?}
     * @private
     */
    YaMapsAPIWrapper.prototype._loader;
    /**
     * @type {?}
     * @private
     */
    YaMapsAPIWrapper.prototype._zone;
}
//# sourceMappingURL=data:application/json;base64,