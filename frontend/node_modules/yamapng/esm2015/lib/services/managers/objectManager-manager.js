/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
import { YaMapsAPIWrapper } from '../../ya-maps-api-wrapper';
export class ObjectManagerManager {
    /**
     * @param {?} _mapsWrapper
     * @param {?} _zone
     */
    constructor(_mapsWrapper, _zone) {
        this._mapsWrapper = _mapsWrapper;
        this._zone = _zone;
        this._managers = new Map();
    }
    /**
     * @param {?} manager
     * @return {?}
     */
    add(manager) {
        /** @type {?} */
        const managerPromise = this._mapsWrapper.createObjectManager(manager);
        this._managers.set(manager, managerPromise);
    }
    /**
     * @param {?} manager
     * @param {?} id
     * @return {?}
     */
    navigateToGeoObject(manager, id) {
        this.getNativeManager(manager).then((p) => {
            this._mapsWrapper.navigateToGeoObject(p, id);
        });
    }
    /**
     * @param {?} manager
     * @return {?}
     */
    getNativeManager(manager) {
        return this._managers.get(manager);
    }
    /**
     * @param {?} manager
     * @param {?} filter
     * @return {?}
     */
    setFilter(manager, filter) {
        this.getNativeManager(manager).then((p) => {
            this._mapsWrapper.objectManagerSetFilter(p, filter);
        });
    }
}
ObjectManagerManager.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ObjectManagerManager.ctorParameters = () => [
    { type: YaMapsAPIWrapper },
    { type: NgZone }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ObjectManagerManager.prototype._managers;
    /**
     * @type {?}
     * @private
     */
    ObjectManagerManager.prototype._mapsWrapper;
    /**
     * @type {?}
     * @private
     */
    ObjectManagerManager.prototype._zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0TWFuYWdlci1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8veWFtYXBuZy8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9tYW5hZ2Vycy9vYmplY3RNYW5hZ2VyLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBS25ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBSTdELE1BQU0sT0FBTyxvQkFBb0I7Ozs7O0lBSS9CLFlBQW9CLFlBQThCLEVBQVUsS0FBYTtRQUFyRCxpQkFBWSxHQUFaLFlBQVksQ0FBa0I7UUFBVSxVQUFLLEdBQUwsS0FBSyxDQUFRO1FBSGpFLGNBQVMsR0FDakIsSUFBSSxHQUFHLEVBQTJDLENBQUM7SUFFMEIsQ0FBQzs7Ozs7SUFFdkUsR0FBRyxDQUFDLE9BQXdCOztjQUMzQixjQUFjLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUM7UUFDckUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Ozs7OztJQUVNLG1CQUFtQixDQUFDLE9BQXdCLEVBQUUsRUFBVTtRQUM3RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUU7WUFDN0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDL0MsQ0FBQyxDQUFDLENBQUM7SUFFTCxDQUFDOzs7OztJQUVNLGdCQUFnQixDQUFDLE9BQXdCO1FBQzlDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckMsQ0FBQzs7Ozs7O0lBRU0sU0FBUyxDQUFDLE9BQXdCLEVBQUUsTUFBVztRQUNwRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUU7WUFDN0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzs7WUEzQkYsVUFBVTs7OztZQUhGLGdCQUFnQjtZQUxKLE1BQU07Ozs7Ozs7SUFVekIseUNBQ21EOzs7OztJQUV2Qyw0Q0FBc0M7Ozs7O0lBQUUscUNBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBPYnNlcnZlciB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBZYU9iamVjdE1hbmFnZXIgfSBmcm9tICcuLy4uLy4uL2RpcmVjdGl2ZXMvb2JqZWN0TWFuYWdlcic7XG5pbXBvcnQgeyBZYU1hcHNBUElXcmFwcGVyIH0gZnJvbSAnLi4vLi4veWEtbWFwcy1hcGktd3JhcHBlcic7XG5pbXBvcnQgeyBPYmplY3RNYW5hZ2VyIH0gZnJvbSAnLi4vLi4veWEtbWFwcy10eXBlcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBPYmplY3RNYW5hZ2VyTWFuYWdlciB7XG4gIHByaXZhdGUgX21hbmFnZXJzOiBNYXA8WWFPYmplY3RNYW5hZ2VyLCBQcm9taXNlPE9iamVjdE1hbmFnZXI+PiA9XG4gIG5ldyBNYXA8WWFPYmplY3RNYW5hZ2VyLCBQcm9taXNlPE9iamVjdE1hbmFnZXI+PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX21hcHNXcmFwcGVyOiBZYU1hcHNBUElXcmFwcGVyLCBwcml2YXRlIF96b25lOiBOZ1pvbmUpIHsgfVxuXG4gIHB1YmxpYyBhZGQobWFuYWdlcjogWWFPYmplY3RNYW5hZ2VyKSB7XG4gICAgY29uc3QgbWFuYWdlclByb21pc2UgPSB0aGlzLl9tYXBzV3JhcHBlci5jcmVhdGVPYmplY3RNYW5hZ2VyKG1hbmFnZXIpO1xuICAgIHRoaXMuX21hbmFnZXJzLnNldChtYW5hZ2VyLCBtYW5hZ2VyUHJvbWlzZSk7XG4gIH1cblxuICBwdWJsaWMgbmF2aWdhdGVUb0dlb09iamVjdChtYW5hZ2VyOiBZYU9iamVjdE1hbmFnZXIsIGlkOiBudW1iZXIpIHtcbiAgICB0aGlzLmdldE5hdGl2ZU1hbmFnZXIobWFuYWdlcikudGhlbigocDogYW55KSA9PiB7XG4gICAgICB0aGlzLl9tYXBzV3JhcHBlci5uYXZpZ2F0ZVRvR2VvT2JqZWN0KHAsIGlkKTtcbiAgICB9KTtcblxuICB9XG5cbiAgcHVibGljIGdldE5hdGl2ZU1hbmFnZXIobWFuYWdlcjogWWFPYmplY3RNYW5hZ2VyKTogUHJvbWlzZTxPYmplY3RNYW5hZ2VyPiB7XG4gICAgcmV0dXJuIHRoaXMuX21hbmFnZXJzLmdldChtYW5hZ2VyKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRGaWx0ZXIobWFuYWdlcjogWWFPYmplY3RNYW5hZ2VyLCBmaWx0ZXI6IGFueSkge1xuICAgIHRoaXMuZ2V0TmF0aXZlTWFuYWdlcihtYW5hZ2VyKS50aGVuKChwOiBhbnkpID0+IHtcbiAgICAgIHRoaXMuX21hcHNXcmFwcGVyLm9iamVjdE1hbmFnZXJTZXRGaWx0ZXIocCwgZmlsdGVyKTtcbiAgICB9KTtcbiAgfVxufVxuIl19