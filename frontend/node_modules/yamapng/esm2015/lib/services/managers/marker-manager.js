/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { YaMapsAPIWrapper } from '../../ya-maps-api-wrapper';
export class MarkerManager {
    /**
     * @param {?} _mapsWrapper
     * @param {?} _zone
     */
    constructor(_mapsWrapper, _zone) {
        this._mapsWrapper = _mapsWrapper;
        this._zone = _zone;
        this._markers = new Map();
    }
    /**
     * @param {?} marker
     * @return {?}
     */
    deleteMarker(marker) {
        /** @type {?} */
        const m = this._markers.get(marker);
        if (m == null) {
            return Promise.resolve();
        }
        // tslint:disable-next-line:no-shadowed-variable
        return m.then((m) => {
            return this._zone.run(() => {
                // tslint:disable-next-line:no-shadowed-variable
                this.getNativeMarker(marker).then((m) => {
                    this._mapsWrapper.removeGeo(m);
                    this._markers.delete(marker);
                });
            });
        });
    }
    /**
     * @param {?} marker
     * @return {?}
     */
    addMarker(marker) {
        /** @type {?} */
        const markerPromise = this._mapsWrapper.createMarker(marker);
        this._markers.set(marker, markerPromise);
    }
    /**
     * @param {?} marker
     * @return {?}
     */
    showBalloon(marker) {
        this.getNativeMarker(marker).then((m) => {
            m.balloon.open();
        });
    }
    /**
     * @param {?} marker
     * @return {?}
     */
    getNativeMarker(marker) {
        return this._markers.get(marker);
    }
    /**
     * @template T
     * @param {?} eventName
     * @param {?} marker
     * @return {?}
     */
    createEventObservable(eventName, marker) {
        return Observable.create((observer) => {
            this._markers.get(marker).then((m) => {
                m.events.add(eventName, (e) => this._zone.run(() => observer.next(e)));
            });
        });
    }
}
MarkerManager.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MarkerManager.ctorParameters = () => [
    { type: YaMapsAPIWrapper },
    { type: NgZone }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    MarkerManager.prototype._markers;
    /**
     * @type {?}
     * @private
     */
    MarkerManager.prototype._mapsWrapper;
    /**
     * @type {?}
     * @private
     */
    MarkerManager.prototype._zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2VyLW1hbmFnZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly95YW1hcG5nLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL21hbmFnZXJzL21hcmtlci1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBS2xDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBSTdELE1BQU0sT0FBTyxhQUFhOzs7OztJQUl4QixZQUFvQixZQUE4QixFQUFVLEtBQWE7UUFBckQsaUJBQVksR0FBWixZQUFZLENBQWtCO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUhqRSxhQUFRLEdBQ2hCLElBQUksR0FBRyxFQUE2QixDQUFDO0lBRXdDLENBQUM7Ozs7O0lBRXZFLFlBQVksQ0FBQyxNQUFnQjs7Y0FDNUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUNuQyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7WUFDYixPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUMxQjtRQUNELGdEQUFnRDtRQUNoRCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFTLEVBQUUsRUFBRTtZQUMxQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtnQkFDekIsZ0RBQWdEO2dCQUNoRCxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVMsRUFBRSxFQUFFO29CQUM5QyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQy9CLENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRU0sU0FBUyxDQUFDLE1BQWdCOztjQUN6QixhQUFhLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBQzVELElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsQ0FBQztJQUMzQyxDQUFDOzs7OztJQUVNLFdBQVcsQ0FBQyxNQUFnQjtRQUNqQyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQVMsRUFBRSxFQUFFO1lBQzlDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFFTCxDQUFDOzs7OztJQUVNLGVBQWUsQ0FBQyxNQUFnQjtRQUNyQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLENBQUM7Ozs7Ozs7SUFFTSxxQkFBcUIsQ0FBSSxTQUFpQixFQUFFLE1BQWdCO1FBQ2pFLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQXFCLEVBQUUsRUFBRTtZQUNqRCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFTLEVBQUUsRUFBRTtnQkFDM0MsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1RSxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBOUNGLFVBQVU7Ozs7WUFIRixnQkFBZ0I7WUFOSixNQUFNOzs7Ozs7O0lBV3pCLGlDQUNxQzs7Ozs7SUFFekIscUNBQXNDOzs7OztJQUFFLDhCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgT2JzZXJ2ZXIgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgWWFNYXJrZXIgfSBmcm9tICcuLy4uLy4uL2RpcmVjdGl2ZXMvbWFya2VyJztcblxuaW1wb3J0IHsgWWFNYXBzQVBJV3JhcHBlciB9IGZyb20gJy4uLy4uL3lhLW1hcHMtYXBpLXdyYXBwZXInO1xuaW1wb3J0IHsgTWFya2VyIH0gZnJvbSAnLi4vLi4veWEtbWFwcy10eXBlcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNYXJrZXJNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBfbWFya2VyczogTWFwPFlhTWFya2VyLCBQcm9taXNlPE1hcmtlcj4+ID1cbiAgbmV3IE1hcDxZYU1hcmtlciwgUHJvbWlzZTxNYXJrZXI+PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX21hcHNXcmFwcGVyOiBZYU1hcHNBUElXcmFwcGVyLCBwcml2YXRlIF96b25lOiBOZ1pvbmUpIHsgfVxuXG4gIHB1YmxpYyBkZWxldGVNYXJrZXIobWFya2VyOiBZYU1hcmtlcik6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IG0gPSB0aGlzLl9tYXJrZXJzLmdldChtYXJrZXIpO1xuICAgIGlmIChtID09IG51bGwpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXNoYWRvd2VkLXZhcmlhYmxlXG4gICAgcmV0dXJuIG0udGhlbigobTogTWFya2VyKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5fem9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tc2hhZG93ZWQtdmFyaWFibGVcbiAgICAgICAgdGhpcy5nZXROYXRpdmVNYXJrZXIobWFya2VyKS50aGVuKChtOiBNYXJrZXIpID0+IHtcbiAgICAgICAgICB0aGlzLl9tYXBzV3JhcHBlci5yZW1vdmVHZW8obSk7XG4gICAgICAgICAgdGhpcy5fbWFya2Vycy5kZWxldGUobWFya2VyKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhZGRNYXJrZXIobWFya2VyOiBZYU1hcmtlcikge1xuICAgIGNvbnN0IG1hcmtlclByb21pc2UgPSB0aGlzLl9tYXBzV3JhcHBlci5jcmVhdGVNYXJrZXIobWFya2VyKTtcbiAgICB0aGlzLl9tYXJrZXJzLnNldChtYXJrZXIsIG1hcmtlclByb21pc2UpO1xuICB9XG5cbiAgcHVibGljIHNob3dCYWxsb29uKG1hcmtlcjogWWFNYXJrZXIpIHtcbiAgICB0aGlzLmdldE5hdGl2ZU1hcmtlcihtYXJrZXIpLnRoZW4oKG06IE1hcmtlcikgPT4ge1xuICAgICAgbS5iYWxsb29uLm9wZW4oKTtcbiAgICB9KTtcblxuICB9XG5cbiAgcHVibGljIGdldE5hdGl2ZU1hcmtlcihtYXJrZXI6IFlhTWFya2VyKTogUHJvbWlzZTxNYXJrZXI+IHtcbiAgICByZXR1cm4gdGhpcy5fbWFya2Vycy5nZXQobWFya2VyKTtcbiAgfVxuXG4gIHB1YmxpYyBjcmVhdGVFdmVudE9ic2VydmFibGU8VD4oZXZlbnROYW1lOiBzdHJpbmcsIG1hcmtlcjogWWFNYXJrZXIpOiBPYnNlcnZhYmxlPFQ+IHtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUoKG9ic2VydmVyOiBPYnNlcnZlcjxUPikgPT4ge1xuICAgICAgdGhpcy5fbWFya2Vycy5nZXQobWFya2VyKS50aGVuKChtOiBNYXJrZXIpID0+IHtcbiAgICAgICAgbS5ldmVudHMuYWRkKGV2ZW50TmFtZSwgKGU6IFQpID0+IHRoaXMuX3pvbmUucnVuKCgpID0+IG9ic2VydmVyLm5leHQoZSkpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iXX0=