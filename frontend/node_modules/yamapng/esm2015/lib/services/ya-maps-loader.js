/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { DocumentRef, WindowRef } from './../utils/browser-globals';
/**
 * Token for the config of the YaMapsAPILoaderConfigLiteral. Please provide an object of type {\@link
 * YaMapsAPILoaderConfigLiteral}.
 * @type {?}
 */
export const LAZY_MAPS_API_CONFIG = new InjectionToken('angular-ya-maps MAPS_API_CONFIG');
/**
 * Configuration for the {\@link LazyMapsAPILoader}.
 * @record
 */
export function YaMapsAPILoaderConfigLiteral() { }
if (false) {
    /**
     * API Key.
     * @type {?|undefined}
     */
    YaMapsAPILoaderConfigLiteral.prototype.apiKey;
}
export class YaMapsAPILoader {
    /**
     * @param {?=} config
     * @param {?=} w
     * @param {?=} d
     */
    constructor(config = null, w, d) {
        this.config = config;
        this._windowRef = w;
        this._documentRef = d;
    }
    /**
     * @return {?}
     */
    load() {
        /** @type {?} */
        const script = this._documentRef.getNativeDocument().createElement('script');
        script.type = 'text/javascript';
        script.async = false;
        script.defer = true;
        script.id = 'YaScript';
        /** @type {?} */
        const callbackName = `angular2YAMapsAPILoader`;
        script.src = `https://api-maps.yandex.ru/2.1/?apikey=${this.config.apiKey}&lang=ru_RU`;
        // tslint:disable-next-line:ban-types
        this._scriptLoadingPromise = new Promise((resolve, reject) => {
            script.onload = () => { resolve(); };
            script.onerror = (error) => { reject(); };
        });
        this._documentRef.getNativeDocument().body.appendChild(script);
        return this._scriptLoadingPromise;
    }
}
YaMapsAPILoader.decorators = [
    { type: Injectable }
];
/** @nocollapse */
YaMapsAPILoader.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LAZY_MAPS_API_CONFIG,] }] },
    { type: WindowRef },
    { type: DocumentRef }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    YaMapsAPILoader.prototype._scriptLoadingPromise;
    /**
     * @type {?}
     * @private
     */
    YaMapsAPILoader.prototype.config;
    /**
     * @type {?}
     * @private
     */
    YaMapsAPILoader.prototype._windowRef;
    /**
     * @type {?}
     * @private
     */
    YaMapsAPILoader.prototype._documentRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWEtbWFwcy1sb2FkZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly95YW1hcG5nLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3lhLW1hcHMtbG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7Ozs7OztBQU1uRSxNQUFNLE9BQU8sb0JBQW9CLEdBQUcsSUFBSSxjQUFjLENBQStCLGlDQUFpQyxDQUFDOzs7OztBQUt4SCxrREFLQzs7Ozs7O0lBREMsOENBQWdCOztBQUlsQixNQUFNLE9BQU8sZUFBZTs7Ozs7O0lBTXhCLFlBQXNELFNBQWMsSUFBSSxFQUFFLENBQVksRUFBRSxDQUFjO1FBQ2xHLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFTSxJQUFJOztjQUNELE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUM1RSxNQUFNLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLE1BQU0sQ0FBQyxFQUFFLEdBQUcsVUFBVSxDQUFDOztjQUNqQixZQUFZLEdBQUcseUJBQXlCO1FBQzlDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsMENBQTBDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxhQUFhLENBQUM7UUFDdkYscUNBQXFDO1FBQ3JDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLE9BQU8sQ0FBTyxDQUFDLE9BQWlCLEVBQUUsTUFBZ0IsRUFBRSxFQUFFO1lBQ25GLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLEdBQUcsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckMsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMvRCxPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztJQUN0QyxDQUFDOzs7WUE1QkosVUFBVTs7Ozs0Q0FPTSxRQUFRLFlBQUksTUFBTSxTQUFDLG9CQUFvQjtZQXpCbEMsU0FBUztZQUF0QixXQUFXOzs7Ozs7O0lBb0JoQixnREFBNkM7Ozs7O0lBQzdDLGlDQUE2Qzs7Ozs7SUFDN0MscUNBQThCOzs7OztJQUM5Qix1Q0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9jdW1lbnRSZWYsIFdpbmRvd1JlZiB9IGZyb20gJy4vLi4vdXRpbHMvYnJvd3Nlci1nbG9iYWxzJztcblxuLyoqXG4gKiBUb2tlbiBmb3IgdGhlIGNvbmZpZyBvZiB0aGUgWWFNYXBzQVBJTG9hZGVyQ29uZmlnTGl0ZXJhbC4gUGxlYXNlIHByb3ZpZGUgYW4gb2JqZWN0IG9mIHR5cGUge0BsaW5rXG4gICogWWFNYXBzQVBJTG9hZGVyQ29uZmlnTGl0ZXJhbH0uXG4gICovXG4gZXhwb3J0IGNvbnN0IExBWllfTUFQU19BUElfQ09ORklHID0gbmV3IEluamVjdGlvblRva2VuPFlhTWFwc0FQSUxvYWRlckNvbmZpZ0xpdGVyYWw+KCdhbmd1bGFyLXlhLW1hcHMgTUFQU19BUElfQ09ORklHJyk7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBmb3IgdGhlIHtAbGluayBMYXp5TWFwc0FQSUxvYWRlcn0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgWWFNYXBzQVBJTG9hZGVyQ29uZmlnTGl0ZXJhbCB7XG4gIC8qKlxuICAgKiBBUEkgS2V5LlxuICAgKi9cbiAgYXBpS2V5Pzogc3RyaW5nO1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgWWFNYXBzQVBJTG9hZGVyIHtcbiAgICBwcml2YXRlIF9zY3JpcHRMb2FkaW5nUHJvbWlzZTogUHJvbWlzZTx2b2lkPjtcbiAgICBwcml2YXRlIGNvbmZpZzogWWFNYXBzQVBJTG9hZGVyQ29uZmlnTGl0ZXJhbDtcbiAgICBwcml2YXRlIF93aW5kb3dSZWY6IFdpbmRvd1JlZjtcbiAgICBwcml2YXRlIF9kb2N1bWVudFJlZjogRG9jdW1lbnRSZWY7XG5cbiAgICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KExBWllfTUFQU19BUElfQ09ORklHKSBjb25maWc6IGFueSA9IG51bGwsIHc6IFdpbmRvd1JlZiwgZDogRG9jdW1lbnRSZWYpIHtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMuX3dpbmRvd1JlZiA9IHc7XG4gICAgICAgIHRoaXMuX2RvY3VtZW50UmVmID0gZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgbG9hZCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gdGhpcy5fZG9jdW1lbnRSZWYuZ2V0TmF0aXZlRG9jdW1lbnQoKS5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICAgICAgc2NyaXB0LmFzeW5jID0gZmFsc2U7XG4gICAgICAgIHNjcmlwdC5kZWZlciA9IHRydWU7XG4gICAgICAgIHNjcmlwdC5pZCA9ICdZYVNjcmlwdCc7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrTmFtZSA9IGBhbmd1bGFyMllBTWFwc0FQSUxvYWRlcmA7XG4gICAgICAgIHNjcmlwdC5zcmMgPSBgaHR0cHM6Ly9hcGktbWFwcy55YW5kZXgucnUvMi4xLz9hcGlrZXk9JHt0aGlzLmNvbmZpZy5hcGlLZXl9Jmxhbmc9cnVfUlVgO1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6YmFuLXR5cGVzXG4gICAgICAgIHRoaXMuX3NjcmlwdExvYWRpbmdQcm9taXNlID0gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmU6IEZ1bmN0aW9uLCByZWplY3Q6IEZ1bmN0aW9uKSA9PiB7XG4gICAgICAgICAgICBzY3JpcHQub25sb2FkID0gKCkgPT4geyByZXNvbHZlKCk7IH07XG4gICAgICAgICAgICBzY3JpcHQub25lcnJvciA9IChlcnJvcjogRXZlbnQpID0+IHsgcmVqZWN0KCk7IH07XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9kb2N1bWVudFJlZi5nZXROYXRpdmVEb2N1bWVudCgpLmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NjcmlwdExvYWRpbmdQcm9taXNlO1xuICAgIH1cblxufVxuIl19