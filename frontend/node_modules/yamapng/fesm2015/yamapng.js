import { Injectable, Directive, Input, Inject, InjectionToken, Optional, NgZone, EventEmitter, Output, Component, ElementRef, NgModule, defineInjectable } from '@angular/core';
import { Observable } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class YamapngService {
    constructor() { }
}
YamapngService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
YamapngService.ctorParameters = () => [];
/** @nocollapse */ YamapngService.ngInjectableDef = defineInjectable({ factory: function YamapngService_Factory() { return new YamapngService(); }, token: YamapngService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class YamapngComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
YamapngComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-yamapng',
                template: `
    <p>
      yamapng works!
    </p>
  `
            }] }
];
/** @nocollapse */
YamapngComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class YamapngModule {
}
YamapngModule.decorators = [
    { type: NgModule, args: [{
                declarations: [YamapngComponent],
                imports: [],
                exports: [YamapngComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WindowRef {
    /**
     * @return {?}
     */
    getNativeWindow() { return window; }
}
// tslint:disable-next-line:max-classes-per-file
class DocumentRef {
    /**
     * @return {?}
     */
    getNativeDocument() {
        return document;
    }
}
/** @type {?} */
const BROWSER_GLOBALS_PROVIDERS = [WindowRef, DocumentRef];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Token for the config of the YaMapsAPILoaderConfigLiteral. Please provide an object of type {\@link
 * YaMapsAPILoaderConfigLiteral}.
 * @type {?}
 */
const LAZY_MAPS_API_CONFIG = new InjectionToken('angular-ya-maps MAPS_API_CONFIG');
class YaMapsAPILoader {
    /**
     * @param {?=} config
     * @param {?=} w
     * @param {?=} d
     */
    constructor(config = null, w, d) {
        this.config = config;
        this._windowRef = w;
        this._documentRef = d;
    }
    /**
     * @return {?}
     */
    load() {
        /** @type {?} */
        const script = this._documentRef.getNativeDocument().createElement('script');
        script.type = 'text/javascript';
        script.async = false;
        script.defer = true;
        script.id = 'YaScript';
        script.src = `https://api-maps.yandex.ru/2.1/?apikey=${this.config.apiKey}&lang=ru_RU`;
        // tslint:disable-next-line:ban-types
        this._scriptLoadingPromise = new Promise((resolve, reject) => {
            script.onload = () => { resolve(); };
            script.onerror = (error) => { reject(); };
        });
        this._documentRef.getNativeDocument().body.appendChild(script);
        return this._scriptLoadingPromise;
    }
}
YaMapsAPILoader.decorators = [
    { type: Injectable }
];
/** @nocollapse */
YaMapsAPILoader.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LAZY_MAPS_API_CONFIG,] }] },
    { type: WindowRef },
    { type: DocumentRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class YaMapsAPIWrapper {
    /**
     * @param {?} _loader
     * @param {?} _zone
     * @param {?} d
     */
    constructor(_loader, _zone, d) {
        this._loader = _loader;
        this._zone = _zone;
        this._documentRef = d;
        this._map = new Promise((resolve) => {
            this._mapResolver = resolve;
        });
    }
    /**
     * @param {?} el
     * @param {?} mapOptions
     * @return {?}
     */
    createMap(el, mapOptions) {
        /** @type {?} */
        const res = this._loader.load().then(() => {
            /** @type {?} */
            const create = () => setTimeout(() => {
                if (ymaps.Map) {
                    /** @type {?} */
                    const map = new ymaps.Map(el, mapOptions);
                    this._mapResolver((/** @type {?} */ (map)));
                }
                else {
                    create();
                }
            }, 100);
            create();
        }).catch((e) => console.log(e));
        return res;
    }
    /**
     * @param {?} latitude
     * @param {?} longitude
     * @return {?}
     */
    setCenter(latitude, longitude) {
        this._map.then((map) => {
            map.setCenter([latitude, longitude]);
        });
    }
    /**
     * @return {?}
     */
    getCenter() {
        return this._map.then((map) => {
            return map.getCenter();
        });
    }
    /**
     * @param {?} points
     * @param {?} options
     * @return {?}
     */
    panTo(points, options) {
        this._map.then((map) => {
            map.panTo(points, options);
        });
    }
    /**
     * @template E
     * @param {?} eventName
     * @return {?}
     */
    subscribeToMapEvent(eventName) {
        return Observable.create((observer) => {
            this._map.then((m) => {
                m.events.add(eventName, (arg) => { this._zone.run(() => observer.next(arg)); });
            });
        });
    }
    /**
     * @param {?} marker
     * @return {?}
     */
    createMarker(marker) {
        return this._map.then((map) => {
            /** @type {?} */
            const m = new ymaps.Placemark([marker.latitude, marker.longitude], {
                balloonContentHeader: marker.balloonContentHeader,
                balloonContentBody: marker.balloonContentBody,
                balloonContentFooter: marker.balloonContentFooter,
                iconContent: marker.iconContent
            }, {
                draggable: marker.draggable,
                preset: marker.preset,
                iconLayout: marker.iconLayout,
                iconImageHref: marker.iconImageHref,
                iconImageSize: marker.iconImageSize,
                iconImageOffset: marker.iconImageOffset
            });
            map.geoObjects.add(m);
            return m;
        });
    }
    /**
     * @param {?} overlay
     * @return {?}
     */
    removeGeo(overlay) {
        this._map.then((map) => {
            map.geoObjects.remove(overlay);
        });
    }
    /**
     * @param {?} claster
     * @return {?}
     */
    createClaster(claster) {
        return this._map.then((map) => {
            if (claster.markers.length === 0) {
                return;
            }
            /** @type {?} */
            let myGeoObjects;
            myGeoObjects = new Array();
            claster.markers.forEach((x) => {
                /** @type {?} */
                const point = new ymaps.GeoObject({
                    geometry: { type: x.type, coordinates: [x.lat, x.lng] }
                });
                myGeoObjects.push(point);
            });
            /** @type {?} */
            const clusterer = new ymaps.Clusterer({});
            clusterer.add(myGeoObjects);
            map.geoObjects.add(clusterer);
            return clusterer;
        });
    }
    /**
     * @param {?} objectManager
     * @return {?}
     */
    createObjectManager(objectManager) {
        return this._map.then((map) => {
            if (objectManager.datasource.length === 0) {
                return;
            }
            /** @type {?} */
            const nativeObjectManager = new ymaps.ObjectManager({
                clusterize: objectManager.clusterize,
                gridSize: objectManager.gridSize
            });
            nativeObjectManager.add(objectManager.datasource);
            nativeObjectManager.objects.options.set('preset', objectManager.objectPreset);
            nativeObjectManager.clusters.options.set('preset', objectManager.clasterPreset);
            map.geoObjects.add(nativeObjectManager);
            return nativeObjectManager;
        });
    }
    /**
     * @param {?} objectManager
     * @param {?} id
     * @return {?}
     */
    navigateToGeoObject(objectManager, id) {
        /** @type {?} */
        const obj = objectManager.objects.getById(id);
        if (obj) {
            this.setCenter(obj.geometry.coordinates[0], obj.geometry.coordinates[1]);
            objectManager.objects.balloon.open(id);
        }
    }
    /**
     * @return {?}
     */
    checkYaSciptLoaded() {
        return this._documentRef.getNativeDocument().getElementById('YaScript');
    }
    /**
     * @param {?} objectManager
     * @param {?} filter
     * @return {?}
     */
    objectManagerSetFilter(objectManager, filter) {
        objectManager.setFilter(filter);
    }
}
YaMapsAPIWrapper.decorators = [
    { type: Injectable }
];
/** @nocollapse */
YaMapsAPIWrapper.ctorParameters = () => [
    { type: YaMapsAPILoader },
    { type: NgZone },
    { type: DocumentRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MarkerManager {
    /**
     * @param {?} _mapsWrapper
     * @param {?} _zone
     */
    constructor(_mapsWrapper, _zone) {
        this._mapsWrapper = _mapsWrapper;
        this._zone = _zone;
        this._markers = new Map();
    }
    /**
     * @param {?} marker
     * @return {?}
     */
    deleteMarker(marker) {
        /** @type {?} */
        const m = this._markers.get(marker);
        if (m == null) {
            return Promise.resolve();
        }
        // tslint:disable-next-line:no-shadowed-variable
        return m.then((m) => {
            return this._zone.run(() => {
                // tslint:disable-next-line:no-shadowed-variable
                this.getNativeMarker(marker).then((m) => {
                    this._mapsWrapper.removeGeo(m);
                    this._markers.delete(marker);
                });
            });
        });
    }
    /**
     * @param {?} marker
     * @return {?}
     */
    addMarker(marker) {
        /** @type {?} */
        const markerPromise = this._mapsWrapper.createMarker(marker);
        this._markers.set(marker, markerPromise);
    }
    /**
     * @param {?} marker
     * @return {?}
     */
    showBalloon(marker) {
        this.getNativeMarker(marker).then((m) => {
            m.balloon.open();
        });
    }
    /**
     * @param {?} marker
     * @return {?}
     */
    getNativeMarker(marker) {
        return this._markers.get(marker);
    }
    /**
     * @template T
     * @param {?} eventName
     * @param {?} marker
     * @return {?}
     */
    createEventObservable(eventName, marker) {
        return Observable.create((observer) => {
            this._markers.get(marker).then((m) => {
                m.events.add(eventName, (e) => this._zone.run(() => observer.next(e)));
            });
        });
    }
}
MarkerManager.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MarkerManager.ctorParameters = () => [
    { type: YaMapsAPIWrapper },
    { type: NgZone }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let markerId = 0;
// tslint:disable-next-line:directive-class-suffix
class YaMarker {
    /**
     * @param {?} _markerManager
     */
    constructor(_markerManager) {
        this._markerManager = _markerManager;
        this.draggable = false;
        this.preset = 'islands#blueIcon';
        this.markerClick = new EventEmitter();
        // tslint:disable-next-line:max-line-length
        this.dragEnd = new EventEmitter();
        this._markerAddedToManger = false;
        this._observableSubscriptions = [];
        this._id = (markerId++).toString();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this._markerAddedToManger) {
            this._markerManager.addMarker(this);
            this._markerAddedToManger = true;
            this._addEventListeners();
            return;
        }
        if (changes['showInfo']) {
            this._markerManager.showBalloon(this);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._markerManager.deleteMarker(this);
        this._observableSubscriptions.forEach((s) => s.unsubscribe());
    }
    /**
     * @private
     * @return {?}
     */
    _addEventListeners() {
        // click event
        /** @type {?} */
        const cs = this._markerManager.createEventObservable('click', this).subscribe(() => {
            this._markerManager.showBalloon(this);
            this.markerClick.emit(null);
        });
        this._observableSubscriptions.push(cs);
        // dragend event
        // tslint:disable-next-line:max-line-length
        /** @type {?} */
        const ds = this._markerManager.createEventObservable('dragend', this).subscribe((e) => {
            /** @type {?} */
            const thisPlacemark = e.get('target');
            /** @type {?} */
            const coords = thisPlacemark.geometry.getCoordinates();
            this._markerManager.getNativeMarker(this).then((m) => {
                // tslint:disable-next-line:max-line-length
                this.dragEnd.emit((/** @type {?} */ ({ lat: coords[0], lng: coords[1], nativeMarker: m })));
            });
        });
        this._observableSubscriptions.push(ds);
    }
}
YaMarker.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'ya-marker',
                providers: [
                    YaMapsAPIWrapper
                ]
            },] }
];
/** @nocollapse */
YaMarker.ctorParameters = () => [
    { type: MarkerManager }
];
YaMarker.propDecorators = {
    latitude: [{ type: Input }],
    longitude: [{ type: Input }],
    balloonLayout: [{ type: Input }],
    balloonContentHeader: [{ type: Input }],
    balloonContentBody: [{ type: Input }],
    balloonContentFooter: [{ type: Input }],
    draggable: [{ type: Input }],
    preset: [{ type: Input }],
    iconContent: [{ type: Input }],
    showInfo: [{ type: Input }],
    iconLayout: [{ type: Input }],
    iconImageHref: [{ type: Input }],
    iconImageSize: [{ type: Input }],
    iconImageOffset: [{ type: Input }],
    markerClick: [{ type: Output }],
    dragEnd: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ClasterManager {
    /**
     * @param {?} _mapsWrapper
     * @param {?} _zone
     */
    constructor(_mapsWrapper, _zone) {
        this._mapsWrapper = _mapsWrapper;
        this._zone = _zone;
        this._clasters = new Map();
    }
    /**
     * @param {?} claster
     * @return {?}
     */
    addClaster(claster) {
        /** @type {?} */
        const clasterPromise = this._mapsWrapper.createClaster(claster);
        this._clasters.set(claster, clasterPromise);
    }
}
ClasterManager.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ClasterManager.ctorParameters = () => [
    { type: YaMapsAPIWrapper },
    { type: NgZone }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let clasterId = 0;
// tslint:disable-next-line:directive-class-suffix
class YaClaster {
    /**
     * @param {?} _clasterManager
     */
    constructor(_clasterManager) {
        this._clasterManager = _clasterManager;
        this._markerAddedToManger = false;
        this._id = (clasterId++).toString();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this._markerAddedToManger) {
            this._clasterManager.addClaster(this);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() { }
    /**
     * @private
     * @return {?}
     */
    _addEventListeners() { }
}
YaClaster.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'ya-claster',
                providers: [
                    YaMapsAPIWrapper
                ]
            },] }
];
/** @nocollapse */
YaClaster.ctorParameters = () => [
    { type: ClasterManager }
];
YaClaster.propDecorators = {
    markers: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ObjectManagerManager {
    /**
     * @param {?} _mapsWrapper
     * @param {?} _zone
     */
    constructor(_mapsWrapper, _zone) {
        this._mapsWrapper = _mapsWrapper;
        this._zone = _zone;
        this._managers = new Map();
    }
    /**
     * @param {?} manager
     * @return {?}
     */
    add(manager) {
        /** @type {?} */
        const managerPromise = this._mapsWrapper.createObjectManager(manager);
        this._managers.set(manager, managerPromise);
    }
    /**
     * @param {?} manager
     * @param {?} id
     * @return {?}
     */
    navigateToGeoObject(manager, id) {
        this.getNativeManager(manager).then((p) => {
            this._mapsWrapper.navigateToGeoObject(p, id);
        });
    }
    /**
     * @param {?} manager
     * @return {?}
     */
    getNativeManager(manager) {
        return this._managers.get(manager);
    }
    /**
     * @param {?} manager
     * @param {?} filter
     * @return {?}
     */
    setFilter(manager, filter) {
        this.getNativeManager(manager).then((p) => {
            this._mapsWrapper.objectManagerSetFilter(p, filter);
        });
    }
}
ObjectManagerManager.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ObjectManagerManager.ctorParameters = () => [
    { type: YaMapsAPIWrapper },
    { type: NgZone }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let markerId$1 = 0;
// tslint:disable-next-line:directive-class-suffix
class YaObjectManager {
    /**
     * @param {?} _manager
     */
    constructor(_manager) {
        this._manager = _manager;
        this.clusterize = false;
        this.clasterPreset = 'islands#blueIcon';
        this.objectPreset = 'islands#blueClusterIcons';
        this.gridSize = 0;
        this._observableSubscriptions = [];
        this._addedToManger = false;
        this._id = (markerId$1++).toString();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this._addedToManger) {
            this._manager.add(this);
            this._addedToManger = true;
            return;
        }
        if (changes['selectedObjectId']) {
            this._manager.navigateToGeoObject(this, this.selectedObjectId);
        }
        if (changes['filter']) {
            this._manager.setFilter(this, this.filter);
        }
    }
}
YaObjectManager.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: 'ya-object-manager',
                providers: [
                    YaMapsAPIWrapper
                ]
            },] }
];
/** @nocollapse */
YaObjectManager.ctorParameters = () => [
    { type: ObjectManagerManager }
];
YaObjectManager.propDecorators = {
    clusterize: [{ type: Input }],
    datasource: [{ type: Input }],
    clasterPreset: [{ type: Input }],
    objectPreset: [{ type: Input }],
    gridSize: [{ type: Input }],
    selectedObjectId: [{ type: Input }],
    filter: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let yandex;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable-next-line:component-class-suffix
class YaMap {
    /**
     * @param {?} _elem
     * @param {?} _mapsWrapper
     */
    constructor(_elem, _mapsWrapper) {
        this._elem = _elem;
        this._mapsWrapper = _mapsWrapper;
        this.longitude = 0;
        this.latitude = 0;
        this.zoom = 8;
        this.mapType = 'yandex#map';
        this.controls = null;
        // tslint:disable-next-line:max-line-length
        this.mapClick = new EventEmitter();
        this.actionTick = new EventEmitter();
        this.mapInit = false;
        this._observableSubscriptions = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        console.log('map iit');
        /** @type {?} */
        const container = this._elem.nativeElement.querySelector('.map-container-inner');
        this._initMapInstance(container);
        this.mapInit = true;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.mapInit) {
            this.updatePosition(changes);
            this.panTo(changes);
        }
    }
    /**
     * @private
     * @param {?} el
     * @return {?}
     */
    _initMapInstance(el) {
        if (this.controls != null) {
            this._mapsWrapper.createMap(el, {
                center: [this.latitude, this.longitude], zoom: this.zoom, type: this.mapType,
                controls: this.controls
            });
        }
        else {
            this._mapsWrapper.createMap(el, {
                center: [this.latitude, this.longitude], zoom: this.zoom, type: this.mapType
            });
        }
        this._handleMapMouseEvents();
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    updatePosition(changes) {
        if (changes['latitude'] == null && changes['longitude'] == null) {
            return;
        }
        this._mapsWrapper.setCenter(this.latitude, this.longitude);
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    panTo(changes) {
        if (changes['panToObjects'] == null) {
            return;
        }
        this._mapsWrapper.panTo(this.panToObjects.points, this.panToObjects.params);
    }
    /**
     * @private
     * @return {?}
     */
    _handleMapMouseEvents() {
        /** @type {?} */
        const clickEvents = [
            { name: 'click', emitter: this.mapClick }
        ];
        /** @type {?} */
        const events = [
            { name: 'actiontick', emitter: this.actionTick }
        ];
        clickEvents.forEach((e) => {
            /** @type {?} */
            const s = this._mapsWrapper.subscribeToMapEvent(e.name).subscribe((event) => {
                /** @type {?} */
                const coords = event.get('coords');
                /** @type {?} */
                const value = (/** @type {?} */ ({ lat: coords[0], lng: coords[1] }));
                e.emitter.emit(value);
            });
            this._observableSubscriptions.push(s);
        });
        events.forEach((e) => {
            /** @type {?} */
            const s = this._mapsWrapper.subscribeToMapEvent(e.name).subscribe((event) => {
                this._mapsWrapper.getCenter().then((coords) => {
                    this.latitude = coords[0];
                    this.longitude = coords[1];
                    /** @type {?} */
                    const value = (/** @type {?} */ ({ lat: coords[0], lng: coords[1] }));
                    e.emitter.emit(value);
                });
            });
            this._observableSubscriptions.push(s);
        });
    }
}
YaMap.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'ya-map',
                providers: [
                    YaMapsAPIWrapper,
                    MarkerManager,
                    ClasterManager,
                    ObjectManagerManager
                ],
                template: `
    <div class="map-container-inner" id="map" >
      <ng-content></ng-content>
    </div>
  `
            }] }
];
/** @nocollapse */
YaMap.ctorParameters = () => [
    { type: ElementRef },
    { type: YaMapsAPIWrapper }
];
YaMap.propDecorators = {
    longitude: [{ type: Input }],
    latitude: [{ type: Input }],
    zoom: [{ type: Input }],
    minZoom: [{ type: Input }],
    maxZoom: [{ type: Input }],
    mapType: [{ type: Input }],
    controls: [{ type: Input }],
    panToObjects: [{ type: Input }],
    mapClick: [{ type: Output }],
    actionTick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@internal
 * @return {?}
 */
function coreDirectives() {
    return [
        YaMap,
        YaMarker,
        YaClaster,
        YaObjectManager
    ];
}
/**
 * The angular-ya-maps core module. Contains all Directives/Services/Pipes
 * of the core module. Please use `YaCoreModule.forRoot()` in your app module.
 */
class YaCoreModule {
    /**
     * Please use this method when you register the module at the root level.
     * @param {?} yaMapsAPILoaderConfig
     * @return {?}
     */
    static forRoot(yaMapsAPILoaderConfig) {
        return {
            ngModule: YaCoreModule,
            providers: [
                ...BROWSER_GLOBALS_PROVIDERS,
                { provide: YaMapsAPILoader, useClass: YaMapsAPILoader },
                { provide: LAZY_MAPS_API_CONFIG, useValue: yaMapsAPILoaderConfig }
            ],
        };
    }
}
YaCoreModule.decorators = [
    { type: NgModule, args: [{ declarations: coreDirectives(), exports: coreDirectives() },] }
];
/**
 * @param {?} yaMapsAPILoaderConfig
 * @return {?}
 */
function YaCoreModuleForRoot(yaMapsAPILoaderConfig) {
    return [
        YaCoreModule.forRoot(yaMapsAPILoaderConfig)
    ];
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { YamapngService, YamapngComponent, YamapngModule, coreDirectives, YaCoreModuleForRoot, YaCoreModule, yandex, YaClaster as ɵl, YaMarker as ɵk, YaObjectManager as ɵm, YaMap as ɵa, ClasterManager as ɵi, MarkerManager as ɵh, ObjectManagerManager as ɵj, LAZY_MAPS_API_CONFIG as ɵc, YaMapsAPILoader as ɵd, BROWSER_GLOBALS_PROVIDERS as ɵg, DocumentRef as ɵf, WindowRef as ɵe, YaMapsAPIWrapper as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,