(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('yamapng', ['exports', '@angular/core', 'rxjs'], factory) :
    (factory((global.yamapng = {}),global.ng.core,global.rxjs));
}(this, (function (exports,i0,rxjs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var YamapngService = /** @class */ (function () {
        function YamapngService() {
        }
        YamapngService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        YamapngService.ctorParameters = function () { return []; };
        /** @nocollapse */ YamapngService.ngInjectableDef = i0.defineInjectable({ factory: function YamapngService_Factory() { return new YamapngService(); }, token: YamapngService, providedIn: "root" });
        return YamapngService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var YamapngComponent = /** @class */ (function () {
        function YamapngComponent() {
        }
        /**
         * @return {?}
         */
        YamapngComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        YamapngComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'lib-yamapng',
                        template: "\n    <p>\n      yamapng works!\n    </p>\n  "
                    }] }
        ];
        /** @nocollapse */
        YamapngComponent.ctorParameters = function () { return []; };
        return YamapngComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var YamapngModule = /** @class */ (function () {
        function YamapngModule() {
        }
        YamapngModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [YamapngComponent],
                        imports: [],
                        exports: [YamapngComponent]
                    },] }
        ];
        return YamapngModule;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WindowRef = /** @class */ (function () {
        function WindowRef() {
        }
        /**
         * @return {?}
         */
        WindowRef.prototype.getNativeWindow = /**
         * @return {?}
         */
            function () { return window; };
        return WindowRef;
    }());
    // tslint:disable-next-line:max-classes-per-file
    var  
    // tslint:disable-next-line:max-classes-per-file
    DocumentRef = /** @class */ (function () {
        function DocumentRef() {
        }
        /**
         * @return {?}
         */
        DocumentRef.prototype.getNativeDocument = /**
         * @return {?}
         */
            function () {
                return document;
            };
        return DocumentRef;
    }());
    /** @type {?} */
    var BROWSER_GLOBALS_PROVIDERS = [WindowRef, DocumentRef];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Token for the config of the YaMapsAPILoaderConfigLiteral. Please provide an object of type {\@link
     * YaMapsAPILoaderConfigLiteral}.
     * @type {?}
     */
    var LAZY_MAPS_API_CONFIG = new i0.InjectionToken('angular-ya-maps MAPS_API_CONFIG');
    var YaMapsAPILoader = /** @class */ (function () {
        function YaMapsAPILoader(config, w, d) {
            if (config === void 0) {
                config = null;
            }
            this.config = config;
            this._windowRef = w;
            this._documentRef = d;
        }
        /**
         * @return {?}
         */
        YaMapsAPILoader.prototype.load = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var script = this._documentRef.getNativeDocument().createElement('script');
                script.type = 'text/javascript';
                script.async = false;
                script.defer = true;
                script.id = 'YaScript';
                script.src = "https://api-maps.yandex.ru/2.1/?apikey=" + this.config.apiKey + "&lang=ru_RU";
                // tslint:disable-next-line:ban-types
                this._scriptLoadingPromise = new Promise(function (resolve, reject) {
                    script.onload = function () { resolve(); };
                    script.onerror = function (error) { reject(); };
                });
                this._documentRef.getNativeDocument().body.appendChild(script);
                return this._scriptLoadingPromise;
            };
        YaMapsAPILoader.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        YaMapsAPILoader.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [LAZY_MAPS_API_CONFIG,] }] },
                { type: WindowRef },
                { type: DocumentRef }
            ];
        };
        return YaMapsAPILoader;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var YaMapsAPIWrapper = /** @class */ (function () {
        function YaMapsAPIWrapper(_loader, _zone, d) {
            var _this = this;
            this._loader = _loader;
            this._zone = _zone;
            this._documentRef = d;
            this._map = new Promise(function (resolve) {
                _this._mapResolver = resolve;
            });
        }
        /**
         * @param {?} el
         * @param {?} mapOptions
         * @return {?}
         */
        YaMapsAPIWrapper.prototype.createMap = /**
         * @param {?} el
         * @param {?} mapOptions
         * @return {?}
         */
            function (el, mapOptions) {
                var _this = this;
                /** @type {?} */
                var res = this._loader.load().then(function () {
                    /** @type {?} */
                    var create = function () {
                        return setTimeout(function () {
                            if (ymaps.Map) {
                                /** @type {?} */
                                var map = new ymaps.Map(el, mapOptions);
                                _this._mapResolver(( /** @type {?} */(map)));
                            }
                            else {
                                create();
                            }
                        }, 100);
                    };
                    create();
                }).catch(function (e) { return console.log(e); });
                return res;
            };
        /**
         * @param {?} latitude
         * @param {?} longitude
         * @return {?}
         */
        YaMapsAPIWrapper.prototype.setCenter = /**
         * @param {?} latitude
         * @param {?} longitude
         * @return {?}
         */
            function (latitude, longitude) {
                this._map.then(function (map) {
                    map.setCenter([latitude, longitude]);
                });
            };
        /**
         * @return {?}
         */
        YaMapsAPIWrapper.prototype.getCenter = /**
         * @return {?}
         */
            function () {
                return this._map.then(function (map) {
                    return map.getCenter();
                });
            };
        /**
         * @param {?} points
         * @param {?} options
         * @return {?}
         */
        YaMapsAPIWrapper.prototype.panTo = /**
         * @param {?} points
         * @param {?} options
         * @return {?}
         */
            function (points, options) {
                this._map.then(function (map) {
                    map.panTo(points, options);
                });
            };
        /**
         * @template E
         * @param {?} eventName
         * @return {?}
         */
        YaMapsAPIWrapper.prototype.subscribeToMapEvent = /**
         * @template E
         * @param {?} eventName
         * @return {?}
         */
            function (eventName) {
                var _this = this;
                return rxjs.Observable.create(function (observer) {
                    _this._map.then(function (m) {
                        m.events.add(eventName, function (arg) { _this._zone.run(function () { return observer.next(arg); }); });
                    });
                });
            };
        /**
         * @param {?} marker
         * @return {?}
         */
        YaMapsAPIWrapper.prototype.createMarker = /**
         * @param {?} marker
         * @return {?}
         */
            function (marker) {
                return this._map.then(function (map) {
                    /** @type {?} */
                    var m = new ymaps.Placemark([marker.latitude, marker.longitude], {
                        balloonContentHeader: marker.balloonContentHeader,
                        balloonContentBody: marker.balloonContentBody,
                        balloonContentFooter: marker.balloonContentFooter,
                        iconContent: marker.iconContent
                    }, {
                        draggable: marker.draggable,
                        preset: marker.preset,
                        iconLayout: marker.iconLayout,
                        iconImageHref: marker.iconImageHref,
                        iconImageSize: marker.iconImageSize,
                        iconImageOffset: marker.iconImageOffset
                    });
                    map.geoObjects.add(m);
                    return m;
                });
            };
        /**
         * @param {?} overlay
         * @return {?}
         */
        YaMapsAPIWrapper.prototype.removeGeo = /**
         * @param {?} overlay
         * @return {?}
         */
            function (overlay) {
                this._map.then(function (map) {
                    map.geoObjects.remove(overlay);
                });
            };
        /**
         * @param {?} claster
         * @return {?}
         */
        YaMapsAPIWrapper.prototype.createClaster = /**
         * @param {?} claster
         * @return {?}
         */
            function (claster) {
                return this._map.then(function (map) {
                    if (claster.markers.length === 0) {
                        return;
                    }
                    /** @type {?} */
                    var myGeoObjects;
                    myGeoObjects = new Array();
                    claster.markers.forEach(function (x) {
                        /** @type {?} */
                        var point = new ymaps.GeoObject({
                            geometry: { type: x.type, coordinates: [x.lat, x.lng] }
                        });
                        myGeoObjects.push(point);
                    });
                    /** @type {?} */
                    var clusterer = new ymaps.Clusterer({});
                    clusterer.add(myGeoObjects);
                    map.geoObjects.add(clusterer);
                    return clusterer;
                });
            };
        /**
         * @param {?} objectManager
         * @return {?}
         */
        YaMapsAPIWrapper.prototype.createObjectManager = /**
         * @param {?} objectManager
         * @return {?}
         */
            function (objectManager) {
                return this._map.then(function (map) {
                    if (objectManager.datasource.length === 0) {
                        return;
                    }
                    /** @type {?} */
                    var nativeObjectManager = new ymaps.ObjectManager({
                        clusterize: objectManager.clusterize,
                        gridSize: objectManager.gridSize
                    });
                    nativeObjectManager.add(objectManager.datasource);
                    nativeObjectManager.objects.options.set('preset', objectManager.objectPreset);
                    nativeObjectManager.clusters.options.set('preset', objectManager.clasterPreset);
                    map.geoObjects.add(nativeObjectManager);
                    return nativeObjectManager;
                });
            };
        /**
         * @param {?} objectManager
         * @param {?} id
         * @return {?}
         */
        YaMapsAPIWrapper.prototype.navigateToGeoObject = /**
         * @param {?} objectManager
         * @param {?} id
         * @return {?}
         */
            function (objectManager, id) {
                /** @type {?} */
                var obj = objectManager.objects.getById(id);
                if (obj) {
                    this.setCenter(obj.geometry.coordinates[0], obj.geometry.coordinates[1]);
                    objectManager.objects.balloon.open(id);
                }
            };
        /**
         * @return {?}
         */
        YaMapsAPIWrapper.prototype.checkYaSciptLoaded = /**
         * @return {?}
         */
            function () {
                return this._documentRef.getNativeDocument().getElementById('YaScript');
            };
        /**
         * @param {?} objectManager
         * @param {?} filter
         * @return {?}
         */
        YaMapsAPIWrapper.prototype.objectManagerSetFilter = /**
         * @param {?} objectManager
         * @param {?} filter
         * @return {?}
         */
            function (objectManager, filter) {
                objectManager.setFilter(filter);
            };
        YaMapsAPIWrapper.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        YaMapsAPIWrapper.ctorParameters = function () {
            return [
                { type: YaMapsAPILoader },
                { type: i0.NgZone },
                { type: DocumentRef }
            ];
        };
        return YaMapsAPIWrapper;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MarkerManager = /** @class */ (function () {
        function MarkerManager(_mapsWrapper, _zone) {
            this._mapsWrapper = _mapsWrapper;
            this._zone = _zone;
            this._markers = new Map();
        }
        /**
         * @param {?} marker
         * @return {?}
         */
        MarkerManager.prototype.deleteMarker = /**
         * @param {?} marker
         * @return {?}
         */
            function (marker) {
                var _this = this;
                /** @type {?} */
                var m = this._markers.get(marker);
                if (m == null) {
                    return Promise.resolve();
                }
                // tslint:disable-next-line:no-shadowed-variable
                return m.then(function (m) {
                    return _this._zone.run(function () {
                        // tslint:disable-next-line:no-shadowed-variable
                        _this.getNativeMarker(marker).then(function (m) {
                            _this._mapsWrapper.removeGeo(m);
                            _this._markers.delete(marker);
                        });
                    });
                });
            };
        /**
         * @param {?} marker
         * @return {?}
         */
        MarkerManager.prototype.addMarker = /**
         * @param {?} marker
         * @return {?}
         */
            function (marker) {
                /** @type {?} */
                var markerPromise = this._mapsWrapper.createMarker(marker);
                this._markers.set(marker, markerPromise);
            };
        /**
         * @param {?} marker
         * @return {?}
         */
        MarkerManager.prototype.showBalloon = /**
         * @param {?} marker
         * @return {?}
         */
            function (marker) {
                this.getNativeMarker(marker).then(function (m) {
                    m.balloon.open();
                });
            };
        /**
         * @param {?} marker
         * @return {?}
         */
        MarkerManager.prototype.getNativeMarker = /**
         * @param {?} marker
         * @return {?}
         */
            function (marker) {
                return this._markers.get(marker);
            };
        /**
         * @template T
         * @param {?} eventName
         * @param {?} marker
         * @return {?}
         */
        MarkerManager.prototype.createEventObservable = /**
         * @template T
         * @param {?} eventName
         * @param {?} marker
         * @return {?}
         */
            function (eventName, marker) {
                var _this = this;
                return rxjs.Observable.create(function (observer) {
                    _this._markers.get(marker).then(function (m) {
                        m.events.add(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });
                    });
                });
            };
        MarkerManager.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        MarkerManager.ctorParameters = function () {
            return [
                { type: YaMapsAPIWrapper },
                { type: i0.NgZone }
            ];
        };
        return MarkerManager;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var markerId = 0;
    var YaMarker = /** @class */ (function () {
        function YaMarker(_markerManager) {
            this._markerManager = _markerManager;
            this.draggable = false;
            this.preset = 'islands#blueIcon';
            this.markerClick = new i0.EventEmitter();
            // tslint:disable-next-line:max-line-length
            this.dragEnd = new i0.EventEmitter();
            this._markerAddedToManger = false;
            this._observableSubscriptions = [];
            this._id = (markerId++).toString();
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        YaMarker.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (!this._markerAddedToManger) {
                    this._markerManager.addMarker(this);
                    this._markerAddedToManger = true;
                    this._addEventListeners();
                    return;
                }
                if (changes['showInfo']) {
                    this._markerManager.showBalloon(this);
                }
            };
        /**
         * @return {?}
         */
        YaMarker.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this._markerManager.deleteMarker(this);
                this._observableSubscriptions.forEach(function (s) { return s.unsubscribe(); });
            };
        /**
         * @private
         * @return {?}
         */
        YaMarker.prototype._addEventListeners = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                // click event
                /** @type {?} */
                var cs = this._markerManager.createEventObservable('click', this).subscribe(function () {
                    _this._markerManager.showBalloon(_this);
                    _this.markerClick.emit(null);
                });
                this._observableSubscriptions.push(cs);
                // dragend event
                // tslint:disable-next-line:max-line-length
                /** @type {?} */
                var ds = this._markerManager.createEventObservable('dragend', this).subscribe(function (e) {
                    /** @type {?} */
                    var thisPlacemark = e.get('target');
                    /** @type {?} */
                    var coords = thisPlacemark.geometry.getCoordinates();
                    _this._markerManager.getNativeMarker(_this).then(function (m) {
                        // tslint:disable-next-line:max-line-length
                        _this.dragEnd.emit(( /** @type {?} */({ lat: coords[0], lng: coords[1], nativeMarker: m })));
                    });
                });
                this._observableSubscriptions.push(ds);
            };
        YaMarker.decorators = [
            { type: i0.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: 'ya-marker',
                        providers: [
                            YaMapsAPIWrapper
                        ]
                    },] }
        ];
        /** @nocollapse */
        YaMarker.ctorParameters = function () {
            return [
                { type: MarkerManager }
            ];
        };
        YaMarker.propDecorators = {
            latitude: [{ type: i0.Input }],
            longitude: [{ type: i0.Input }],
            balloonLayout: [{ type: i0.Input }],
            balloonContentHeader: [{ type: i0.Input }],
            balloonContentBody: [{ type: i0.Input }],
            balloonContentFooter: [{ type: i0.Input }],
            draggable: [{ type: i0.Input }],
            preset: [{ type: i0.Input }],
            iconContent: [{ type: i0.Input }],
            showInfo: [{ type: i0.Input }],
            iconLayout: [{ type: i0.Input }],
            iconImageHref: [{ type: i0.Input }],
            iconImageSize: [{ type: i0.Input }],
            iconImageOffset: [{ type: i0.Input }],
            markerClick: [{ type: i0.Output }],
            dragEnd: [{ type: i0.Output }]
        };
        return YaMarker;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ClasterManager = /** @class */ (function () {
        function ClasterManager(_mapsWrapper, _zone) {
            this._mapsWrapper = _mapsWrapper;
            this._zone = _zone;
            this._clasters = new Map();
        }
        /**
         * @param {?} claster
         * @return {?}
         */
        ClasterManager.prototype.addClaster = /**
         * @param {?} claster
         * @return {?}
         */
            function (claster) {
                /** @type {?} */
                var clasterPromise = this._mapsWrapper.createClaster(claster);
                this._clasters.set(claster, clasterPromise);
            };
        ClasterManager.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        ClasterManager.ctorParameters = function () {
            return [
                { type: YaMapsAPIWrapper },
                { type: i0.NgZone }
            ];
        };
        return ClasterManager;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var clasterId = 0;
    var YaClaster = /** @class */ (function () {
        function YaClaster(_clasterManager) {
            this._clasterManager = _clasterManager;
            this._markerAddedToManger = false;
            this._id = (clasterId++).toString();
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        YaClaster.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (!this._markerAddedToManger) {
                    this._clasterManager.addClaster(this);
                }
            };
        /**
         * @return {?}
         */
        YaClaster.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () { };
        /**
         * @private
         * @return {?}
         */
        YaClaster.prototype._addEventListeners = /**
         * @private
         * @return {?}
         */
            function () { };
        YaClaster.decorators = [
            { type: i0.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: 'ya-claster',
                        providers: [
                            YaMapsAPIWrapper
                        ]
                    },] }
        ];
        /** @nocollapse */
        YaClaster.ctorParameters = function () {
            return [
                { type: ClasterManager }
            ];
        };
        YaClaster.propDecorators = {
            markers: [{ type: i0.Input }]
        };
        return YaClaster;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ObjectManagerManager = /** @class */ (function () {
        function ObjectManagerManager(_mapsWrapper, _zone) {
            this._mapsWrapper = _mapsWrapper;
            this._zone = _zone;
            this._managers = new Map();
        }
        /**
         * @param {?} manager
         * @return {?}
         */
        ObjectManagerManager.prototype.add = /**
         * @param {?} manager
         * @return {?}
         */
            function (manager) {
                /** @type {?} */
                var managerPromise = this._mapsWrapper.createObjectManager(manager);
                this._managers.set(manager, managerPromise);
            };
        /**
         * @param {?} manager
         * @param {?} id
         * @return {?}
         */
        ObjectManagerManager.prototype.navigateToGeoObject = /**
         * @param {?} manager
         * @param {?} id
         * @return {?}
         */
            function (manager, id) {
                var _this = this;
                this.getNativeManager(manager).then(function (p) {
                    _this._mapsWrapper.navigateToGeoObject(p, id);
                });
            };
        /**
         * @param {?} manager
         * @return {?}
         */
        ObjectManagerManager.prototype.getNativeManager = /**
         * @param {?} manager
         * @return {?}
         */
            function (manager) {
                return this._managers.get(manager);
            };
        /**
         * @param {?} manager
         * @param {?} filter
         * @return {?}
         */
        ObjectManagerManager.prototype.setFilter = /**
         * @param {?} manager
         * @param {?} filter
         * @return {?}
         */
            function (manager, filter) {
                var _this = this;
                this.getNativeManager(manager).then(function (p) {
                    _this._mapsWrapper.objectManagerSetFilter(p, filter);
                });
            };
        ObjectManagerManager.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        ObjectManagerManager.ctorParameters = function () {
            return [
                { type: YaMapsAPIWrapper },
                { type: i0.NgZone }
            ];
        };
        return ObjectManagerManager;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var markerId$1 = 0;
    var YaObjectManager = /** @class */ (function () {
        function YaObjectManager(_manager) {
            this._manager = _manager;
            this.clusterize = false;
            this.clasterPreset = 'islands#blueIcon';
            this.objectPreset = 'islands#blueClusterIcons';
            this.gridSize = 0;
            this._observableSubscriptions = [];
            this._addedToManger = false;
            this._id = (markerId$1++).toString();
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        YaObjectManager.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (!this._addedToManger) {
                    this._manager.add(this);
                    this._addedToManger = true;
                    return;
                }
                if (changes['selectedObjectId']) {
                    this._manager.navigateToGeoObject(this, this.selectedObjectId);
                }
                if (changes['filter']) {
                    this._manager.setFilter(this, this.filter);
                }
            };
        YaObjectManager.decorators = [
            { type: i0.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: 'ya-object-manager',
                        providers: [
                            YaMapsAPIWrapper
                        ]
                    },] }
        ];
        /** @nocollapse */
        YaObjectManager.ctorParameters = function () {
            return [
                { type: ObjectManagerManager }
            ];
        };
        YaObjectManager.propDecorators = {
            clusterize: [{ type: i0.Input }],
            datasource: [{ type: i0.Input }],
            clasterPreset: [{ type: i0.Input }],
            objectPreset: [{ type: i0.Input }],
            gridSize: [{ type: i0.Input }],
            selectedObjectId: [{ type: i0.Input }],
            filter: [{ type: i0.Input }]
        };
        return YaObjectManager;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var YaMap = /** @class */ (function () {
        function YaMap(_elem, _mapsWrapper) {
            this._elem = _elem;
            this._mapsWrapper = _mapsWrapper;
            this.longitude = 0;
            this.latitude = 0;
            this.zoom = 8;
            this.mapType = 'yandex#map';
            this.controls = null;
            // tslint:disable-next-line:max-line-length
            this.mapClick = new i0.EventEmitter();
            this.actionTick = new i0.EventEmitter();
            this.mapInit = false;
            this._observableSubscriptions = [];
        }
        /**
         * @return {?}
         */
        YaMap.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                console.log('map iit');
                /** @type {?} */
                var container = this._elem.nativeElement.querySelector('.map-container-inner');
                this._initMapInstance(container);
                this.mapInit = true;
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        YaMap.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (this.mapInit) {
                    this.updatePosition(changes);
                    this.panTo(changes);
                }
            };
        /**
         * @private
         * @param {?} el
         * @return {?}
         */
        YaMap.prototype._initMapInstance = /**
         * @private
         * @param {?} el
         * @return {?}
         */
            function (el) {
                if (this.controls != null) {
                    this._mapsWrapper.createMap(el, {
                        center: [this.latitude, this.longitude], zoom: this.zoom, type: this.mapType,
                        controls: this.controls
                    });
                }
                else {
                    this._mapsWrapper.createMap(el, {
                        center: [this.latitude, this.longitude], zoom: this.zoom, type: this.mapType
                    });
                }
                this._handleMapMouseEvents();
            };
        /**
         * @private
         * @param {?} changes
         * @return {?}
         */
        YaMap.prototype.updatePosition = /**
         * @private
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes['latitude'] == null && changes['longitude'] == null) {
                    return;
                }
                this._mapsWrapper.setCenter(this.latitude, this.longitude);
            };
        /**
         * @private
         * @param {?} changes
         * @return {?}
         */
        YaMap.prototype.panTo = /**
         * @private
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes['panToObjects'] == null) {
                    return;
                }
                this._mapsWrapper.panTo(this.panToObjects.points, this.panToObjects.params);
            };
        /**
         * @private
         * @return {?}
         */
        YaMap.prototype._handleMapMouseEvents = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var clickEvents = [
                    { name: 'click', emitter: this.mapClick }
                ];
                /** @type {?} */
                var events = [
                    { name: 'actiontick', emitter: this.actionTick }
                ];
                clickEvents.forEach(function (e) {
                    /** @type {?} */
                    var s = _this._mapsWrapper.subscribeToMapEvent(e.name).subscribe(function (event) {
                        /** @type {?} */
                        var coords = event.get('coords');
                        /** @type {?} */
                        var value = ( /** @type {?} */({ lat: coords[0], lng: coords[1] }));
                        e.emitter.emit(value);
                    });
                    _this._observableSubscriptions.push(s);
                });
                events.forEach(function (e) {
                    /** @type {?} */
                    var s = _this._mapsWrapper.subscribeToMapEvent(e.name).subscribe(function (event) {
                        _this._mapsWrapper.getCenter().then(function (coords) {
                            _this.latitude = coords[0];
                            _this.longitude = coords[1];
                            /** @type {?} */
                            var value = ( /** @type {?} */({ lat: coords[0], lng: coords[1] }));
                            e.emitter.emit(value);
                        });
                    });
                    _this._observableSubscriptions.push(s);
                });
            };
        YaMap.decorators = [
            { type: i0.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'ya-map',
                        providers: [
                            YaMapsAPIWrapper,
                            MarkerManager,
                            ClasterManager,
                            ObjectManagerManager
                        ],
                        template: "\n    <div class=\"map-container-inner\" id=\"map\" >\n      <ng-content></ng-content>\n    </div>\n  "
                    }] }
        ];
        /** @nocollapse */
        YaMap.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: YaMapsAPIWrapper }
            ];
        };
        YaMap.propDecorators = {
            longitude: [{ type: i0.Input }],
            latitude: [{ type: i0.Input }],
            zoom: [{ type: i0.Input }],
            minZoom: [{ type: i0.Input }],
            maxZoom: [{ type: i0.Input }],
            mapType: [{ type: i0.Input }],
            controls: [{ type: i0.Input }],
            panToObjects: [{ type: i0.Input }],
            mapClick: [{ type: i0.Output }],
            actionTick: [{ type: i0.Output }]
        };
        return YaMap;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var yandex;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * \@internal
     * @return {?}
     */
    function coreDirectives() {
        return [
            YaMap,
            YaMarker,
            YaClaster,
            YaObjectManager
        ];
    }
    /**
     * The angular-ya-maps core module. Contains all Directives/Services/Pipes
     * of the core module. Please use `YaCoreModule.forRoot()` in your app module.
     */
    var YaCoreModule = /** @class */ (function () {
        function YaCoreModule() {
        }
        /**
         * Please use this method when you register the module at the root level.
         */
        /**
         * Please use this method when you register the module at the root level.
         * @param {?} yaMapsAPILoaderConfig
         * @return {?}
         */
        YaCoreModule.forRoot = /**
         * Please use this method when you register the module at the root level.
         * @param {?} yaMapsAPILoaderConfig
         * @return {?}
         */
            function (yaMapsAPILoaderConfig) {
                return {
                    ngModule: YaCoreModule,
                    providers: __spread(BROWSER_GLOBALS_PROVIDERS, [
                        { provide: YaMapsAPILoader, useClass: YaMapsAPILoader },
                        { provide: LAZY_MAPS_API_CONFIG, useValue: yaMapsAPILoaderConfig }
                    ]),
                };
            };
        YaCoreModule.decorators = [
            { type: i0.NgModule, args: [{ declarations: coreDirectives(), exports: coreDirectives() },] }
        ];
        return YaCoreModule;
    }());
    /**
     * @param {?} yaMapsAPILoaderConfig
     * @return {?}
     */
    function YaCoreModuleForRoot(yaMapsAPILoaderConfig) {
        return [
            YaCoreModule.forRoot(yaMapsAPILoaderConfig)
        ];
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.YamapngService = YamapngService;
    exports.YamapngComponent = YamapngComponent;
    exports.YamapngModule = YamapngModule;
    exports.coreDirectives = coreDirectives;
    exports.YaCoreModuleForRoot = YaCoreModuleForRoot;
    exports.YaCoreModule = YaCoreModule;
    exports.yandex = yandex;
    exports.ɵl = YaClaster;
    exports.ɵk = YaMarker;
    exports.ɵm = YaObjectManager;
    exports.ɵa = YaMap;
    exports.ɵi = ClasterManager;
    exports.ɵh = MarkerManager;
    exports.ɵj = ObjectManagerManager;
    exports.ɵc = LAZY_MAPS_API_CONFIG;
    exports.ɵd = YaMapsAPILoader;
    exports.ɵg = BROWSER_GLOBALS_PROVIDERS;
    exports.ɵf = DocumentRef;
    exports.ɵe = WindowRef;
    exports.ɵb = YaMapsAPIWrapper;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,