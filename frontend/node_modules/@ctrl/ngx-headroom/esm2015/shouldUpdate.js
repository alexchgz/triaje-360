export default function (lastKnownScrollY = 0, currentScrollY = 0, disable, pinStart, downTolerance, upTolerance, state, height) {
    const scrollDirection = currentScrollY >= lastKnownScrollY ? 'down' : 'up';
    const distanceScrolled = Math.abs(currentScrollY - lastKnownScrollY);
    // We're disabled
    if (disable) {
        return {
            action: 'none',
            scrollDirection,
            distanceScrolled,
        };
        // We're at the top and not fixed yet.
    }
    else if (currentScrollY <= pinStart && state !== 'unfixed') {
        return {
            action: 'unfix',
            scrollDirection,
            distanceScrolled,
        };
        // We're unfixed and headed down. Carry on.
    }
    else if (currentScrollY <= height &&
        scrollDirection === 'down' &&
        state === 'unfixed') {
        return {
            action: 'none',
            scrollDirection,
            distanceScrolled,
        };
        // We're past the header and scrolling down.
        // We transition to "unpinned" if necessary.
    }
    else if (scrollDirection === 'down' &&
        ['pinned', 'unfixed'].indexOf(state) >= 0 &&
        currentScrollY > height + pinStart &&
        distanceScrolled > downTolerance) {
        return {
            action: 'unpin',
            scrollDirection,
            distanceScrolled,
        };
        // We're scrolling up, we transition to "pinned"
    }
    else if (scrollDirection === 'up' &&
        distanceScrolled > upTolerance &&
        ['pinned', 'unfixed'].indexOf(state) < 0) {
        return {
            action: 'pin',
            scrollDirection,
            distanceScrolled,
        };
        // We're scrolling up, and inside the header.
        // We transition to pin regardless of upTolerance
    }
    else if (scrollDirection === 'up' &&
        currentScrollY <= height &&
        ['pinned', 'unfixed'].indexOf(state) < 0) {
        return {
            action: 'pin',
            scrollDirection,
            distanceScrolled,
        };
    }
    else {
        return {
            action: 'none',
            scrollDirection,
            distanceScrolled,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdWxkVXBkYXRlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGN0cmwvbmd4LWhlYWRyb29tLyIsInNvdXJjZXMiOlsic2hvdWxkVXBkYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxPQUFPLFdBQ1osZ0JBQWdCLEdBQUcsQ0FBQyxFQUNwQixjQUFjLEdBQUcsQ0FBQyxFQUNsQixPQUFpQixFQUNqQixRQUFpQixFQUNqQixhQUFzQixFQUN0QixXQUFvQixFQUNwQixLQUFjLEVBQ2QsTUFBZTtJQUVmLE1BQU0sZUFBZSxHQUFHLGNBQWMsSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDM0UsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDO0lBRXJFLGlCQUFpQjtJQUNqQixJQUFJLE9BQU8sRUFBRTtRQUNYLE9BQU87WUFDTCxNQUFNLEVBQUUsTUFBTTtZQUNkLGVBQWU7WUFDZixnQkFBZ0I7U0FDakIsQ0FBQztRQUNGLHNDQUFzQztLQUN2QztTQUFNLElBQUksY0FBYyxJQUFJLFFBQVEsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1FBQzVELE9BQU87WUFDTCxNQUFNLEVBQUUsT0FBTztZQUNmLGVBQWU7WUFDZixnQkFBZ0I7U0FDakIsQ0FBQztRQUNGLDJDQUEyQztLQUM1QztTQUFNLElBQ0wsY0FBYyxJQUFJLE1BQU07UUFDeEIsZUFBZSxLQUFLLE1BQU07UUFDMUIsS0FBSyxLQUFLLFNBQVMsRUFDbkI7UUFDQSxPQUFPO1lBQ0wsTUFBTSxFQUFFLE1BQU07WUFDZCxlQUFlO1lBQ2YsZ0JBQWdCO1NBQ2pCLENBQUM7UUFDRiw0Q0FBNEM7UUFDNUMsNENBQTRDO0tBQzdDO1NBQU0sSUFDTCxlQUFlLEtBQUssTUFBTTtRQUMxQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztRQUN6QyxjQUFjLEdBQUcsTUFBTSxHQUFHLFFBQVE7UUFDbEMsZ0JBQWdCLEdBQUcsYUFBYSxFQUNoQztRQUNBLE9BQU87WUFDTCxNQUFNLEVBQUUsT0FBTztZQUNmLGVBQWU7WUFDZixnQkFBZ0I7U0FDakIsQ0FBQztRQUNGLGdEQUFnRDtLQUNqRDtTQUFNLElBQ0wsZUFBZSxLQUFLLElBQUk7UUFDeEIsZ0JBQWdCLEdBQUcsV0FBVztRQUM5QixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUN4QztRQUNBLE9BQU87WUFDTCxNQUFNLEVBQUUsS0FBSztZQUNiLGVBQWU7WUFDZixnQkFBZ0I7U0FDakIsQ0FBQztRQUNGLDZDQUE2QztRQUM3QyxpREFBaUQ7S0FDbEQ7U0FBTSxJQUNMLGVBQWUsS0FBSyxJQUFJO1FBQ3hCLGNBQWMsSUFBSSxNQUFNO1FBQ3hCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQ3hDO1FBQ0EsT0FBTztZQUNMLE1BQU0sRUFBRSxLQUFLO1lBQ2IsZUFBZTtZQUNmLGdCQUFnQjtTQUNqQixDQUFDO0tBQ0g7U0FBTTtRQUNMLE9BQU87WUFDTCxNQUFNLEVBQUUsTUFBTTtZQUNkLGVBQWU7WUFDZixnQkFBZ0I7U0FDakIsQ0FBQztLQUNIO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKFxuICBsYXN0S25vd25TY3JvbGxZID0gMCxcbiAgY3VycmVudFNjcm9sbFkgPSAwLFxuICBkaXNhYmxlPzogYm9vbGVhbixcbiAgcGluU3RhcnQ/OiBudW1iZXIsXG4gIGRvd25Ub2xlcmFuY2U/OiBudW1iZXIsXG4gIHVwVG9sZXJhbmNlPzogbnVtYmVyLFxuICBzdGF0ZT86IHN0cmluZyxcbiAgaGVpZ2h0PzogbnVtYmVyLFxuKSB7XG4gIGNvbnN0IHNjcm9sbERpcmVjdGlvbiA9IGN1cnJlbnRTY3JvbGxZID49IGxhc3RLbm93blNjcm9sbFkgPyAnZG93bicgOiAndXAnO1xuICBjb25zdCBkaXN0YW5jZVNjcm9sbGVkID0gTWF0aC5hYnMoY3VycmVudFNjcm9sbFkgLSBsYXN0S25vd25TY3JvbGxZKTtcblxuICAvLyBXZSdyZSBkaXNhYmxlZFxuICBpZiAoZGlzYWJsZSkge1xuICAgIHJldHVybiB7XG4gICAgICBhY3Rpb246ICdub25lJyxcbiAgICAgIHNjcm9sbERpcmVjdGlvbixcbiAgICAgIGRpc3RhbmNlU2Nyb2xsZWQsXG4gICAgfTtcbiAgICAvLyBXZSdyZSBhdCB0aGUgdG9wIGFuZCBub3QgZml4ZWQgeWV0LlxuICB9IGVsc2UgaWYgKGN1cnJlbnRTY3JvbGxZIDw9IHBpblN0YXJ0ICYmIHN0YXRlICE9PSAndW5maXhlZCcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYWN0aW9uOiAndW5maXgnLFxuICAgICAgc2Nyb2xsRGlyZWN0aW9uLFxuICAgICAgZGlzdGFuY2VTY3JvbGxlZCxcbiAgICB9O1xuICAgIC8vIFdlJ3JlIHVuZml4ZWQgYW5kIGhlYWRlZCBkb3duLiBDYXJyeSBvbi5cbiAgfSBlbHNlIGlmIChcbiAgICBjdXJyZW50U2Nyb2xsWSA8PSBoZWlnaHQgJiZcbiAgICBzY3JvbGxEaXJlY3Rpb24gPT09ICdkb3duJyAmJlxuICAgIHN0YXRlID09PSAndW5maXhlZCdcbiAgKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjdGlvbjogJ25vbmUnLFxuICAgICAgc2Nyb2xsRGlyZWN0aW9uLFxuICAgICAgZGlzdGFuY2VTY3JvbGxlZCxcbiAgICB9O1xuICAgIC8vIFdlJ3JlIHBhc3QgdGhlIGhlYWRlciBhbmQgc2Nyb2xsaW5nIGRvd24uXG4gICAgLy8gV2UgdHJhbnNpdGlvbiB0byBcInVucGlubmVkXCIgaWYgbmVjZXNzYXJ5LlxuICB9IGVsc2UgaWYgKFxuICAgIHNjcm9sbERpcmVjdGlvbiA9PT0gJ2Rvd24nICYmXG4gICAgWydwaW5uZWQnLCAndW5maXhlZCddLmluZGV4T2Yoc3RhdGUpID49IDAgJiZcbiAgICBjdXJyZW50U2Nyb2xsWSA+IGhlaWdodCArIHBpblN0YXJ0ICYmXG4gICAgZGlzdGFuY2VTY3JvbGxlZCA+IGRvd25Ub2xlcmFuY2VcbiAgKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjdGlvbjogJ3VucGluJyxcbiAgICAgIHNjcm9sbERpcmVjdGlvbixcbiAgICAgIGRpc3RhbmNlU2Nyb2xsZWQsXG4gICAgfTtcbiAgICAvLyBXZSdyZSBzY3JvbGxpbmcgdXAsIHdlIHRyYW5zaXRpb24gdG8gXCJwaW5uZWRcIlxuICB9IGVsc2UgaWYgKFxuICAgIHNjcm9sbERpcmVjdGlvbiA9PT0gJ3VwJyAmJlxuICAgIGRpc3RhbmNlU2Nyb2xsZWQgPiB1cFRvbGVyYW5jZSAmJlxuICAgIFsncGlubmVkJywgJ3VuZml4ZWQnXS5pbmRleE9mKHN0YXRlKSA8IDBcbiAgKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjdGlvbjogJ3BpbicsXG4gICAgICBzY3JvbGxEaXJlY3Rpb24sXG4gICAgICBkaXN0YW5jZVNjcm9sbGVkLFxuICAgIH07XG4gICAgLy8gV2UncmUgc2Nyb2xsaW5nIHVwLCBhbmQgaW5zaWRlIHRoZSBoZWFkZXIuXG4gICAgLy8gV2UgdHJhbnNpdGlvbiB0byBwaW4gcmVnYXJkbGVzcyBvZiB1cFRvbGVyYW5jZVxuICB9IGVsc2UgaWYgKFxuICAgIHNjcm9sbERpcmVjdGlvbiA9PT0gJ3VwJyAmJlxuICAgIGN1cnJlbnRTY3JvbGxZIDw9IGhlaWdodCAmJlxuICAgIFsncGlubmVkJywgJ3VuZml4ZWQnXS5pbmRleE9mKHN0YXRlKSA8IDBcbiAgKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjdGlvbjogJ3BpbicsXG4gICAgICBzY3JvbGxEaXJlY3Rpb24sXG4gICAgICBkaXN0YW5jZVNjcm9sbGVkLFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFjdGlvbjogJ25vbmUnLFxuICAgICAgc2Nyb2xsRGlyZWN0aW9uLFxuICAgICAgZGlzdGFuY2VTY3JvbGxlZCxcbiAgICB9O1xuICB9XG59XG4iXX0=