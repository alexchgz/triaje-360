{"version":3,"file":"headroom.component.d.ts","sources":["headroom.component.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, ElementRef, EventEmitter, OnInit } from '@angular/core';\nexport declare class HeadroomComponent implements OnInit, AfterContentInit {\n    private document;\n    wrapperClassName: string;\n    innerClassName: string;\n    innerStyle: any;\n    /**\n     * pass styles for the wrapper div\n     * (this maintains the components vertical space at the top of the page)\n     */\n    wrapperStyle: any;\n    /** disable pinning and unpinning */\n    disable: boolean;\n    /** scroll tolerance in px when scrolling up before component is pinned */\n    upTolerance: number;\n    /** scroll tolerance in px when scrolling down before component is pinned */\n    downTolerance: number;\n    /**\n     * height in px where the header should start and stop pinning.\n     * Useful when you have another element above Headroom\n     */\n    pinStart: number;\n    calcHeightOnResize: boolean;\n    /** Duration of animation in ms */\n    duration: number;\n    /** Easing of animation */\n    easing: string;\n    pin: EventEmitter<any>;\n    unpin: EventEmitter<any>;\n    unfix: EventEmitter<any>;\n    inner: ElementRef;\n    wrapperHeight: number;\n    currentScrollY: number;\n    lastKnownScrollY: number;\n    scrolled: boolean;\n    resizeTicking: boolean;\n    state: string;\n    translateY: string;\n    height: number;\n    scrollTicking: boolean;\n    /**\n     * provide a custom 'parent' element for scroll events.\n     * `parent` should be a function which resolves to the desired element.\n     */\n    parent: () => any;\n    scroll(): void;\n    resize(): void;\n    constructor(document: any);\n    ngOnInit(): void;\n    getParent(): any;\n    ngAfterContentInit(): void;\n    setHeightOffset(): void;\n    getScrollY(): any;\n    getViewportHeight(): any;\n    getDocumentHeight(): number;\n    getElementPhysicalHeight(elm: any): number;\n    getElementHeight(elm: any): number;\n    getScrollerPhysicalHeight(): any;\n    getScrollerHeight(): number;\n    isOutOfBound(currentScrollY: any): boolean;\n    handleScroll(): void;\n    handleResize(): void;\n    handleUnpin(): void;\n    handlePin(): void;\n    handleUnfix(): void;\n    update(): void;\n}\n"]}