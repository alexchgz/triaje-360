import { EventEmitter, Directive, ElementRef, Renderer2, NgZone, Inject, PLATFORM_ID, Input, Output, NgModule } from '@angular/core';
import elementResizeDetectorMaker from 'element-resize-detector';
import { isPlatformBrowser } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ellipsis.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Directive to truncate the contained text, if it exceeds the element's boundaries
 * and append characters (configurable, default '...') if so.
 */
var EllipsisDirective = /** @class */ (function () {
    /**
     * The directive's constructor
     */
    function EllipsisDirective(elementRef, renderer, ngZone, platformId) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.platformId = platformId;
        /**
         * The ellipsis-content html attribute
         * If passed this is used as content, else contents
         * are fetched from textContent
         */
        this.ellipsisContent = null;
        /**
         * The ellipsis-click-more html attribute
         * If anything is passed, the ellipsisCharacters will be
         * wrapped in <a></a> tags and an event handler for the
         * passed function will be added to the link
         */
        this.moreClickEmitter = new EventEmitter();
        /**
         * The ellipsis-change html attribute
         * This emits after which index the text has been truncated.
         * If it hasn't been truncated, null is emitted.
         */
        this.changeEmitter = new EventEmitter();
    }
    /**
     * Utility method to quickly find the largest number for
     * which `callback(number)` still returns true.
     * @param  max      Highest possible number
     * @param  callback Should return true as long as the passed number is valid
     * @return          Largest possible number
     */
    /**
     * Utility method to quickly find the largest number for
     * which `callback(number)` still returns true.
     * @private
     * @param {?} max      Highest possible number
     * @param {?} callback Should return true as long as the passed number is valid
     * @return {?} Largest possible number
     */
    EllipsisDirective.numericBinarySearch = /**
     * Utility method to quickly find the largest number for
     * which `callback(number)` still returns true.
     * @private
     * @param {?} max      Highest possible number
     * @param {?} callback Should return true as long as the passed number is valid
     * @return {?} Largest possible number
     */
    function (max, callback) {
        /** @type {?} */
        var low = 0;
        /** @type {?} */
        var high = max;
        /** @type {?} */
        var best = -1;
        /** @type {?} */
        var mid;
        while (low <= high) {
            // tslint:disable-next-line:no-bitwise
            mid = ~~((low + high) / 2);
            /** @type {?} */
            var result = callback(mid);
            if (!result) {
                high = mid - 1;
            }
            else {
                best = mid;
                low = mid + 1;
            }
        }
        return best;
    };
    /**
     * Convert ellipsis input to string
     * @param input string or number to be displayed as an ellipsis
     * @return      input converted to string
     */
    /**
     * Convert ellipsis input to string
     * @private
     * @param {?} input string or number to be displayed as an ellipsis
     * @return {?} input converted to string
     */
    EllipsisDirective.convertEllipsisInputToString = /**
     * Convert ellipsis input to string
     * @private
     * @param {?} input string or number to be displayed as an ellipsis
     * @return {?} input converted to string
     */
    function (input) {
        if (typeof input === 'undefined' || input === null) {
            return '';
        }
        return String(input);
    };
    /**
     * Angular's init view life cycle hook.
     * Initializes the element for displaying the ellipsis.
     */
    /**
     * Angular's init view life cycle hook.
     * Initializes the element for displaying the ellipsis.
     * @return {?}
     */
    EllipsisDirective.prototype.ngAfterViewInit = /**
     * Angular's init view life cycle hook.
     * Initializes the element for displaying the ellipsis.
     * @return {?}
     */
    function () {
        if (!isPlatformBrowser(this.platformId)) {
            // in angular universal we don't have access to the ugly
            // DOM manipulation properties we sadly need to access here,
            // so wait until we're in the browser:
            return;
        }
        // let the ellipsis characters default to '...':
        if (this.ellipsisCharacters === '') {
            this.ellipsisCharacters = '...';
        }
        // create more anchor element:
        this.moreAnchor = (/** @type {?} */ (this.renderer.createElement('a')));
        this.moreAnchor.className = 'ngx-ellipsis-more';
        this.moreAnchor.href = '#';
        this.moreAnchor.textContent = this.ellipsisCharacters;
        // perform regex replace on word boundaries:
        if (!this.ellipsisWordBoundaries) {
            this.ellipsisWordBoundaries = '';
        }
        this.ellipsisWordBoundaries = '[' + this.ellipsisWordBoundaries.replace(/\\n/, '\n').replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&') + ']';
        if (!this.ellipsisSubstrFn) {
            this.ellipsisSubstrFn = (/**
             * @param {?} str
             * @param {?} from
             * @param {?=} length
             * @return {?}
             */
            function (str, from, length) {
                return str.substr(from, length);
            });
        }
        // store the original contents of the element:
        this.elem = this.elementRef.nativeElement;
        if (typeof this.ellipsisContent !== 'undefined' && this.ellipsisContent !== null) {
            this.originalText = EllipsisDirective.convertEllipsisInputToString(this.ellipsisContent);
        }
        else if (!this.originalText) {
            this.originalText = this.elem.textContent.trim();
        }
        // add a wrapper div (required for resize events to work properly):
        this.renderer.setProperty(this.elem, 'innerHTML', '');
        this.innerElem = this.renderer.createElement('div');
        this.renderer.addClass(this.innerElem, 'ngx-ellipsis-inner');
        /** @type {?} */
        var text = this.renderer.createText(this.originalText);
        this.renderer.appendChild(this.innerElem, text);
        this.renderer.appendChild(this.elem, this.innerElem);
        // start listening for resize events:
        this.addResizeListener(true);
    };
    /**
     * Angular's change life cycle hook.
     * Change original text (if the ellipsis-content has been passed)
     * and re-render
     */
    /**
     * Angular's change life cycle hook.
     * Change original text (if the ellipsis-content has been passed)
     * and re-render
     * @return {?}
     */
    EllipsisDirective.prototype.ngOnChanges = /**
     * Angular's change life cycle hook.
     * Change original text (if the ellipsis-content has been passed)
     * and re-render
     * @return {?}
     */
    function () {
        if (!this.elem
            || typeof this.ellipsisContent === 'undefined'
            || this.originalText === EllipsisDirective.convertEllipsisInputToString(this.ellipsisContent)) {
            return;
        }
        this.originalText = EllipsisDirective.convertEllipsisInputToString(this.ellipsisContent);
        this.applyEllipsis();
    };
    /**
     * Angular's destroy life cycle hook.
     * Remove event listeners
     */
    /**
     * Angular's destroy life cycle hook.
     * Remove event listeners
     * @return {?}
     */
    EllipsisDirective.prototype.ngOnDestroy = /**
     * Angular's destroy life cycle hook.
     * Remove event listeners
     * @return {?}
     */
    function () {
        // In angular universal we don't have any listeners hooked up (all requiring ugly DOM manipulation methods),
        // so we only need to remove them, if we're inside the browser:
        if (isPlatformBrowser(this.platformId)) {
            this.removeAllListeners();
        }
    };
    /**
     * remove all resize listeners
     */
    /**
     * remove all resize listeners
     * @private
     * @return {?}
     */
    EllipsisDirective.prototype.removeAllListeners = /**
     * remove all resize listeners
     * @private
     * @return {?}
     */
    function () {
        if (this.destroyMoreClickListener) {
            this.destroyMoreClickListener();
        }
        this.removeResizeListener();
    };
    /**
     * Set up an event listener to call applyEllipsis() whenever a resize has been registered.
     * The type of the listener (window/element) depends on the resizeDetectionStrategy.
     * @param triggerNow=false if true, the ellipsis is applied immediately
     */
    /**
     * Set up an event listener to call applyEllipsis() whenever a resize has been registered.
     * The type of the listener (window/element) depends on the resizeDetectionStrategy.
     * @private
     * @param {?=} triggerNow
     * @return {?}
     */
    EllipsisDirective.prototype.addResizeListener = /**
     * Set up an event listener to call applyEllipsis() whenever a resize has been registered.
     * The type of the listener (window/element) depends on the resizeDetectionStrategy.
     * @private
     * @param {?=} triggerNow
     * @return {?}
     */
    function (triggerNow) {
        if (triggerNow === void 0) { triggerNow = false; }
        if (typeof (this.resizeDetectionStrategy) === 'undefined') {
            this.resizeDetectionStrategy = '';
        }
        switch (this.resizeDetectionStrategy) {
            case 'manual':
                // Users will trigger applyEllipsis via the public API
                break;
            case 'window':
                this.addWindowResizeListener();
                break;
            case 'element-resize-detector-object':
                this.addElementResizeListener(false);
                break;
            default:
                if (typeof (console) !== 'undefined') {
                    console.warn("No such ellipsis-resize-detection strategy: '" + this.resizeDetectionStrategy + "'. Using 'element-resize-detector' instead");
                }
            // eslint-disable-next-line no-fallthrough
            case 'element-resize-detector':
            case '':
                this.addElementResizeListener();
                break;
        }
        if (triggerNow && this.resizeDetectionStrategy !== 'manual') {
            this.applyEllipsis();
        }
    };
    /**
     * Set up an event listener to call applyEllipsis() whenever the window gets resized.
     */
    /**
     * Set up an event listener to call applyEllipsis() whenever the window gets resized.
     * @private
     * @return {?}
     */
    EllipsisDirective.prototype.addWindowResizeListener = /**
     * Set up an event listener to call applyEllipsis() whenever the window gets resized.
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.removeWindowResizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        function () {
            _this.ngZone.run((/**
             * @return {?}
             */
            function () {
                _this.applyEllipsis();
            }));
        }));
    };
    /**
     * Set up an event listener to call applyEllipsis() whenever the element
     * has been resized.
     * @param scrollStrategy=true Use the default elementResizeDetector's - strategy - s. https://github.com/wnr/element-resize-detector
     */
    /**
     * Set up an event listener to call applyEllipsis() whenever the element
     * has been resized.
     * @private
     * @param {?=} scrollStrategy
     * @return {?}
     */
    EllipsisDirective.prototype.addElementResizeListener = /**
     * Set up an event listener to call applyEllipsis() whenever the element
     * has been resized.
     * @private
     * @param {?=} scrollStrategy
     * @return {?}
     */
    function (scrollStrategy) {
        var _this = this;
        if (scrollStrategy === void 0) { scrollStrategy = true; }
        if (!EllipsisDirective.elementResizeDetector) {
            EllipsisDirective.elementResizeDetector = elementResizeDetectorMaker({ strategy: scrollStrategy ? 'scroll' : 'object' });
        }
        /** @type {?} */
        var firstEvent = true;
        EllipsisDirective.elementResizeDetector.listenTo(this.elementRef.nativeElement, (/**
         * @return {?}
         */
        function () {
            if (firstEvent) {
                // elementResizeDetector fires the event directly after re-attaching the listener
                // -> discard that first event:
                firstEvent = false;
                return;
            }
            _this.applyEllipsis();
        }));
    };
    /**
     * Stop listening for any resize event.
     */
    /**
     * Stop listening for any resize event.
     * @private
     * @return {?}
     */
    EllipsisDirective.prototype.removeResizeListener = /**
     * Stop listening for any resize event.
     * @private
     * @return {?}
     */
    function () {
        if (this.resizeDetectionStrategy !== 'window') {
            if (EllipsisDirective.elementResizeDetector && this.elem) {
                EllipsisDirective.elementResizeDetector.removeAllListeners(this.elem);
            }
        }
        else {
            this.removeWindowResizeListener();
        }
    };
    /**
     * Get the original text's truncated version. If the text really needed to
     * be truncated, this.ellipsisCharacters will be appended.
     * @param max the maximum length the text may have
     * @return string       the truncated string
     */
    /**
     * Get the original text's truncated version. If the text really needed to
     * be truncated, this.ellipsisCharacters will be appended.
     * @private
     * @param {?} max the maximum length the text may have
     * @return {?} string       the truncated string
     */
    EllipsisDirective.prototype.getTruncatedText = /**
     * Get the original text's truncated version. If the text really needed to
     * be truncated, this.ellipsisCharacters will be appended.
     * @private
     * @param {?} max the maximum length the text may have
     * @return {?} string       the truncated string
     */
    function (max) {
        if (!this.originalText || this.originalText.length <= max) {
            return this.originalText;
        }
        /** @type {?} */
        var truncatedText = this.ellipsisSubstrFn(this.originalText, 0, max);
        if (this.ellipsisWordBoundaries === '[]' || this.originalText.charAt(max).match(this.ellipsisWordBoundaries)) {
            return truncatedText;
        }
        /** @type {?} */
        var i = max - 1;
        while (i > 0 && !truncatedText.charAt(i).match(this.ellipsisWordBoundaries)) {
            i--;
        }
        return this.ellipsisSubstrFn(truncatedText, 0, i);
    };
    /**
     * Set the truncated text to be displayed in the inner div
     * @param max the maximum length the text may have
     * @param addMoreListener=false listen for click on the ellipsisCharacters anchor tag if the text has been truncated
     * @returns length of remaining text (excluding the ellipsisCharacters, if they were added)
     */
    /**
     * Set the truncated text to be displayed in the inner div
     * @private
     * @param {?} max the maximum length the text may have
     * @param {?=} addMoreListener
     * @return {?} length of remaining text (excluding the ellipsisCharacters, if they were added)
     */
    EllipsisDirective.prototype.truncateText = /**
     * Set the truncated text to be displayed in the inner div
     * @private
     * @param {?} max the maximum length the text may have
     * @param {?=} addMoreListener
     * @return {?} length of remaining text (excluding the ellipsisCharacters, if they were added)
     */
    function (max, addMoreListener) {
        var _this = this;
        if (addMoreListener === void 0) { addMoreListener = false; }
        /** @type {?} */
        var text = this.getTruncatedText(max);
        /** @type {?} */
        var truncatedLength = text.length;
        /** @type {?} */
        var textTruncated = (truncatedLength !== this.originalText.length);
        if (textTruncated && !this.showMoreLink) {
            text += this.ellipsisCharacters;
        }
        this.renderer.setProperty(this.innerElem, 'textContent', text);
        if (textTruncated && this.showMoreLink) {
            this.renderer.appendChild(this.innerElem, this.moreAnchor);
        }
        // Remove any existing more click listener:
        if (this.destroyMoreClickListener) {
            this.destroyMoreClickListener();
            this.destroyMoreClickListener = null;
        }
        // If the text has been truncated, add a more click listener:
        if (addMoreListener && textTruncated) {
            this.destroyMoreClickListener = this.renderer.listen(this.moreAnchor, 'click', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (!e.target || ((/** @type {?} */ (e.target))).className !== 'ngx-ellipsis-more') {
                    return;
                }
                e.preventDefault();
                _this.moreClickEmitter.emit(e);
            }));
        }
        return truncatedLength;
    };
    /**
     * Display ellipsis in the inner div if the text would exceed the boundaries
     */
    /**
     * Display ellipsis in the inner div if the text would exceed the boundaries
     * @return {?}
     */
    EllipsisDirective.prototype.applyEllipsis = /**
     * Display ellipsis in the inner div if the text would exceed the boundaries
     * @return {?}
     */
    function () {
        var _this = this;
        // Remove the resize listener as changing the contained text would trigger events:
        this.removeResizeListener();
        // Find the best length by trial and error:
        /** @type {?} */
        var maxLength = EllipsisDirective.numericBinarySearch(this.originalText.length, (/**
         * @param {?} curLength
         * @return {?}
         */
        function (curLength) {
            _this.truncateText(curLength);
            return !_this.isOverflowing;
        }));
        // Apply the best length:
        /** @type {?} */
        var finalLength = this.truncateText(maxLength, this.showMoreLink);
        // Re-attach the resize listener:
        this.addResizeListener();
        // Emit change event:
        if (this.changeEmitter.observers.length > 0) {
            this.changeEmitter.emit((this.originalText.length === finalLength) ? null : finalLength);
        }
    };
    Object.defineProperty(EllipsisDirective.prototype, "isOverflowing", {
        /**
         * Whether the text is exceeding the element's boundaries or not
         */
        get: /**
         * Whether the text is exceeding the element's boundaries or not
         * @private
         * @return {?}
         */
        function () {
            // Enforce hidden overflow (required to compare client width/height with scroll width/height)
            /** @type {?} */
            var currentOverflow = this.elem.style.overflow;
            if (!currentOverflow || currentOverflow === 'visible') {
                this.elem.style.overflow = 'hidden';
            }
            /** @type {?} */
            var isOverflowing = this.elem.clientWidth < this.elem.scrollWidth - 1 || this.elem.clientHeight < this.elem.scrollHeight - 1;
            // Reset overflow to the original configuration:
            this.elem.style.overflow = currentOverflow;
            return isOverflowing;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EllipsisDirective.prototype, "showMoreLink", {
        /**
         * Whether the `ellipsisCharacters` are to be wrapped inside an anchor tag (if they are shown at all)
         */
        get: /**
         * Whether the `ellipsisCharacters` are to be wrapped inside an anchor tag (if they are shown at all)
         * @private
         * @return {?}
         */
        function () {
            return (this.moreClickEmitter.observers.length > 0);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Instance of https://github.com/wnr/element-resize-detector
     */
    EllipsisDirective.elementResizeDetector = null;
    EllipsisDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ellipsis]',
                    exportAs: 'ellipsis'
                },] }
    ];
    /** @nocollapse */
    EllipsisDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgZone },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    EllipsisDirective.propDecorators = {
        ellipsisCharacters: [{ type: Input, args: ['ellipsis',] }],
        ellipsisContent: [{ type: Input, args: ['ellipsis-content',] }],
        ellipsisWordBoundaries: [{ type: Input, args: ['ellipsis-word-boundaries',] }],
        ellipsisSubstrFn: [{ type: Input, args: ['ellipsis-substr-fn',] }],
        resizeDetectionStrategy: [{ type: Input, args: ['ellipsis-resize-detection',] }],
        moreClickEmitter: [{ type: Output, args: ['ellipsis-click-more',] }],
        changeEmitter: [{ type: Output, args: ['ellipsis-change',] }]
    };
    return EllipsisDirective;
}());
if (false) {
    /**
     * Instance of https://github.com/wnr/element-resize-detector
     * @type {?}
     * @private
     */
    EllipsisDirective.elementResizeDetector;
    /**
     * The original text (not truncated yet)
     * @type {?}
     * @private
     */
    EllipsisDirective.prototype.originalText;
    /**
     * The referenced element
     * @type {?}
     * @private
     */
    EllipsisDirective.prototype.elem;
    /**
     * Inner div element (will be auto-created)
     * @type {?}
     * @private
     */
    EllipsisDirective.prototype.innerElem;
    /**
     * Anchor tag wrapping the `ellipsisCharacters`
     * @type {?}
     * @private
     */
    EllipsisDirective.prototype.moreAnchor;
    /**
     * Remove function for the currently registered click listener
     * on the link `this.ellipsisCharacters` are wrapped in.
     * @type {?}
     * @private
     */
    EllipsisDirective.prototype.destroyMoreClickListener;
    /**
     * Remove the window listener registered by a previous call to `addWindowResizeListener()`.
     * @type {?}
     * @private
     */
    EllipsisDirective.prototype.removeWindowResizeListener;
    /**
     * The ellipsis html attribute
     * If anything is passed, this will be used as a string to append to
     * the truncated contents.
     * Else '...' will be appended.
     * @type {?}
     */
    EllipsisDirective.prototype.ellipsisCharacters;
    /**
     * The ellipsis-content html attribute
     * If passed this is used as content, else contents
     * are fetched from textContent
     * @type {?}
     */
    EllipsisDirective.prototype.ellipsisContent;
    /**
     * The ellipsis-word-boundaries html attribute
     * If anything is passed, each character will be interpreted
     * as a word boundary at which the text may be truncated.
     * Else the text may be truncated at any character.
     * @type {?}
     */
    EllipsisDirective.prototype.ellipsisWordBoundaries;
    /**
     * Function to use for string splitting. Defaults to the native `String#substr`.
     * (This may for example be used to avoid splitting surrogate pairs- used by some emojis -
     * by providing a lib such as runes.)
     * @type {?}
     */
    EllipsisDirective.prototype.ellipsisSubstrFn;
    /**
     * The ellipsis-resize-detection html attribute
     * Algorithm to use to detect element/window resize - any of the following:
     * 'element-resize-detector': (default) Use https://github.com/wnr/element-resize-detector with its 'scroll' strategy
     * 'element-resize-detector-object': Use https://github.com/wnr/element-resize-detector with its 'object' strategy (deprecated)
     * 'window': Only check if the whole window has been resized/changed orientation by using angular's built-in HostListener
     * @type {?}
     */
    EllipsisDirective.prototype.resizeDetectionStrategy;
    /**
     * The ellipsis-click-more html attribute
     * If anything is passed, the ellipsisCharacters will be
     * wrapped in <a></a> tags and an event handler for the
     * passed function will be added to the link
     * @type {?}
     */
    EllipsisDirective.prototype.moreClickEmitter;
    /**
     * The ellipsis-change html attribute
     * This emits after which index the text has been truncated.
     * If it hasn't been truncated, null is emitted.
     * @type {?}
     */
    EllipsisDirective.prototype.changeEmitter;
    /**
     * @type {?}
     * @private
     */
    EllipsisDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    EllipsisDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    EllipsisDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    EllipsisDirective.prototype.platformId;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ellipsis.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EllipsisModule = /** @class */ (function () {
    function EllipsisModule() {
    }
    EllipsisModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [EllipsisDirective],
                    exports: [EllipsisDirective]
                },] }
    ];
    return EllipsisModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ngx-ellipsis.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { EllipsisDirective, EllipsisModule };
//# sourceMappingURL=ngx-ellipsis.js.map
