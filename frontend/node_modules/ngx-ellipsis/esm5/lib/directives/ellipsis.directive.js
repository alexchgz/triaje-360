/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ellipsis.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Input, Output, EventEmitter, NgZone, Inject, PLATFORM_ID } from '@angular/core';
import elementResizeDetectorMaker from 'element-resize-detector';
import { isPlatformBrowser } from '@angular/common';
/**
 * Directive to truncate the contained text, if it exceeds the element's boundaries
 * and append characters (configurable, default '...') if so.
 */
var EllipsisDirective = /** @class */ (function () {
    /**
     * The directive's constructor
     */
    function EllipsisDirective(elementRef, renderer, ngZone, platformId) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.platformId = platformId;
        /**
         * The ellipsis-content html attribute
         * If passed this is used as content, else contents
         * are fetched from textContent
         */
        this.ellipsisContent = null;
        /**
         * The ellipsis-click-more html attribute
         * If anything is passed, the ellipsisCharacters will be
         * wrapped in <a></a> tags and an event handler for the
         * passed function will be added to the link
         */
        this.moreClickEmitter = new EventEmitter();
        /**
         * The ellipsis-change html attribute
         * This emits after which index the text has been truncated.
         * If it hasn't been truncated, null is emitted.
         */
        this.changeEmitter = new EventEmitter();
    }
    /**
     * Utility method to quickly find the largest number for
     * which `callback(number)` still returns true.
     * @param  max      Highest possible number
     * @param  callback Should return true as long as the passed number is valid
     * @return          Largest possible number
     */
    /**
     * Utility method to quickly find the largest number for
     * which `callback(number)` still returns true.
     * @private
     * @param {?} max      Highest possible number
     * @param {?} callback Should return true as long as the passed number is valid
     * @return {?} Largest possible number
     */
    EllipsisDirective.numericBinarySearch = /**
     * Utility method to quickly find the largest number for
     * which `callback(number)` still returns true.
     * @private
     * @param {?} max      Highest possible number
     * @param {?} callback Should return true as long as the passed number is valid
     * @return {?} Largest possible number
     */
    function (max, callback) {
        /** @type {?} */
        var low = 0;
        /** @type {?} */
        var high = max;
        /** @type {?} */
        var best = -1;
        /** @type {?} */
        var mid;
        while (low <= high) {
            // tslint:disable-next-line:no-bitwise
            mid = ~~((low + high) / 2);
            /** @type {?} */
            var result = callback(mid);
            if (!result) {
                high = mid - 1;
            }
            else {
                best = mid;
                low = mid + 1;
            }
        }
        return best;
    };
    /**
     * Convert ellipsis input to string
     * @param input string or number to be displayed as an ellipsis
     * @return      input converted to string
     */
    /**
     * Convert ellipsis input to string
     * @private
     * @param {?} input string or number to be displayed as an ellipsis
     * @return {?} input converted to string
     */
    EllipsisDirective.convertEllipsisInputToString = /**
     * Convert ellipsis input to string
     * @private
     * @param {?} input string or number to be displayed as an ellipsis
     * @return {?} input converted to string
     */
    function (input) {
        if (typeof input === 'undefined' || input === null) {
            return '';
        }
        return String(input);
    };
    /**
     * Angular's init view life cycle hook.
     * Initializes the element for displaying the ellipsis.
     */
    /**
     * Angular's init view life cycle hook.
     * Initializes the element for displaying the ellipsis.
     * @return {?}
     */
    EllipsisDirective.prototype.ngAfterViewInit = /**
     * Angular's init view life cycle hook.
     * Initializes the element for displaying the ellipsis.
     * @return {?}
     */
    function () {
        if (!isPlatformBrowser(this.platformId)) {
            // in angular universal we don't have access to the ugly
            // DOM manipulation properties we sadly need to access here,
            // so wait until we're in the browser:
            return;
        }
        // let the ellipsis characters default to '...':
        if (this.ellipsisCharacters === '') {
            this.ellipsisCharacters = '...';
        }
        // create more anchor element:
        this.moreAnchor = (/** @type {?} */ (this.renderer.createElement('a')));
        this.moreAnchor.className = 'ngx-ellipsis-more';
        this.moreAnchor.href = '#';
        this.moreAnchor.textContent = this.ellipsisCharacters;
        // perform regex replace on word boundaries:
        if (!this.ellipsisWordBoundaries) {
            this.ellipsisWordBoundaries = '';
        }
        this.ellipsisWordBoundaries = '[' + this.ellipsisWordBoundaries.replace(/\\n/, '\n').replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&') + ']';
        if (!this.ellipsisSubstrFn) {
            this.ellipsisSubstrFn = (/**
             * @param {?} str
             * @param {?} from
             * @param {?=} length
             * @return {?}
             */
            function (str, from, length) {
                return str.substr(from, length);
            });
        }
        // store the original contents of the element:
        this.elem = this.elementRef.nativeElement;
        if (typeof this.ellipsisContent !== 'undefined' && this.ellipsisContent !== null) {
            this.originalText = EllipsisDirective.convertEllipsisInputToString(this.ellipsisContent);
        }
        else if (!this.originalText) {
            this.originalText = this.elem.textContent.trim();
        }
        // add a wrapper div (required for resize events to work properly):
        this.renderer.setProperty(this.elem, 'innerHTML', '');
        this.innerElem = this.renderer.createElement('div');
        this.renderer.addClass(this.innerElem, 'ngx-ellipsis-inner');
        /** @type {?} */
        var text = this.renderer.createText(this.originalText);
        this.renderer.appendChild(this.innerElem, text);
        this.renderer.appendChild(this.elem, this.innerElem);
        // start listening for resize events:
        this.addResizeListener(true);
    };
    /**
     * Angular's change life cycle hook.
     * Change original text (if the ellipsis-content has been passed)
     * and re-render
     */
    /**
     * Angular's change life cycle hook.
     * Change original text (if the ellipsis-content has been passed)
     * and re-render
     * @return {?}
     */
    EllipsisDirective.prototype.ngOnChanges = /**
     * Angular's change life cycle hook.
     * Change original text (if the ellipsis-content has been passed)
     * and re-render
     * @return {?}
     */
    function () {
        if (!this.elem
            || typeof this.ellipsisContent === 'undefined'
            || this.originalText === EllipsisDirective.convertEllipsisInputToString(this.ellipsisContent)) {
            return;
        }
        this.originalText = EllipsisDirective.convertEllipsisInputToString(this.ellipsisContent);
        this.applyEllipsis();
    };
    /**
     * Angular's destroy life cycle hook.
     * Remove event listeners
     */
    /**
     * Angular's destroy life cycle hook.
     * Remove event listeners
     * @return {?}
     */
    EllipsisDirective.prototype.ngOnDestroy = /**
     * Angular's destroy life cycle hook.
     * Remove event listeners
     * @return {?}
     */
    function () {
        // In angular universal we don't have any listeners hooked up (all requiring ugly DOM manipulation methods),
        // so we only need to remove them, if we're inside the browser:
        if (isPlatformBrowser(this.platformId)) {
            this.removeAllListeners();
        }
    };
    /**
     * remove all resize listeners
     */
    /**
     * remove all resize listeners
     * @private
     * @return {?}
     */
    EllipsisDirective.prototype.removeAllListeners = /**
     * remove all resize listeners
     * @private
     * @return {?}
     */
    function () {
        if (this.destroyMoreClickListener) {
            this.destroyMoreClickListener();
        }
        this.removeResizeListener();
    };
    /**
     * Set up an event listener to call applyEllipsis() whenever a resize has been registered.
     * The type of the listener (window/element) depends on the resizeDetectionStrategy.
     * @param triggerNow=false if true, the ellipsis is applied immediately
     */
    /**
     * Set up an event listener to call applyEllipsis() whenever a resize has been registered.
     * The type of the listener (window/element) depends on the resizeDetectionStrategy.
     * @private
     * @param {?=} triggerNow
     * @return {?}
     */
    EllipsisDirective.prototype.addResizeListener = /**
     * Set up an event listener to call applyEllipsis() whenever a resize has been registered.
     * The type of the listener (window/element) depends on the resizeDetectionStrategy.
     * @private
     * @param {?=} triggerNow
     * @return {?}
     */
    function (triggerNow) {
        if (triggerNow === void 0) { triggerNow = false; }
        if (typeof (this.resizeDetectionStrategy) === 'undefined') {
            this.resizeDetectionStrategy = '';
        }
        switch (this.resizeDetectionStrategy) {
            case 'manual':
                // Users will trigger applyEllipsis via the public API
                break;
            case 'window':
                this.addWindowResizeListener();
                break;
            case 'element-resize-detector-object':
                this.addElementResizeListener(false);
                break;
            default:
                if (typeof (console) !== 'undefined') {
                    console.warn("No such ellipsis-resize-detection strategy: '" + this.resizeDetectionStrategy + "'. Using 'element-resize-detector' instead");
                }
            // eslint-disable-next-line no-fallthrough
            case 'element-resize-detector':
            case '':
                this.addElementResizeListener();
                break;
        }
        if (triggerNow && this.resizeDetectionStrategy !== 'manual') {
            this.applyEllipsis();
        }
    };
    /**
     * Set up an event listener to call applyEllipsis() whenever the window gets resized.
     */
    /**
     * Set up an event listener to call applyEllipsis() whenever the window gets resized.
     * @private
     * @return {?}
     */
    EllipsisDirective.prototype.addWindowResizeListener = /**
     * Set up an event listener to call applyEllipsis() whenever the window gets resized.
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.removeWindowResizeListener = this.renderer.listen('window', 'resize', (/**
         * @return {?}
         */
        function () {
            _this.ngZone.run((/**
             * @return {?}
             */
            function () {
                _this.applyEllipsis();
            }));
        }));
    };
    /**
     * Set up an event listener to call applyEllipsis() whenever the element
     * has been resized.
     * @param scrollStrategy=true Use the default elementResizeDetector's - strategy - s. https://github.com/wnr/element-resize-detector
     */
    /**
     * Set up an event listener to call applyEllipsis() whenever the element
     * has been resized.
     * @private
     * @param {?=} scrollStrategy
     * @return {?}
     */
    EllipsisDirective.prototype.addElementResizeListener = /**
     * Set up an event listener to call applyEllipsis() whenever the element
     * has been resized.
     * @private
     * @param {?=} scrollStrategy
     * @return {?}
     */
    function (scrollStrategy) {
        var _this = this;
        if (scrollStrategy === void 0) { scrollStrategy = true; }
        if (!EllipsisDirective.elementResizeDetector) {
            EllipsisDirective.elementResizeDetector = elementResizeDetectorMaker({ strategy: scrollStrategy ? 'scroll' : 'object' });
        }
        /** @type {?} */
        var firstEvent = true;
        EllipsisDirective.elementResizeDetector.listenTo(this.elementRef.nativeElement, (/**
         * @return {?}
         */
        function () {
            if (firstEvent) {
                // elementResizeDetector fires the event directly after re-attaching the listener
                // -> discard that first event:
                firstEvent = false;
                return;
            }
            _this.applyEllipsis();
        }));
    };
    /**
     * Stop listening for any resize event.
     */
    /**
     * Stop listening for any resize event.
     * @private
     * @return {?}
     */
    EllipsisDirective.prototype.removeResizeListener = /**
     * Stop listening for any resize event.
     * @private
     * @return {?}
     */
    function () {
        if (this.resizeDetectionStrategy !== 'window') {
            if (EllipsisDirective.elementResizeDetector && this.elem) {
                EllipsisDirective.elementResizeDetector.removeAllListeners(this.elem);
            }
        }
        else {
            this.removeWindowResizeListener();
        }
    };
    /**
     * Get the original text's truncated version. If the text really needed to
     * be truncated, this.ellipsisCharacters will be appended.
     * @param max the maximum length the text may have
     * @return string       the truncated string
     */
    /**
     * Get the original text's truncated version. If the text really needed to
     * be truncated, this.ellipsisCharacters will be appended.
     * @private
     * @param {?} max the maximum length the text may have
     * @return {?} string       the truncated string
     */
    EllipsisDirective.prototype.getTruncatedText = /**
     * Get the original text's truncated version. If the text really needed to
     * be truncated, this.ellipsisCharacters will be appended.
     * @private
     * @param {?} max the maximum length the text may have
     * @return {?} string       the truncated string
     */
    function (max) {
        if (!this.originalText || this.originalText.length <= max) {
            return this.originalText;
        }
        /** @type {?} */
        var truncatedText = this.ellipsisSubstrFn(this.originalText, 0, max);
        if (this.ellipsisWordBoundaries === '[]' || this.originalText.charAt(max).match(this.ellipsisWordBoundaries)) {
            return truncatedText;
        }
        /** @type {?} */
        var i = max - 1;
        while (i > 0 && !truncatedText.charAt(i).match(this.ellipsisWordBoundaries)) {
            i--;
        }
        return this.ellipsisSubstrFn(truncatedText, 0, i);
    };
    /**
     * Set the truncated text to be displayed in the inner div
     * @param max the maximum length the text may have
     * @param addMoreListener=false listen for click on the ellipsisCharacters anchor tag if the text has been truncated
     * @returns length of remaining text (excluding the ellipsisCharacters, if they were added)
     */
    /**
     * Set the truncated text to be displayed in the inner div
     * @private
     * @param {?} max the maximum length the text may have
     * @param {?=} addMoreListener
     * @return {?} length of remaining text (excluding the ellipsisCharacters, if they were added)
     */
    EllipsisDirective.prototype.truncateText = /**
     * Set the truncated text to be displayed in the inner div
     * @private
     * @param {?} max the maximum length the text may have
     * @param {?=} addMoreListener
     * @return {?} length of remaining text (excluding the ellipsisCharacters, if they were added)
     */
    function (max, addMoreListener) {
        var _this = this;
        if (addMoreListener === void 0) { addMoreListener = false; }
        /** @type {?} */
        var text = this.getTruncatedText(max);
        /** @type {?} */
        var truncatedLength = text.length;
        /** @type {?} */
        var textTruncated = (truncatedLength !== this.originalText.length);
        if (textTruncated && !this.showMoreLink) {
            text += this.ellipsisCharacters;
        }
        this.renderer.setProperty(this.innerElem, 'textContent', text);
        if (textTruncated && this.showMoreLink) {
            this.renderer.appendChild(this.innerElem, this.moreAnchor);
        }
        // Remove any existing more click listener:
        if (this.destroyMoreClickListener) {
            this.destroyMoreClickListener();
            this.destroyMoreClickListener = null;
        }
        // If the text has been truncated, add a more click listener:
        if (addMoreListener && textTruncated) {
            this.destroyMoreClickListener = this.renderer.listen(this.moreAnchor, 'click', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (!e.target || ((/** @type {?} */ (e.target))).className !== 'ngx-ellipsis-more') {
                    return;
                }
                e.preventDefault();
                _this.moreClickEmitter.emit(e);
            }));
        }
        return truncatedLength;
    };
    /**
     * Display ellipsis in the inner div if the text would exceed the boundaries
     */
    /**
     * Display ellipsis in the inner div if the text would exceed the boundaries
     * @return {?}
     */
    EllipsisDirective.prototype.applyEllipsis = /**
     * Display ellipsis in the inner div if the text would exceed the boundaries
     * @return {?}
     */
    function () {
        var _this = this;
        // Remove the resize listener as changing the contained text would trigger events:
        this.removeResizeListener();
        // Find the best length by trial and error:
        /** @type {?} */
        var maxLength = EllipsisDirective.numericBinarySearch(this.originalText.length, (/**
         * @param {?} curLength
         * @return {?}
         */
        function (curLength) {
            _this.truncateText(curLength);
            return !_this.isOverflowing;
        }));
        // Apply the best length:
        /** @type {?} */
        var finalLength = this.truncateText(maxLength, this.showMoreLink);
        // Re-attach the resize listener:
        this.addResizeListener();
        // Emit change event:
        if (this.changeEmitter.observers.length > 0) {
            this.changeEmitter.emit((this.originalText.length === finalLength) ? null : finalLength);
        }
    };
    Object.defineProperty(EllipsisDirective.prototype, "isOverflowing", {
        /**
         * Whether the text is exceeding the element's boundaries or not
         */
        get: /**
         * Whether the text is exceeding the element's boundaries or not
         * @private
         * @return {?}
         */
        function () {
            // Enforce hidden overflow (required to compare client width/height with scroll width/height)
            /** @type {?} */
            var currentOverflow = this.elem.style.overflow;
            if (!currentOverflow || currentOverflow === 'visible') {
                this.elem.style.overflow = 'hidden';
            }
            /** @type {?} */
            var isOverflowing = this.elem.clientWidth < this.elem.scrollWidth - 1 || this.elem.clientHeight < this.elem.scrollHeight - 1;
            // Reset overflow to the original configuration:
            this.elem.style.overflow = currentOverflow;
            return isOverflowing;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EllipsisDirective.prototype, "showMoreLink", {
        /**
         * Whether the `ellipsisCharacters` are to be wrapped inside an anchor tag (if they are shown at all)
         */
        get: /**
         * Whether the `ellipsisCharacters` are to be wrapped inside an anchor tag (if they are shown at all)
         * @private
         * @return {?}
         */
        function () {
            return (this.moreClickEmitter.observers.length > 0);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Instance of https://github.com/wnr/element-resize-detector
     */
    EllipsisDirective.elementResizeDetector = null;
    EllipsisDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ellipsis]',
                    exportAs: 'ellipsis'
                },] }
    ];
    /** @nocollapse */
    EllipsisDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgZone },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    EllipsisDirective.propDecorators = {
        ellipsisCharacters: [{ type: Input, args: ['ellipsis',] }],
        ellipsisContent: [{ type: Input, args: ['ellipsis-content',] }],
        ellipsisWordBoundaries: [{ type: Input, args: ['ellipsis-word-boundaries',] }],
        ellipsisSubstrFn: [{ type: Input, args: ['ellipsis-substr-fn',] }],
        resizeDetectionStrategy: [{ type: Input, args: ['ellipsis-resize-detection',] }],
        moreClickEmitter: [{ type: Output, args: ['ellipsis-click-more',] }],
        changeEmitter: [{ type: Output, args: ['ellipsis-change',] }]
    };
    return EllipsisDirective;
}());
export { EllipsisDirective };
if (false) {
    /**
     * Instance of https://github.com/wnr/element-resize-detector
     * @type {?}
     * @private
     */
    EllipsisDirective.elementResizeDetector;
    /**
     * The original text (not truncated yet)
     * @type {?}
     * @private
     */
    EllipsisDirective.prototype.originalText;
    /**
     * The referenced element
     * @type {?}
     * @private
     */
    EllipsisDirective.prototype.elem;
    /**
     * Inner div element (will be auto-created)
     * @type {?}
     * @private
     */
    EllipsisDirective.prototype.innerElem;
    /**
     * Anchor tag wrapping the `ellipsisCharacters`
     * @type {?}
     * @private
     */
    EllipsisDirective.prototype.moreAnchor;
    /**
     * Remove function for the currently registered click listener
     * on the link `this.ellipsisCharacters` are wrapped in.
     * @type {?}
     * @private
     */
    EllipsisDirective.prototype.destroyMoreClickListener;
    /**
     * Remove the window listener registered by a previous call to `addWindowResizeListener()`.
     * @type {?}
     * @private
     */
    EllipsisDirective.prototype.removeWindowResizeListener;
    /**
     * The ellipsis html attribute
     * If anything is passed, this will be used as a string to append to
     * the truncated contents.
     * Else '...' will be appended.
     * @type {?}
     */
    EllipsisDirective.prototype.ellipsisCharacters;
    /**
     * The ellipsis-content html attribute
     * If passed this is used as content, else contents
     * are fetched from textContent
     * @type {?}
     */
    EllipsisDirective.prototype.ellipsisContent;
    /**
     * The ellipsis-word-boundaries html attribute
     * If anything is passed, each character will be interpreted
     * as a word boundary at which the text may be truncated.
     * Else the text may be truncated at any character.
     * @type {?}
     */
    EllipsisDirective.prototype.ellipsisWordBoundaries;
    /**
     * Function to use for string splitting. Defaults to the native `String#substr`.
     * (This may for example be used to avoid splitting surrogate pairs- used by some emojis -
     * by providing a lib such as runes.)
     * @type {?}
     */
    EllipsisDirective.prototype.ellipsisSubstrFn;
    /**
     * The ellipsis-resize-detection html attribute
     * Algorithm to use to detect element/window resize - any of the following:
     * 'element-resize-detector': (default) Use https://github.com/wnr/element-resize-detector with its 'scroll' strategy
     * 'element-resize-detector-object': Use https://github.com/wnr/element-resize-detector with its 'object' strategy (deprecated)
     * 'window': Only check if the whole window has been resized/changed orientation by using angular's built-in HostListener
     * @type {?}
     */
    EllipsisDirective.prototype.resizeDetectionStrategy;
    /**
     * The ellipsis-click-more html attribute
     * If anything is passed, the ellipsisCharacters will be
     * wrapped in <a></a> tags and an event handler for the
     * passed function will be added to the link
     * @type {?}
     */
    EllipsisDirective.prototype.moreClickEmitter;
    /**
     * The ellipsis-change html attribute
     * This emits after which index the text has been truncated.
     * If it hasn't been truncated, null is emitted.
     * @type {?}
     */
    EllipsisDirective.prototype.changeEmitter;
    /**
     * @type {?}
     * @private
     */
    EllipsisDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    EllipsisDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    EllipsisDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    EllipsisDirective.prototype.platformId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxsaXBzaXMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWVsbGlwc2lzLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvZWxsaXBzaXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUNaLE1BQU0sRUFJTixNQUFNLEVBQ04sV0FBVyxFQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sMEJBQTBCLE1BQU0seUJBQXlCLENBQUM7QUFDakUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7O0FBTXBEO0lBMElFOztPQUVHO0lBQ0gsMkJBQ1UsVUFBbUMsRUFDbkMsUUFBbUIsRUFDbkIsTUFBYyxFQUNPLFVBQWtCO1FBSHZDLGVBQVUsR0FBVixVQUFVLENBQXlCO1FBQ25DLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNPLGVBQVUsR0FBVixVQUFVLENBQVE7Ozs7OztRQTNGdEIsb0JBQWUsR0FBb0IsSUFBSSxDQUFDOzs7Ozs7O1FBaUNwQyxxQkFBZ0IsR0FBNkIsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7Ozs7O1FBUXBFLGtCQUFhLEdBQXlCLElBQUksWUFBWSxFQUFFLENBQUM7SUFtRGhGLENBQUM7SUFqREw7Ozs7OztPQU1HOzs7Ozs7Ozs7SUFDWSxxQ0FBbUI7Ozs7Ozs7O0lBQWxDLFVBQW1DLEdBQVcsRUFBRSxRQUFnQzs7WUFDMUUsR0FBRyxHQUFHLENBQUM7O1lBQ1AsSUFBSSxHQUFHLEdBQUc7O1lBQ1YsSUFBSSxHQUFHLENBQUMsQ0FBQzs7WUFDVCxHQUFXO1FBRWYsT0FBTyxHQUFHLElBQUksSUFBSSxFQUFFO1lBQ2xCLHNDQUFzQztZQUN0QyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxH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Ozs7Ozs7SUFRL0YsMENBQW9GOzs7OztJQStDbEYsdUNBQTJDOzs7OztJQUMzQyxxQ0FBMkI7Ozs7O0lBQzNCLG1DQUFzQjs7Ozs7SUFDdEIsdUNBQStDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBSZW5kZXJlcjIsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgTmdab25lLFxuICBPbkNoYW5nZXMsXG4gIEFmdGVyVmlld0luaXQsXG4gIE9uRGVzdHJveSxcbiAgSW5qZWN0LFxuICBQTEFURk9STV9JRFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBlbGVtZW50UmVzaXplRGV0ZWN0b3JNYWtlciBmcm9tICdlbGVtZW50LXJlc2l6ZS1kZXRlY3Rvcic7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbi8qKlxuICogRGlyZWN0aXZlIHRvIHRydW5jYXRlIHRoZSBjb250YWluZWQgdGV4dCwgaWYgaXQgZXhjZWVkcyB0aGUgZWxlbWVudCdzIGJvdW5kYXJpZXNcbiAqIGFuZCBhcHBlbmQgY2hhcmFjdGVycyAoY29uZmlndXJhYmxlLCBkZWZhdWx0ICcuLi4nKSBpZiBzby5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2VsbGlwc2lzXScsXG4gIGV4cG9ydEFzOiAnZWxsaXBzaXMnXG59KVxuZXhwb3J0IGNsYXNzIEVsbGlwc2lzRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQge1xuICAvKipcbiAgICogSW5zdGFuY2Ugb2YgaHR0cHM6Ly9naXRodWIuY29tL3duci9lbGVtZW50LXJlc2l6ZS1kZXRlY3RvclxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgZWxlbWVudFJlc2l6ZURldGVjdG9yOiBlbGVtZW50UmVzaXplRGV0ZWN0b3JNYWtlci5FcmQgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgb3JpZ2luYWwgdGV4dCAobm90IHRydW5jYXRlZCB5ZXQpXG4gICAqL1xuICBwcml2YXRlIG9yaWdpbmFsVGV4dDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgcmVmZXJlbmNlZCBlbGVtZW50XG4gICAqL1xuICBwcml2YXRlIGVsZW06IGFueTtcblxuICAvKipcbiAgICogSW5uZXIgZGl2IGVsZW1lbnQgKHdpbGwgYmUgYXV0by1jcmVhdGVkKVxuICAgKi9cbiAgcHJpdmF0ZSBpbm5lckVsZW06IGFueTtcblxuICAvKipcbiAgICogQW5jaG9yIHRhZyB3cmFwcGluZyB0aGUgYGVsbGlwc2lzQ2hhcmFjdGVyc2BcbiAgICovXG4gIHByaXZhdGUgbW9yZUFuY2hvcjogSFRNTEFuY2hvckVsZW1lbnQ7XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBmdW5jdGlvbiBmb3IgdGhlIGN1cnJlbnRseSByZWdpc3RlcmVkIGNsaWNrIGxpc3RlbmVyXG4gICAqIG9uIHRoZSBsaW5rIGB0aGlzLmVsbGlwc2lzQ2hhcmFjdGVyc2AgYXJlIHdyYXBwZWQgaW4uXG4gICAqL1xuICBwcml2YXRlIGRlc3Ryb3lNb3JlQ2xpY2tMaXN0ZW5lcjogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSB3aW5kb3cgbGlzdGVuZXIgcmVnaXN0ZXJlZCBieSBhIHByZXZpb3VzIGNhbGwgdG8gYGFkZFdpbmRvd1Jlc2l6ZUxpc3RlbmVyKClgLlxuICAgKi9cbiAgcHJpdmF0ZSByZW1vdmVXaW5kb3dSZXNpemVMaXN0ZW5lcjogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogVGhlIGVsbGlwc2lzIGh0bWwgYXR0cmlidXRlXG4gICAqIElmIGFueXRoaW5nIGlzIHBhc3NlZCwgdGhpcyB3aWxsIGJlIHVzZWQgYXMgYSBzdHJpbmcgdG8gYXBwZW5kIHRvXG4gICAqIHRoZSB0cnVuY2F0ZWQgY29udGVudHMuXG4gICAqIEVsc2UgJy4uLicgd2lsbCBiZSBhcHBlbmRlZC5cbiAgICovXG4gIEBJbnB1dCgnZWxsaXBzaXMnKSBlbGxpcHNpc0NoYXJhY3RlcnM6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGVsbGlwc2lzLWNvbnRlbnQgaHRtbCBhdHRyaWJ1dGVcbiAgICogSWYgcGFzc2VkIHRoaXMgaXMgdXNlZCBhcyBjb250ZW50LCBlbHNlIGNvbnRlbnRzXG4gICAqIGFyZSBmZXRjaGVkIGZyb20gdGV4dENvbnRlbnRcbiAgICovXG4gIEBJbnB1dCgnZWxsaXBzaXMtY29udGVudCcpIGVsbGlwc2lzQ29udGVudDogc3RyaW5nIHwgbnVtYmVyID0gbnVsbDtcblxuICAvKipcbiAgICogVGhlIGVsbGlwc2lzLXdvcmQtYm91bmRhcmllcyBodG1sIGF0dHJpYnV0ZVxuICAgKiBJZiBhbnl0aGluZyBpcyBwYXNzZWQsIGVhY2ggY2hhcmFjdGVyIHdpbGwgYmUgaW50ZXJwcmV0ZWRcbiAgICogYXMgYSB3b3JkIGJvdW5kYXJ5IGF0IHdoaWNoIHRoZSB0ZXh0IG1heSBiZSB0cnVuY2F0ZWQuXG4gICAqIEVsc2UgdGhlIHRleHQgbWF5IGJlIHRydW5jYXRlZCBhdCBhbnkgY2hhcmFjdGVyLlxuICAgKi9cbiAgQElucHV0KCdlbGxpcHNpcy13b3JkLWJvdW5kYXJpZXMnKSBlbGxpcHNpc1dvcmRCb3VuZGFyaWVzOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIHVzZSBmb3Igc3RyaW5nIHNwbGl0dGluZy4gRGVmYXVsdHMgdG8gdGhlIG5hdGl2ZSBgU3RyaW5nI3N1YnN0cmAuXG4gICAqIChUaGlzIG1heSBmb3IgZXhhbXBsZSBiZSB1c2VkIHRvIGF2b2lkIHNwbGl0dGluZyBzdXJyb2dhdGUgcGFpcnMtIHVzZWQgYnkgc29tZSBlbW9qaXMgLVxuICAgKiBieSBwcm92aWRpbmcgYSBsaWIgc3VjaCBhcyBydW5lcy4pXG4gICAqL1xuICBASW5wdXQoJ2VsbGlwc2lzLXN1YnN0ci1mbicpIGVsbGlwc2lzU3Vic3RyRm46ICAoc3RyOiBzdHJpbmcsIGZyb206IG51bWJlciwgbGVuZ3RoPzogbnVtYmVyKSA9PiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBlbGxpcHNpcy1yZXNpemUtZGV0ZWN0aW9uIGh0bWwgYXR0cmlidXRlXG4gICAqIEFsZ29yaXRobSB0byB1c2UgdG8gZGV0ZWN0IGVsZW1lbnQvd2luZG93IHJlc2l6ZSAtIGFueSBvZiB0aGUgZm9sbG93aW5nOlxuICAgKiAnZWxlbWVudC1yZXNpemUtZGV0ZWN0b3InOiAoZGVmYXVsdCkgVXNlIGh0dHBzOi8vZ2l0aHViLmNvbS93bnIvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3Igd2l0aCBpdHMgJ3Njcm9sbCcgc3RyYXRlZ3lcbiAgICogJ2VsZW1lbnQtcmVzaXplLWRldGVjdG9yLW9iamVjdCc6IFVzZSBodHRwczovL2dpdGh1Yi5jb20vd25yL2VsZW1lbnQtcmVzaXplLWRldGVjdG9yIHdpdGggaXRzICdvYmplY3QnIHN0cmF0ZWd5IChkZXByZWNhdGVkKVxuICAgKiAnd2luZG93JzogT25seSBjaGVjayBpZiB0aGUgd2hvbGUgd2luZG93IGhhcyBiZWVuIHJlc2l6ZWQvY2hhbmdlZCBvcmllbnRhdGlvbiBieSB1c2luZyBhbmd1bGFyJ3MgYnVpbHQtaW4gSG9zdExpc3RlbmVyXG4gICAqL1xuICBASW5wdXQoJ2VsbGlwc2lzLXJlc2l6ZS1kZXRlY3Rpb24nKSByZXNpemVEZXRlY3Rpb25TdHJhdGVneTpcbiAgICAnJyB8ICdtYW51YWwnIHwgJ2VsZW1lbnQtcmVzaXplLWRldGVjdG9yJyB8ICdlbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci1vYmplY3QnIHwgJ3dpbmRvdyc7XG5cbiAgLyoqXG4gICAqIFRoZSBlbGxpcHNpcy1jbGljay1tb3JlIGh0bWwgYXR0cmlidXRlXG4gICAqIElmIGFueXRoaW5nIGlzIHBhc3NlZCwgdGhlIGVsbGlwc2lzQ2hhcmFjdGVycyB3aWxsIGJlXG4gICAqIHdyYXBwZWQgaW4gPGE+PC9hPiB0YWdzIGFuZCBhbiBldmVudCBoYW5kbGVyIGZvciB0aGVcbiAgICogcGFzc2VkIGZ1bmN0aW9uIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGxpbmtcbiAgICovXG4gIEBPdXRwdXQoJ2VsbGlwc2lzLWNsaWNrLW1vcmUnKSBtb3JlQ2xpY2tFbWl0dGVyOiBFdmVudEVtaXR0ZXI8TW91c2VFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cblxuICAvKipcbiAgICogVGhlIGVsbGlwc2lzLWNoYW5nZSBodG1sIGF0dHJpYnV0ZVxuICAgKiBUaGlzIGVtaXRzIGFmdGVyIHdoaWNoIGluZGV4IHRoZSB0ZXh0IGhhcyBiZWVuIHRydW5jYXRlZC5cbiAgICogSWYgaXQgaGFzbid0IGJlZW4gdHJ1bmNhdGVkLCBudWxsIGlzIGVtaXR0ZWQuXG4gICAqL1xuICBAT3V0cHV0KCdlbGxpcHNpcy1jaGFuZ2UnKSBjaGFuZ2VFbWl0dGVyOiBFdmVudEVtaXR0ZXI8bnVtYmVyPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvKipcbiAgICogVXRpbGl0eSBtZXRob2QgdG8gcXVpY2tseSBmaW5kIHRoZSBsYXJnZXN0IG51bWJlciBmb3JcbiAgICogd2hpY2ggYGNhbGxiYWNrKG51bWJlcilgIHN0aWxsIHJldHVybnMgdHJ1ZS5cbiAgICogQHBhcmFtICBtYXggICAgICBIaWdoZXN0IHBvc3NpYmxlIG51bWJlclxuICAgKiBAcGFyYW0gIGNhbGxiYWNrIFNob3VsZCByZXR1cm4gdHJ1ZSBhcyBsb25nIGFzIHRoZSBwYXNzZWQgbnVtYmVyIGlzIHZhbGlkXG4gICAqIEByZXR1cm4gICAgICAgICAgTGFyZ2VzdCBwb3NzaWJsZSBudW1iZXJcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIG51bWVyaWNCaW5hcnlTZWFyY2gobWF4OiBudW1iZXIsIGNhbGxiYWNrOiAobjogbnVtYmVyKSA9PiBib29sZWFuKTogbnVtYmVyIHtcbiAgICBsZXQgbG93ID0gMDtcbiAgICBsZXQgaGlnaCA9IG1heDtcbiAgICBsZXQgYmVzdCA9IC0xO1xuICAgIGxldCBtaWQ6IG51bWJlcjtcblxuICAgIHdoaWxlIChsb3cgPD0gaGlnaCkge1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWJpdHdpc2VcbiAgICAgIG1pZCA9IH5+KChsb3cgKyBoaWdoKSAvIDIpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gY2FsbGJhY2sobWlkKTtcbiAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIGhpZ2ggPSBtaWQgLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmVzdCA9IG1pZDtcbiAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYmVzdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IGVsbGlwc2lzIGlucHV0IHRvIHN0cmluZ1xuICAgKiBAcGFyYW0gaW5wdXQgc3RyaW5nIG9yIG51bWJlciB0byBiZSBkaXNwbGF5ZWQgYXMgYW4gZWxsaXBzaXNcbiAgICogQHJldHVybiAgICAgIGlucHV0IGNvbnZlcnRlZCB0byBzdHJpbmdcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGNvbnZlcnRFbGxpcHNpc0lucHV0VG9TdHJpbmcoaW5wdXQ6IHN0cmluZyB8IG51bWJlcik6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3VuZGVmaW5lZCcgfHwgaW5wdXQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gU3RyaW5nKGlucHV0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZGlyZWN0aXZlJ3MgY29uc3RydWN0b3JcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogT2JqZWN0XG4gICkgeyB9XG5cbiAgLyoqXG4gICAqIEFuZ3VsYXIncyBpbml0IHZpZXcgbGlmZSBjeWNsZSBob29rLlxuICAgKiBJbml0aWFsaXplcyB0aGUgZWxlbWVudCBmb3IgZGlzcGxheWluZyB0aGUgZWxsaXBzaXMuXG4gICAqL1xuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKCFpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICAvLyBpbiBhbmd1bGFyIHVuaXZlcnNhbCB3ZSBkb24ndCBoYXZlIGFjY2VzcyB0byB0aGUgdWdseVxuICAgICAgLy8gRE9NIG1hbmlwdWxhdGlvbiBwcm9wZXJ0aWVzIHdlIHNhZGx5IG5lZWQgdG8gYWNjZXNzIGhlcmUsXG4gICAgICAvLyBzbyB3YWl0IHVudGlsIHdlJ3JlIGluIHRoZSBicm93c2VyOlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGxldCB0aGUgZWxsaXBzaXMgY2hhcmFjdGVycyBkZWZhdWx0IHRvICcuLi4nOlxuICAgIGlmICh0aGlzLmVsbGlwc2lzQ2hhcmFjdGVycyA9PT0gJycpIHtcbiAgICAgIHRoaXMuZWxsaXBzaXNDaGFyYWN0ZXJzID0gJy4uLic7XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIG1vcmUgYW5jaG9yIGVsZW1lbnQ6XG4gICAgdGhpcy5tb3JlQW5jaG9yID0gPEhUTUxBbmNob3JFbGVtZW50PiB0aGlzLnJlbmRlcmVyLmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB0aGlzLm1vcmVBbmNob3IuY2xhc3NOYW1lID0gJ25neC1lbGxpcHNpcy1tb3JlJztcbiAgICB0aGlzLm1vcmVBbmNob3IuaHJlZiA9ICcjJztcbiAgICB0aGlzLm1vcmVBbmNob3IudGV4dENvbnRlbnQgPSB0aGlzLmVsbGlwc2lzQ2hhcmFjdGVycztcblxuICAgIC8vIHBlcmZvcm0gcmVnZXggcmVwbGFjZSBvbiB3b3JkIGJvdW5kYXJpZXM6XG4gICAgaWYgKCF0aGlzLmVsbGlwc2lzV29yZEJvdW5kYXJpZXMpIHtcbiAgICAgIHRoaXMuZWxsaXBzaXNXb3JkQm91bmRhcmllcyA9ICcnO1xuICAgIH1cbiAgICB0aGlzLmVsbGlwc2lzV29yZEJvdW5kYXJpZXMgPSAnWycgKyB0aGlzLmVsbGlwc2lzV29yZEJvdW5kYXJpZXMucmVwbGFjZSgvXFxcXG4vLCAnXFxuJykucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJykgKyAnXSc7XG5cbiAgICBpZiAoIXRoaXMuZWxsaXBzaXNTdWJzdHJGbikge1xuICAgICAgdGhpcy5lbGxpcHNpc1N1YnN0ckZuID0gKHN0cjogc3RyaW5nLCBmcm9tOiBudW1iZXIsIGxlbmd0aD86IG51bWJlcikgPT4ge1xuICAgICAgICByZXR1cm4gc3RyLnN1YnN0cihmcm9tLCBsZW5ndGgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHN0b3JlIHRoZSBvcmlnaW5hbCBjb250ZW50cyBvZiB0aGUgZWxlbWVudDpcbiAgICB0aGlzLmVsZW0gPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgICBpZiAodHlwZW9mIHRoaXMuZWxsaXBzaXNDb250ZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLmVsbGlwc2lzQ29udGVudCAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5vcmlnaW5hbFRleHQgPSBFbGxpcHNpc0RpcmVjdGl2ZS5jb252ZXJ0RWxsaXBzaXNJbnB1dFRvU3RyaW5nKHRoaXMuZWxsaXBzaXNDb250ZW50KTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLm9yaWdpbmFsVGV4dCkge1xuICAgICAgdGhpcy5vcmlnaW5hbFRleHQgPSB0aGlzLmVsZW0udGV4dENvbnRlbnQudHJpbSgpO1xuICAgIH1cblxuICAgIC8vIGFkZCBhIHdyYXBwZXIgZGl2IChyZXF1aXJlZCBmb3IgcmVzaXplIGV2ZW50cyB0byB3b3JrIHByb3Blcmx5KTpcbiAgICB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMuZWxlbSwgJ2lubmVySFRNTCcsICcnKTtcbiAgICB0aGlzLmlubmVyRWxlbSA9IHRoaXMucmVuZGVyZXIuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmlubmVyRWxlbSwgJ25neC1lbGxpcHNpcy1pbm5lcicpO1xuICAgIGNvbnN0IHRleHQgPSB0aGlzLnJlbmRlcmVyLmNyZWF0ZVRleHQodGhpcy5vcmlnaW5hbFRleHQpO1xuICAgIHRoaXMucmVuZGVyZXIuYXBwZW5kQ2hpbGQodGhpcy5pbm5lckVsZW0sIHRleHQpO1xuICAgIHRoaXMucmVuZGVyZXIuYXBwZW5kQ2hpbGQodGhpcy5lbGVtLCB0aGlzLmlubmVyRWxlbSk7XG5cbiAgICAvLyBzdGFydCBsaXN0ZW5pbmcgZm9yIHJlc2l6ZSBldmVudHM6XG4gICAgdGhpcy5hZGRSZXNpemVMaXN0ZW5lcih0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbmd1bGFyJ3MgY2hhbmdlIGxpZmUgY3ljbGUgaG9vay5cbiAgICogQ2hhbmdlIG9yaWdpbmFsIHRleHQgKGlmIHRoZSBlbGxpcHNpcy1jb250ZW50IGhhcyBiZWVuIHBhc3NlZClcbiAgICogYW5kIHJlLXJlbmRlclxuICAgKi9cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgaWYgKCF0aGlzLmVsZW1cbiAgICAgIHx8IHR5cGVvZiB0aGlzLmVsbGlwc2lzQ29udGVudCA9PT0gJ3VuZGVmaW5lZCdcbiAgICAgIHx8IHRoaXMub3JpZ2luYWxUZXh0ID09PSBFbGxpcHNpc0RpcmVjdGl2ZS5jb252ZXJ0RWxsaXBzaXNJbnB1dFRvU3RyaW5nKHRoaXMuZWxsaXBzaXNDb250ZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMub3JpZ2luYWxUZXh0ID0gRWxsaXBzaXNEaXJlY3RpdmUuY29udmVydEVsbGlwc2lzSW5wdXRUb1N0cmluZyh0aGlzLmVsbGlwc2lzQ29udGVudCk7XG4gICAgdGhpcy5hcHBseUVsbGlwc2lzKCk7XG4gIH1cblxuICAvKipcbiAgICogQW5ndWxhcidzIGRlc3Ryb3kgbGlmZSBjeWNsZSBob29rLlxuICAgKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzXG4gICAqL1xuICBuZ09uRGVzdHJveSgpIHtcbiAgICAvLyBJbiBhbmd1bGFyIHVuaXZlcnNhbCB3ZSBkb24ndCBoYXZlIGFueSBsaXN0ZW5lcnMgaG9va2VkIHVwIChhbGwgcmVxdWlyaW5nIHVnbHkgRE9NIG1hbmlwdWxhdGlvbiBtZXRob2RzKSxcbiAgICAvLyBzbyB3ZSBvbmx5IG5lZWQgdG8gcmVtb3ZlIHRoZW0sIGlmIHdlJ3JlIGluc2lkZSB0aGUgYnJvd3NlcjpcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcmVtb3ZlIGFsbCByZXNpemUgbGlzdGVuZXJzXG4gICAqL1xuICBwcml2YXRlIHJlbW92ZUFsbExpc3RlbmVycygpIHtcbiAgICBpZiAodGhpcy5kZXN0cm95TW9yZUNsaWNrTGlzdGVuZXIpIHtcbiAgICAgIHRoaXMuZGVzdHJveU1vcmVDbGlja0xpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgdGhpcy5yZW1vdmVSZXNpemVMaXN0ZW5lcigpO1xuICB9XG5cblxuICAvKipcbiAgICogU2V0IHVwIGFuIGV2ZW50IGxpc3RlbmVyIHRvIGNhbGwgYXBwbHlFbGxpcHNpcygpIHdoZW5ldmVyIGEgcmVzaXplIGhhcyBiZWVuIHJlZ2lzdGVyZWQuXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBsaXN0ZW5lciAod2luZG93L2VsZW1lbnQpIGRlcGVuZHMgb24gdGhlIHJlc2l6ZURldGVjdGlvblN0cmF0ZWd5LlxuICAgKiBAcGFyYW0gdHJpZ2dlck5vdz1mYWxzZSBpZiB0cnVlLCB0aGUgZWxsaXBzaXMgaXMgYXBwbGllZCBpbW1lZGlhdGVseVxuICAgKi9cbiAgcHJpdmF0ZSBhZGRSZXNpemVMaXN0ZW5lcih0cmlnZ2VyTm93ID0gZmFsc2UpIHtcbiAgICBpZiAodHlwZW9mICh0aGlzLnJlc2l6ZURldGVjdGlvblN0cmF0ZWd5KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMucmVzaXplRGV0ZWN0aW9uU3RyYXRlZ3kgPSAnJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRoaXMucmVzaXplRGV0ZWN0aW9uU3RyYXRlZ3kpIHtcbiAgICAgIGNhc2UgJ21hbnVhbCc6XG4gICAgICAgIC8vIFVzZXJzIHdpbGwgdHJpZ2dlciBhcHBseUVsbGlwc2lzIHZpYSB0aGUgcHVibGljIEFQSVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3dpbmRvdyc6XG4gICAgICAgIHRoaXMuYWRkV2luZG93UmVzaXplTGlzdGVuZXIoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdlbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci1vYmplY3QnOlxuICAgICAgICB0aGlzLmFkZEVsZW1lbnRSZXNpemVMaXN0ZW5lcihmYWxzZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHR5cGVvZiAoY29uc29sZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgYE5vIHN1Y2ggZWxsaXBzaXMtcmVzaXplLWRldGVjdGlvbiBzdHJhdGVneTogJyR7dGhpcy5yZXNpemVEZXRlY3Rpb25TdHJhdGVneX0nLiBVc2luZyAnZWxlbWVudC1yZXNpemUtZGV0ZWN0b3InIGluc3RlYWRgXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWZhbGx0aHJvdWdoXG4gICAgICBjYXNlICdlbGVtZW50LXJlc2l6ZS1kZXRlY3Rvcic6XG4gICAgICBjYXNlICcnOlxuICAgICAgICB0aGlzLmFkZEVsZW1lbnRSZXNpemVMaXN0ZW5lcigpO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAodHJpZ2dlck5vdyAmJiB0aGlzLnJlc2l6ZURldGVjdGlvblN0cmF0ZWd5ICE9PSAnbWFudWFsJykge1xuICAgICAgdGhpcy5hcHBseUVsbGlwc2lzKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB1cCBhbiBldmVudCBsaXN0ZW5lciB0byBjYWxsIGFwcGx5RWxsaXBzaXMoKSB3aGVuZXZlciB0aGUgd2luZG93IGdldHMgcmVzaXplZC5cbiAgICovXG4gIHByaXZhdGUgYWRkV2luZG93UmVzaXplTGlzdGVuZXIoKSB7XG4gICAgdGhpcy5yZW1vdmVXaW5kb3dSZXNpemVMaXN0ZW5lciA9IHRoaXMucmVuZGVyZXIubGlzdGVuKCd3aW5kb3cnLCAncmVzaXplJywgKCkgPT4ge1xuICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgdGhpcy5hcHBseUVsbGlwc2lzKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdXAgYW4gZXZlbnQgbGlzdGVuZXIgdG8gY2FsbCBhcHBseUVsbGlwc2lzKCkgd2hlbmV2ZXIgdGhlIGVsZW1lbnRcbiAgICogaGFzIGJlZW4gcmVzaXplZC5cbiAgICogQHBhcmFtIHNjcm9sbFN0cmF0ZWd5PXRydWUgVXNlIHRoZSBkZWZhdWx0IGVsZW1lbnRSZXNpemVEZXRlY3RvcidzIC0gc3RyYXRlZ3kgLSBzLiBodHRwczovL2dpdGh1Yi5jb20vd25yL2VsZW1lbnQtcmVzaXplLWRldGVjdG9yXG4gICAqL1xuICBwcml2YXRlIGFkZEVsZW1lbnRSZXNpemVMaXN0ZW5lcihzY3JvbGxTdHJhdGVneSA9IHRydWUpIHtcbiAgICBpZiAoIUVsbGlwc2lzRGlyZWN0aXZlLmVsZW1lbnRSZXNpemVEZXRlY3Rvcikge1xuICAgICAgRWxsaXBzaXNEaXJlY3RpdmUuZWxlbWVudFJlc2l6ZURldGVjdG9yID0gZWxlbWVudFJlc2l6ZURldGVjdG9yTWFrZXIoeyBzdHJhdGVneTogc2Nyb2xsU3RyYXRlZ3kgPyAnc2Nyb2xsJyA6ICdvYmplY3QnIH0pO1xuICAgIH1cblxuXG4gICAgbGV0IGZpcnN0RXZlbnQgPSB0cnVlO1xuICAgIEVsbGlwc2lzRGlyZWN0aXZlLmVsZW1lbnRSZXNpemVEZXRlY3Rvci5saXN0ZW5Ubyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgKCkgPT4ge1xuICAgICAgaWYgKGZpcnN0RXZlbnQpIHtcbiAgICAgICAgLy8gZWxlbWVudFJlc2l6ZURldGVjdG9yIGZpcmVzIHRoZSBldmVudCBkaXJlY3RseSBhZnRlciByZS1hdHRhY2hpbmcgdGhlIGxpc3RlbmVyXG4gICAgICAgIC8vIC0+IGRpc2NhcmQgdGhhdCBmaXJzdCBldmVudDpcbiAgICAgICAgZmlyc3RFdmVudCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmFwcGx5RWxsaXBzaXMoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wIGxpc3RlbmluZyBmb3IgYW55IHJlc2l6ZSBldmVudC5cbiAgICovXG4gIHByaXZhdGUgcmVtb3ZlUmVzaXplTGlzdGVuZXIoKSB7XG4gICAgaWYgKHRoaXMucmVzaXplRGV0ZWN0aW9uU3RyYXRlZ3kgIT09ICd3aW5kb3cnKSB7XG4gICAgICBpZiAoRWxsaXBzaXNEaXJlY3RpdmUuZWxlbWVudFJlc2l6ZURldGVjdG9yICYmIHRoaXMuZWxlbSkge1xuICAgICAgICBFbGxpcHNpc0RpcmVjdGl2ZS5lbGVtZW50UmVzaXplRGV0ZWN0b3IucmVtb3ZlQWxsTGlzdGVuZXJzKHRoaXMuZWxlbSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVtb3ZlV2luZG93UmVzaXplTGlzdGVuZXIoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBvcmlnaW5hbCB0ZXh0J3MgdHJ1bmNhdGVkIHZlcnNpb24uIElmIHRoZSB0ZXh0IHJlYWxseSBuZWVkZWQgdG9cbiAgICogYmUgdHJ1bmNhdGVkLCB0aGlzLmVsbGlwc2lzQ2hhcmFjdGVycyB3aWxsIGJlIGFwcGVuZGVkLlxuICAgKiBAcGFyYW0gbWF4IHRoZSBtYXhpbXVtIGxlbmd0aCB0aGUgdGV4dCBtYXkgaGF2ZVxuICAgKiBAcmV0dXJuIHN0cmluZyAgICAgICB0aGUgdHJ1bmNhdGVkIHN0cmluZ1xuICAgKi9cbiAgcHJpdmF0ZSBnZXRUcnVuY2F0ZWRUZXh0KG1heDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAoIXRoaXMub3JpZ2luYWxUZXh0IHx8IHRoaXMub3JpZ2luYWxUZXh0Lmxlbmd0aCA8PSBtYXgpIHtcbiAgICAgIHJldHVybiB0aGlzLm9yaWdpbmFsVGV4dDtcbiAgICB9XG5cbiAgICBjb25zdCB0cnVuY2F0ZWRUZXh0ID0gdGhpcy5lbGxpcHNpc1N1YnN0ckZuKHRoaXMub3JpZ2luYWxUZXh0LCAwLCBtYXgpO1xuICAgIGlmICh0aGlzLmVsbGlwc2lzV29yZEJvdW5kYXJpZXMgPT09ICdbXScgfHwgdGhpcy5vcmlnaW5hbFRleHQuY2hhckF0KG1heCkubWF0Y2godGhpcy5lbGxpcHNpc1dvcmRCb3VuZGFyaWVzKSkge1xuICAgICAgcmV0dXJuIHRydW5jYXRlZFRleHQ7XG4gICAgfVxuXG4gICAgbGV0IGkgPSBtYXggLSAxO1xuICAgIHdoaWxlIChpID4gMCAmJiAhdHJ1bmNhdGVkVGV4dC5jaGFyQXQoaSkubWF0Y2godGhpcy5lbGxpcHNpc1dvcmRCb3VuZGFyaWVzKSkge1xuICAgICAgaS0tO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5lbGxpcHNpc1N1YnN0ckZuKHRydW5jYXRlZFRleHQsIDAsIGkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdHJ1bmNhdGVkIHRleHQgdG8gYmUgZGlzcGxheWVkIGluIHRoZSBpbm5lciBkaXZcbiAgICogQHBhcmFtIG1heCB0aGUgbWF4aW11bSBsZW5ndGggdGhlIHRleHQgbWF5IGhhdmVcbiAgICogQHBhcmFtIGFkZE1vcmVMaXN0ZW5lcj1mYWxzZSBsaXN0ZW4gZm9yIGNsaWNrIG9uIHRoZSBlbGxpcHNpc0NoYXJhY3RlcnMgYW5jaG9yIHRhZyBpZiB0aGUgdGV4dCBoYXMgYmVlbiB0cnVuY2F0ZWRcbiAgICogQHJldHVybnMgbGVuZ3RoIG9mIHJlbWFpbmluZyB0ZXh0IChleGNsdWRpbmcgdGhlIGVsbGlwc2lzQ2hhcmFjdGVycywgaWYgdGhleSB3ZXJlIGFkZGVkKVxuICAgKi9cbiAgcHJpdmF0ZSB0cnVuY2F0ZVRleHQobWF4OiBudW1iZXIsIGFkZE1vcmVMaXN0ZW5lciA9IGZhbHNlKTogbnVtYmVyIHtcbiAgICBsZXQgdGV4dCA9IHRoaXMuZ2V0VHJ1bmNhdGVkVGV4dChtYXgpO1xuICAgIGNvbnN0IHRydW5jYXRlZExlbmd0aCA9IHRleHQubGVuZ3RoO1xuICAgIGNvbnN0IHRleHRUcnVuY2F0ZWQgPSAodHJ1bmNhdGVkTGVuZ3RoICE9PSB0aGlzLm9yaWdpbmFsVGV4dC5sZW5ndGgpO1xuXG4gICAgaWYgKHRleHRUcnVuY2F0ZWQgJiYgIXRoaXMuc2hvd01vcmVMaW5rKSB7XG4gICAgICB0ZXh0ICs9IHRoaXMuZWxsaXBzaXNDaGFyYWN0ZXJzO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5pbm5lckVsZW0sICd0ZXh0Q29udGVudCcsIHRleHQpO1xuXG4gICAgaWYgKHRleHRUcnVuY2F0ZWQgJiYgdGhpcy5zaG93TW9yZUxpbmspIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYXBwZW5kQ2hpbGQodGhpcy5pbm5lckVsZW0sIHRoaXMubW9yZUFuY2hvcik7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGFueSBleGlzdGluZyBtb3JlIGNsaWNrIGxpc3RlbmVyOlxuICAgIGlmICh0aGlzLmRlc3Ryb3lNb3JlQ2xpY2tMaXN0ZW5lcikge1xuICAgICAgdGhpcy5kZXN0cm95TW9yZUNsaWNrTGlzdGVuZXIoKTtcbiAgICAgIHRoaXMuZGVzdHJveU1vcmVDbGlja0xpc3RlbmVyID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgdGV4dCBoYXMgYmVlbiB0cnVuY2F0ZWQsIGFkZCBhIG1vcmUgY2xpY2sgbGlzdGVuZXI6XG4gICAgaWYgKGFkZE1vcmVMaXN0ZW5lciAmJiB0ZXh0VHJ1bmNhdGVkKSB7XG4gICAgICB0aGlzLmRlc3Ryb3lNb3JlQ2xpY2tMaXN0ZW5lciA9IHRoaXMucmVuZGVyZXIubGlzdGVuKHRoaXMubW9yZUFuY2hvciwgJ2NsaWNrJywgKGU6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKCFlLnRhcmdldCB8fCAoPEhUTUxFbGVtZW50PiBlLnRhcmdldCkuY2xhc3NOYW1lICE9PSAnbmd4LWVsbGlwc2lzLW1vcmUnKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5tb3JlQ2xpY2tFbWl0dGVyLmVtaXQoZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1bmNhdGVkTGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BsYXkgZWxsaXBzaXMgaW4gdGhlIGlubmVyIGRpdiBpZiB0aGUgdGV4dCB3b3VsZCBleGNlZWQgdGhlIGJvdW5kYXJpZXNcbiAgICovXG4gIHB1YmxpYyBhcHBseUVsbGlwc2lzKCkge1xuICAgIC8vIFJlbW92ZSB0aGUgcmVzaXplIGxpc3RlbmVyIGFzIGNoYW5naW5nIHRoZSBjb250YWluZWQgdGV4dCB3b3VsZCB0cmlnZ2VyIGV2ZW50czpcbiAgICB0aGlzLnJlbW92ZVJlc2l6ZUxpc3RlbmVyKCk7XG5cbiAgICAvLyBGaW5kIHRoZSBiZXN0IGxlbmd0aCBieSB0cmlhbCBhbmQgZXJyb3I6XG4gICAgY29uc3QgbWF4TGVuZ3RoID0gRWxsaXBzaXNEaXJlY3RpdmUubnVtZXJpY0JpbmFyeVNlYXJjaCh0aGlzLm9yaWdpbmFsVGV4dC5sZW5ndGgsIGN1ckxlbmd0aCA9PiB7XG4gICAgICB0aGlzLnRydW5jYXRlVGV4dChjdXJMZW5ndGgpO1xuICAgICAgcmV0dXJuICF0aGlzLmlzT3ZlcmZsb3dpbmc7XG4gICAgfSk7XG5cbiAgICAvLyBBcHBseSB0aGUgYmVzdCBsZW5ndGg6XG4gICAgY29uc3QgZmluYWxMZW5ndGggPSB0aGlzLnRydW5jYXRlVGV4dChtYXhMZW5ndGgsIHRoaXMuc2hvd01vcmVMaW5rKTtcblxuICAgIC8vIFJlLWF0dGFjaCB0aGUgcmVzaXplIGxpc3RlbmVyOlxuICAgIHRoaXMuYWRkUmVzaXplTGlzdGVuZXIoKTtcblxuICAgIC8vIEVtaXQgY2hhbmdlIGV2ZW50OlxuICAgIGlmICh0aGlzLmNoYW5nZUVtaXR0ZXIub2JzZXJ2ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuY2hhbmdlRW1pdHRlci5lbWl0KFxuICAgICAgICAodGhpcy5vcmlnaW5hbFRleHQubGVuZ3RoID09PSBmaW5hbExlbmd0aCkgPyBudWxsIDogZmluYWxMZW5ndGhcbiAgICAgICk7XG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogV2hldGhlciB0aGUgdGV4dCBpcyBleGNlZWRpbmcgdGhlIGVsZW1lbnQncyBib3VuZGFyaWVzIG9yIG5vdFxuICAgKi9cbiAgcHJpdmF0ZSBnZXQgaXNPdmVyZmxvd2luZygpOiBib29sZWFuIHtcbiAgICAvLyBFbmZvcmNlIGhpZGRlbiBvdmVyZmxvdyAocmVxdWlyZWQgdG8gY29tcGFyZSBjbGllbnQgd2lkdGgvaGVpZ2h0IHdpdGggc2Nyb2xsIHdpZHRoL2hlaWdodClcbiAgICBjb25zdCBjdXJyZW50T3ZlcmZsb3cgPSB0aGlzLmVsZW0uc3R5bGUub3ZlcmZsb3c7XG4gICAgaWYgKCFjdXJyZW50T3ZlcmZsb3cgfHwgY3VycmVudE92ZXJmbG93ID09PSAndmlzaWJsZScpIHtcbiAgICAgIHRoaXMuZWxlbS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgIH1cblxuICAgIGNvbnN0IGlzT3ZlcmZsb3dpbmcgPSB0aGlzLmVsZW0uY2xpZW50V2lkdGggPCB0aGlzLmVsZW0uc2Nyb2xsV2lkdGggLSAxIHx8IHRoaXMuZWxlbS5jbGllbnRIZWlnaHQgPCB0aGlzLmVsZW0uc2Nyb2xsSGVpZ2h0IC0gMTtcblxuICAgIC8vIFJlc2V0IG92ZXJmbG93IHRvIHRoZSBvcmlnaW5hbCBjb25maWd1cmF0aW9uOlxuICAgIHRoaXMuZWxlbS5zdHlsZS5vdmVyZmxvdyA9IGN1cnJlbnRPdmVyZmxvdztcblxuICAgIHJldHVybiBpc092ZXJmbG93aW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlIGBlbGxpcHNpc0NoYXJhY3RlcnNgIGFyZSB0byBiZSB3cmFwcGVkIGluc2lkZSBhbiBhbmNob3IgdGFnIChpZiB0aGV5IGFyZSBzaG93biBhdCBhbGwpXG4gICAqL1xuICBwcml2YXRlIGdldCBzaG93TW9yZUxpbmsoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICh0aGlzLm1vcmVDbGlja0VtaXR0ZXIub2JzZXJ2ZXJzLmxlbmd0aCA+IDApO1xuICB9XG59XG4iXX0=