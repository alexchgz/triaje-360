{"version":3,"file":"ellipsis.directive.d.ts","sources":["ellipsis.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, Renderer2, EventEmitter, NgZone, OnChanges, AfterViewInit, OnDestroy } from '@angular/core';\n/**\n * Directive to truncate the contained text, if it exceeds the element's boundaries\n * and append characters (configurable, default '...') if so.\n */\nexport declare class EllipsisDirective implements OnChanges, OnDestroy, AfterViewInit {\n    private elementRef;\n    private renderer;\n    private ngZone;\n    private platformId;\n    /**\n     * Instance of https://github.com/wnr/element-resize-detector\n     */\n    private static elementResizeDetector;\n    /**\n     * The original text (not truncated yet)\n     */\n    private originalText;\n    /**\n     * The referenced element\n     */\n    private elem;\n    /**\n     * Inner div element (will be auto-created)\n     */\n    private innerElem;\n    /**\n     * Anchor tag wrapping the `ellipsisCharacters`\n     */\n    private moreAnchor;\n    /**\n     * Remove function for the currently registered click listener\n     * on the link `this.ellipsisCharacters` are wrapped in.\n     */\n    private destroyMoreClickListener;\n    /**\n     * Remove the window listener registered by a previous call to `addWindowResizeListener()`.\n     */\n    private removeWindowResizeListener;\n    /**\n     * The ellipsis html attribute\n     * If anything is passed, this will be used as a string to append to\n     * the truncated contents.\n     * Else '...' will be appended.\n     */\n    ellipsisCharacters: string;\n    /**\n     * The ellipsis-content html attribute\n     * If passed this is used as content, else contents\n     * are fetched from textContent\n     */\n    ellipsisContent: string | number;\n    /**\n     * The ellipsis-word-boundaries html attribute\n     * If anything is passed, each character will be interpreted\n     * as a word boundary at which the text may be truncated.\n     * Else the text may be truncated at any character.\n     */\n    ellipsisWordBoundaries: string;\n    /**\n     * Function to use for string splitting. Defaults to the native `String#substr`.\n     * (This may for example be used to avoid splitting surrogate pairs- used by some emojis -\n     * by providing a lib such as runes.)\n     */\n    ellipsisSubstrFn: (str: string, from: number, length?: number) => string;\n    /**\n     * The ellipsis-resize-detection html attribute\n     * Algorithm to use to detect element/window resize - any of the following:\n     * 'element-resize-detector': (default) Use https://github.com/wnr/element-resize-detector with its 'scroll' strategy\n     * 'element-resize-detector-object': Use https://github.com/wnr/element-resize-detector with its 'object' strategy (deprecated)\n     * 'window': Only check if the whole window has been resized/changed orientation by using angular's built-in HostListener\n     */\n    resizeDetectionStrategy: '' | 'manual' | 'element-resize-detector' | 'element-resize-detector-object' | 'window';\n    /**\n     * The ellipsis-click-more html attribute\n     * If anything is passed, the ellipsisCharacters will be\n     * wrapped in <a></a> tags and an event handler for the\n     * passed function will be added to the link\n     */\n    moreClickEmitter: EventEmitter<MouseEvent>;\n    /**\n     * The ellipsis-change html attribute\n     * This emits after which index the text has been truncated.\n     * If it hasn't been truncated, null is emitted.\n     */\n    changeEmitter: EventEmitter<number>;\n    /**\n     * Utility method to quickly find the largest number for\n     * which `callback(number)` still returns true.\n     * @param  max      Highest possible number\n     * @param  callback Should return true as long as the passed number is valid\n     * @return          Largest possible number\n     */\n    private static numericBinarySearch;\n    /**\n     * Convert ellipsis input to string\n     * @param input string or number to be displayed as an ellipsis\n     * @return      input converted to string\n     */\n    private static convertEllipsisInputToString;\n    /**\n     * The directive's constructor\n     */\n    constructor(elementRef: ElementRef<HTMLElement>, renderer: Renderer2, ngZone: NgZone, platformId: Object);\n    /**\n     * Angular's init view life cycle hook.\n     * Initializes the element for displaying the ellipsis.\n     */\n    ngAfterViewInit(): void;\n    /**\n     * Angular's change life cycle hook.\n     * Change original text (if the ellipsis-content has been passed)\n     * and re-render\n     */\n    ngOnChanges(): void;\n    /**\n     * Angular's destroy life cycle hook.\n     * Remove event listeners\n     */\n    ngOnDestroy(): void;\n    /**\n     * remove all resize listeners\n     */\n    private removeAllListeners;\n    /**\n     * Set up an event listener to call applyEllipsis() whenever a resize has been registered.\n     * The type of the listener (window/element) depends on the resizeDetectionStrategy.\n     * @param triggerNow=false if true, the ellipsis is applied immediately\n     */\n    private addResizeListener;\n    /**\n     * Set up an event listener to call applyEllipsis() whenever the window gets resized.\n     */\n    private addWindowResizeListener;\n    /**\n     * Set up an event listener to call applyEllipsis() whenever the element\n     * has been resized.\n     * @param scrollStrategy=true Use the default elementResizeDetector's - strategy - s. https://github.com/wnr/element-resize-detector\n     */\n    private addElementResizeListener;\n    /**\n     * Stop listening for any resize event.\n     */\n    private removeResizeListener;\n    /**\n     * Get the original text's truncated version. If the text really needed to\n     * be truncated, this.ellipsisCharacters will be appended.\n     * @param max the maximum length the text may have\n     * @return string       the truncated string\n     */\n    private getTruncatedText;\n    /**\n     * Set the truncated text to be displayed in the inner div\n     * @param max the maximum length the text may have\n     * @param addMoreListener=false listen for click on the ellipsisCharacters anchor tag if the text has been truncated\n     * @returns length of remaining text (excluding the ellipsisCharacters, if they were added)\n     */\n    private truncateText;\n    /**\n     * Display ellipsis in the inner div if the text would exceed the boundaries\n     */\n    applyEllipsis(): void;\n    /**\n     * Whether the text is exceeding the element's boundaries or not\n     */\n    private readonly isOverflowing;\n    /**\n     * Whether the `ellipsisCharacters` are to be wrapped inside an anchor tag (if they are shown at all)\n     */\n    private readonly showMoreLink;\n}\n"]}